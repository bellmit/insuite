/*global YUI */
YUI.add( 'dc-client-test', function( Y/*, NAME*/ ) {
    'use strict';
    /**
     * `doccirrus.test` wraps the Y.Test (~YUITest) Module and should provide some utilities to work with tests
     *
     * @example
     * `MyModule.client-tests.js`
     * @example
     YUI.add( 'MyModule-tests', function( Y, NAME ) {
         'use strict';
         var
             testNs = Y.doccirrus.test,
             TestModule = testNs.getTestModule(),
             suite = new TestModule.TestSuite( NAME ),
             A = TestModule.Assert,
             Namespace = null;

         // MyModule namespace tests
         suite.add( new TestModule.TestCase( {
             // the test case
             name: 'MyModule tests',
             // stub
             setUp: function() {
                 Namespace = Y.doccirrus.MyModule;
             },
             tearDown: function() {
                 Namespace = null;
             },
             // tests
             'test Namespace': function() {
                 A.isObject( Namespace, 'Namespace available' );
             }
         } ) );

         TestModule.TestRunner.add( suite );

     }, '0.0.1', {
         requires: [
             'dc-client-test',
             'MyModule'
         ]
     } );
     *
     * @module dc-client-test
     * @since 3.16.0
     */
    Y.namespace( 'doccirrus' );
    var
        TestRunner = Y.Test.TestRunner,
        messages = new Y.LazyModelList();

    /**
     * `doccirrus.test` wraps the Y.Test (~YUITest) Module and should provide some utilities to work with tests
     * @class doccirrus.test
     */
    /**
     * @property test
     * @for doccirrus
     * @type {doccirrus.test}
     */
    Y.doccirrus.test = {
        /**
         * returns the wrapped Y.Test (~YUITest)
         * @method getTestModule
         * @for doccirrus.test
         * @returns {Test|*}
         */
        getTestModule: function() {
            return Y.Test;
        },
        /**
         * A LazyModelList which receives the events while testing
         * `{ message: 'foo', messageType: 'info', event: * }`
         * @method getMessages
         * @for doccirrus.test
         * @returns {Y.LazyModelList}
         */
        getMessages: function() {
            return messages;
        },
        /**
         * some utilities to work with tests
         * @class doccirrus.test.utils
         */
        /**
         * @property utils
         * @for doccirrus.test
         * @type {doccirrus.test.utils}
         */
        utils: {
            /**
             * Fills an observableArray with `{ text:'',messageCss:'' }` while testing
             * @method createSubscribeForArray
             * @for doccirrus.test.utils
             * @param array
             * @returns {*} Event subscription
             */
            createSubscribeForArray: function( array ) {
                var forArray = array;
                return messages.on( 'add', function( event ) {
                    var
                        text = event.model.message,
                        messageCss;

                    switch( event.model.messageType ) {
                        case'info':
                            messageCss = 'bg-info text-info';
                            break;
                        case'pass':
                            messageCss = 'bg-success text-success';
                            break;
                        case'ignore':
                            messageCss = 'bg-warning text-warning';
                            break;
                        case'fail':
                            messageCss = 'bg-danger text-danger';
                            break;
                    }

                    forArray.push( {
                        text: text,
                        messageCss: messageCss
                    } );
                } );
            },
            /**
             * Test if a given Node should be visible to the user
             * @method isNodeVisible
             * @param node
             * @for doccirrus.test.utils
             * @returns {*|boolean}
             */
            isNodeVisible: function( node ) {
                return Boolean( (
                    node.inDoc() &&
                    'none' !== node.getComputedStyle( 'display' ) &&
                    'visible' === node.getComputedStyle( 'visibility' ) &&
                    node.inViewportRegion() &&
                    Boolean( parseInt( node.getComputedStyle( 'width' ), 10 ) ) &&
                    Boolean( parseInt( node.getComputedStyle( 'height' ), 10 ) )
                    ) );
            }
        }
    };

    //function to handle events generated by the testrunner
    function logEvent( event ) {
        //data variables
        var
            message = "",
            messageType = "";

        switch( event.type ) {
            case TestRunner.BEGIN_EVENT:
                message = "Testing began at " + (new Date()).toString() + ".";
                messageType = "info";
                break;

            case TestRunner.COMPLETE_EVENT:
                message = Y.Lang.sub( "Testing completed at " +
                                      (new Date()).toString() + ".\n" +
                                      "Passed:{passed} Failed:{failed} " +
                                      "Total:{total} ({ignored} ignored)",
                    event.results );
                messageType = "info";
                break;

            case TestRunner.TEST_FAIL_EVENT:
                message = event.testName + ": failed.\n" + event.error.getMessage();
                messageType = "fail";
                break;

            case TestRunner.TEST_IGNORE_EVENT:
                message = event.testName + ": ignored.";
                messageType = "ignore";
                break;

            case TestRunner.TEST_PASS_EVENT:
                message = event.testName + ": passed.";
                messageType = "pass";
                break;

            case TestRunner.TEST_SUITE_BEGIN_EVENT:
                message = "Test suite \"" + event.testSuite.name + "\" started.";
                messageType = "info";
                break;

            case TestRunner.TEST_SUITE_COMPLETE_EVENT:
                message = Y.Lang.sub( "Test suite \"" +
                                      event.testSuite.name + "\" completed" + ".\n" +
                                      "Passed:{passed} Failed:{failed} " +
                                      "Total:{total} ({ignored} ignored)",
                    event.results );
                messageType = "info";
                break;

            case TestRunner.TEST_CASE_BEGIN_EVENT:
                message = "Test case \"" + event.testCase.name + "\" started.";
                messageType = "info";
                break;

            case TestRunner.TEST_CASE_COMPLETE_EVENT:
                message = Y.Lang.sub( "Test case \"" +
                                      event.testCase.name + "\" completed.\n" +
                                      "Passed:{passed} Failed:{failed} " +
                                      "Total:{total} ({ignored} ignored)",
                    event.results );
                messageType = "info";
                break;
            default:
                message = "Unexpected event " + event.type;
                message = "info";
        }

        messages.add( { message: message, messageType: messageType, event: event } );
    }

    //listen for events to publish to the logger
    TestRunner.attach( TestRunner.BEGIN_EVENT, logEvent );
    TestRunner.attach( TestRunner.COMPLETE_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_CASE_BEGIN_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_CASE_COMPLETE_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_SUITE_BEGIN_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_SUITE_COMPLETE_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_PASS_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_FAIL_EVENT, logEvent );
    TestRunner.attach( TestRunner.TEST_IGNORE_EVENT, logEvent );

}, '0.0.1', {
    requires: [
        'test',
        'lazy-model-list'
    ]
} );
