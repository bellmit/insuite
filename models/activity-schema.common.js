/**
 * User: rrrw
 * Date: 27/12/2012  15:45
 * (c) 2012, Doc Cirrus GmbH, Berlin
 */

//  common code runs on client, not using es6 features, not not forcing them in eslint
/*eslint prefer-template:0 */

/*global YUI, _ */


// NBB:  the file name and the schema name are linked by Mojito and must match!

YUI.add( 'activity-schema', function( Y, NAME ) {

        'use strict';

        /**
         * The DC case data schema definition
         *
         * @module activity-schema
         */

        var
            ramlConfig = {
                // REST API v2. parameters
                "2": {
                    description: "An activity in the Doc Cirrus data model, is an entry in the case file. For v.2. we only allow access to actType *SCHEIN (i.e. all types of 'contract')."
                }
            },

            // ------- Schema definitions  -------

            types = {},
            i18n = Y.doccirrus.i18n,
            unwrap = Y.doccirrus.commonutils.unwrap,
            peek = Y.doccirrus.commonutils.peek,
            stateMachines = {},
            transitionList = {},
            linkingRules = {},
            collapseByDefaultActTypes,
            actTypeDefns,
            INVOICENUM_TEXT = i18n( 'activity-schema.text.invoiceNoShort' ),
            RECEIPTNUM_TEXT = i18n( 'activity-schema.text.receiptNoShort' ),
            MEDICATION_PLAN_SOURCE = i18n('InCaseMojit.scanMedicationPlanModal_clientJS.label.SOURCE'),
            DIRTY_ENUM = 'DIRTY_IMPORT',
            FOREIGN_ENUM = 'EXT_IMPORT',
            Q,
            AMTSSCHEIN_TITLE = i18n( 'InCaseMojit.activity_schema.title.AMTSSCHEIN' ),
            momentLocal = Y.doccirrus.commonutils.getMoment(),
            utilsOphthalmology = null,
            medDataActType = Object.freeze({
                MEDDATA: 'MEDDATA',
                GRAVIDOGRAMMPROCESS: 'GRAVIDOGRAMMPROCESS',
                PERCENTILECURVE: 'PERCENTILECURVE',
                INGREDIENTPLAN: 'INGREDIENTPLAN'
            }),
            swissInsuranceDescription = Object.freeze( {
                10: 'SL',
                11:	'GGML',
                12:	'SLH',
                13:	'MiGeL',
                14:	'PE Ernährung',
                15:	'KLV',
                16:	'ALT',
                20:	'LPPV',
                30:	'Hors List',
                31:	'Medical Devices',
                32:	'HorsH',
                33:	'MiGeL ähnl',
                34:	'nicht Swissmedic',
                40:	'Parapharmazie',
                51:	'netCare',
                90:	'Keine Informationen',
                99:	'-'
            } ),
            medDataActTypes = [],
            scheinActTypes = ['SCHEIN', 'PKVSCHEIN', 'BGSCHEIN', 'AMTSSCHEIN'],
            invoiceCommunicationActTypes = [
                'RECEIPT',
                'CREDITNOTE',
                'REMINDER',
                'WARNING1',
                'WARNING2',
                'BADDEBT',
                'COMMUNICATION'
            ],
            readOnlyStates = [
                'IMPORTED',
                'APPROVED',
                'DELETED',
                'CANCELLED',
                'BILLED',
                'PAID',
                'BILLINGREJECTED',
                'ARCHIVED',
                'KBVBILLED',
                'KBVREJECTED',
                'SENT',
                'ACCEPTED',
                'REPLACED',
                'LOCKED',
                'INCOMPLETE',
                'ORDERED',
                'DISPENSED'
            ],
            phDosisTypes = Object.freeze( {
                SCHEDULE: 'SCHEDULE', // Strukturierte Dosierungf
                TEXT: 'TEXT', // Freie Dosierung,
                PAPER: 'PAPER'
            } ),
            eDmpActTypes = ['DM1', 'DM2', 'BK', 'KHK', 'ASTHMA', 'COPD'],
            eHksActTypes = ['EHKSD', 'EHKSND'],
            eHgvActTypes = ['HGV', 'HGVK'],
            eZervixZytologieActTypes = ['ZERVIX_ZYTOLOGIE'],
            eQDocuActTypes = ['QDOCU'],
            eDocActTypes = eDmpActTypes.concat( eHksActTypes, eHgvActTypes, eZervixZytologieActTypes, eQDocuActTypes ),
            ObjectAssign =  Y.doccirrus.commonutils.isClientSide() ? _.assign : Object.assign,
            CASE_FOLDER_TYPE_TO_COUNTRY_MAP = Object.create( null ),
            TARMED_CATALOGS_MAP = ['TARMED', 'TARMED_UVG_IVG_MVG'],
            ignoreAPK = [ 'INVOICE', 'RECEIPT', 'WARNING1', 'WARNING2', 'CREDITNOTE', 'REMINDER', 'INVOICEREFPVS', 'INVOICEREFGKV', 'INVOICEREF' ],
            actTypesWithScheinContext = ['INVOICE', 'TREATMENT', 'DOCLETTER', 'DIAGNOSIS' ],
            PRESCRIPTION_ACT_TYPES = ['PUBPRESCR', 'PRIVPRESCR', 'PRESCRBTM', 'PRESCRG', 'PRESCRT', 'PRESASSISTIVE'],
            QDocuFieldsRelated = {
                // year specific fields
                datumunt2020: ['pznvorhanden', 'plz3stellig', 'zytbefundvorunt', 'zytbefundvorunt01', 'zytbefundvoruntii', 'zytbefundvoruntiii', 'zytbefundvoruntiiid', 'zytbefundvoruntiv', 'zytbefundvoruntv', 'zytbefund', 'zytbefund01', 'zytbefundii', 'zytbefundiii', 'zytbefundiiid', 'zytbefundiv', 'metaplasievorgaenge', 'adenocarcinomainsitu', 'invasivplattenepithelkarz', 'invasivadenokarz', 'sonstmetaplasiebefunde', 'sonstbefunde', 'befundbiopskueret', 'sonstbefbiopskueret', 'massnahmen', 'therapieempfehlung', 'sonstopeingr2', 'endhistolbefundvorh', 'methoexzision', 'methokonisation'],
                datumunt2021: ['produkt', 'plz3stellig', 'zytbefundvorunt', 'zytbefundvorunt', 'zytbefundvorunt01', 'zytbefundvoruntii', 'zytbefundvoruntiii', 'zytbefundvoruntiiid', 'zytbefundvoruntiv', 'zytbefundvoruntv', 'zytbefund', 'zytbefund01', 'zytbefundii', 'zytbefundiii', 'zytbefundiiid', 'zytbefundiv', 'hpvvirustypvorbefund', 'histologvorbefundvorunt', 'sonstbefunde', 'karzinomtyp', 'karzinomtyp2', 'untersuchung', 'befundbiopskueret', 'massnahmen', 'therapieempfehlung', 'opeingriff', 'op', 'sonstopeingr2', 'endhistolbefundvorh', 'methoexzision', 'methokonisation', 'histobef'],
                // common fields
                module: ['graviditaet', 'klinischerbefund', 'zervixeinstellbar', 'zytbefund', 'hpvimpfung', 'methoabstrentnahme', 'pznvorhanden', 'hpvtest', 'hpvtergebnis', 'hpvtvoruntvorhand', 'hpvtvorbefund', 'zytbefundvorunt', 'kolposkbefund', 'normalbefund', 'weiterebefunde', 'massnahmen', 'befundbiopskueret', 'sonstmetaplasiebefunde', 'empfohlenemassnahmebiops', 'empfohlenekontrabkl', 'zeithorizontkontrabkl', 'therapieempfehlung', 'artopeingriff', 'endhistolbefundvorh','befundevoruntvorh', 'zytbefundvoruntvorh', 'artuanlunt', 'anamabweichvorunt', 'datumunt', 'herkunftimpfstatus', 'untersuchungsnummer', 'empfohlenemassnahme'],
                zytbefund: ['zytbefund01', 'zytbefundii', 'zytbefundiii', 'zytbefundiiid', 'zytbefundiv'],
                hpvimpfung: ['produkt'],
                methoabstrentnahme: ['produkt'],
                pznvorhanden: ['pzn', 'produkt'],
                hpvtest: ['hpvtergebnis'],
                hpvtergebnis: ['hpvvirustyp'],
                hpvvirustyp: ['welchhpvtyp'],
                hpvtvoruntvorhand: ['hpvtvorbefund'],
                hpvtvorbefund: ['hpvvirustypvorbefund'],
                zytbefundvorunt: ['zytbefundvorunt01', 'zytbefundvoruntiii', 'zytbefundvoruntiiid', 'zytbefundvoruntii', 'zytbefundvoruntiv', 'zytbefundvoruntv'],
                kolposkbefund: ['pzgsichtbar', 'tztyp', 'normalbefund'],
                normalbefund: ['gradabnbefunde', 'verdachtais', 'lokalabnbefunde', 'groesselaesion', 'verdachtinvasion', 'weiterebefunde'],
                weiterebefunde: ['kongenanomalie', 'kondylome', 'endometriose', 'ektoendopolypen', 'entzuendung', 'stenose', 'postopveraend', 'sonstweitbefunde'],
                massnahmen: ['anzahlbiopsien', 'befundbiopskueret'],
                befundbiopskueret: ['metaplasievorgaenge', 'adenocarcinomainsitu', 'invasivplattenepithelkarz', 'invasivadenokarz', 'sonstmetaplasiebefunde', 'karzinomtyp', 'sonstbefbiopskueret'],
                histologvorbefundvorunt: ['metaplasievorgaenge', 'adenocarcinomainsitu', 'invasivplattenepithelkarz', 'invasivadenokarz', 'sonstmetaplasiebefunde', 'sonstbefunde'],
                sonstmetaplasiebefunde: ['sonstbefbiopskueret', 'sonstbefunde'],
                empfohlenemassnahmebiops: ['empfohlenekontrabkl', 'therapieempfehlung'],
                empfohlenekontrabkl: ['zeithorizontkontrabkl'],
                zeithorizontkontrabkl: ['zeithorizont'],
                therapieempfehlung: ['sonstopeingr', 'weiteretherapieempf', 'opdatum', 'artopeingriff', 'endhistolbefundvorh', 'op', 'opeingriff'],
                artopeingriff: ['methokonisation', 'tiefekonus', 'methoexzision', 'umfangexzision', 'sonstopeingr2'],
                op: ['methokonisation', 'tiefekonus', 'methoexzision', 'umfangexzision', 'opdatum', 'histobef', 'opeingriff'],
                opeingriff: ['opdatum', 'histobef'],
                endhistolbefundvorh: ['grading', 'stagingfigo', 'tnmpt', 'tnmpn', 'tnmpm'],
                histobef: ['karzinomtyp2', 'sonstbef', 'grading', 'stagingfigo', 'tnmpt', 'tnmpn', 'tnmpm', 'residualstatus'],
                befundevoruntvorh: ['herkunftergebvoru', 'voruntdatum', 'zytbefundvoruntvorh', 'hpvtvoruntvorhand', 'histologvorbefundvorunt'],
                zytbefundvoruntvorh: ['zytbefundvorunt'],
                sonstweitbefunde: ['sonstbefunde'],
                herkunftimpfstatus: ['produkt'],
                artuanlunt: ['anamabweichvorunt', 'ausflusspathblutung', 'iup', 'hormonanwendungen', 'gynopradiatio', 'untersuchung'],
                anamabweichvorunt: ['ausflusspathblutung', 'iup', 'hormonanwendungen', 'gynopradiatio'],
                untersuchung: ['untersuchungsnummer']
            };

        Object.keys(medDataActType).forEach( function( key ){
            medDataActTypes.push( medDataActType[key] );
        } );

        ObjectAssign( CASE_FOLDER_TYPE_TO_COUNTRY_MAP, {
            ANY: Y.doccirrus.commonutils.getCountryModeFromConfigs()[0], //EXTMOJ-2222
            PRIVATE_CH_UVG: 'CH',
            PRIVATE_CH_IVG: 'CH',
            PRIVATE_CH_MVG: 'CH',
            PRIVATE_CH_VVG: 'CH',
            PRIVATE_CH: 'CH',
            PUBLIC: 'D',
            PRIVATE: 'D',
            PUBLIC_A: 'D',
            PRIVATE_A: 'D',
            SELFPAYER: 'D',
            BG: 'D',
            PREPARED: Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland() ? 'CH': 'D'
        });

        /**
         * generic activity class, on which all other activities are based on
         */
        function ActivitySchema() {
            this._id = null;
        }

        ActivitySchema.prototype = {};

        Object.defineProperty( ActivitySchema.prototype, ' id', {
            /**
             * @return {null|string} null, if the object has not been posted to the db, or does not come from the db.
             */
            get: function() {
                return this._id;
            }
        } );

        /**
         * override for custom properties
         * @return {null|object}
         */
        ActivitySchema.prototype.toObject = function() {
            return {
                actType: this.actType
            };
        };

        /**
         * A generic marker for the type of the activity.
         * @return {string}
         * @static
         */
        ActivitySchema.actType = function() {
            return "";
        };

        function createSchemaPhDosisTypeList() {
            var
                result = [];
            runOnStart();
            Object.keys( phDosisTypes ).forEach( function( type ) {
                result.push( {
                    val: phDosisTypes[type],
                    i18n: i18n( 'activity-schema.PhDosisType_E.' + phDosisTypes[type] + '.i18n' ),
                    '-en': i18n( 'activity-schema.PhDosisType_E.' + phDosisTypes[type] + '.i18n' ),
                    '-de': i18n( 'activity-schema.PhDosisType_E.' + phDosisTypes[type] + '.i18n' )
                } );
            } );

            return result;
        }

        //  The Q init was blocking me on the client, below is a temporary hack to get YUI initialization working
        //  well enough that it does not block page load - strix 16/01/2014

        if( (typeof(require) === 'function') || (typeof(require) === 'object') ) {
            // eslint-disable-next-line no-undef
            Q = require( 'q' );
        } else {
            //  we are running in the client and Q will need to be loaded some other way
            if( 'undefined' === typeof Q ) {
                Q = {};

                Q.defer = function warningAboutQ() {
                    Y.log( 'Q promise library is not loaded.', 'warn', NAME );
                };

                Q.defer();
            }
        }

        types = Y.mix( types, {
                "root": {
                    "base": {
                        "complex": "ext",
                        "type": "Activity_base_T",
                        "lib": types
                    }
                },
                "Activity_base_T": {
                    "base": {
                        "complex": "ext",
                        "type": "Activity_T",
                        "lib": types
                    },
                    "base_Catalog_T": {
                        "complex": "ext",
                        "type": "Catalog_T",
                        "lib": types
                    },
                    "base_Diagnosis_T": {
                        "complex": "ext",
                        "type": "Diagnosis_T",
                        "lib": types
                    },
                    "base_HasDiagnosis_T": {
                        "complex": "ext",
                        "type": "HasDiagnosis_T",
                        "lib": types
                    },
                    "base_KimBase_T": {
                        "complex": "ext",
                        "type": "KimBase_T",
                        "lib": types
                    },
                    "base_EDocLetter_T": {
                        "complex": "ext",
                        "type": "EDocLetter_T",
                        "lib": types
                    },
                    "base_HasUvGoaeType_T": {
                        "complex": "ext",
                        "type": "HasUvGoaeType_T",
                        "lib": types
                    },
                    "base_Price_T": {
                        "complex": "ext",
                        "type": "Price_T",
                        "lib": types
                    },
                    "base_Prescription_T": {
                        "complex": "ext",
                        "type": "Prescription_T",
                        "lib": types
                    },
                    "base_Invoice_T": {
                        "complex": "ext",
                        "type": "Invoice_T",
                        "lib": types
                    },
                    "base_Schein_T": {
                        "complex": "ext",
                        "type": "Schein_T",
                        "lib": types
                    },
                    "base_GKVSchein_T": {
                        "complex": "ext",
                        "type": "GKVSchein_T",
                        "lib": types
                    },
                    "base_PKVSchein_T": {
                        "complex": "ext",
                        "type": "PKVSchein_T",
                        "lib": types
                    },
                    "base_ScheinFlags_T": {
                        "complex": "ext",
                        "type": "ScheinFlags_T",
                        "lib": types
                    },
                    "base_HealthExaminationSurvey_T": {
                        "complex": "ext",
                        "type": "HealthExaminationSurvey_T",
                        "lib": types
                    },
                    "base_BGSchein_T": {
                        "complex": "ext",
                        "type": "BGSchein_T",
                        "lib": types
                    },
                    "base_AMTSSchein_T": {
                        "complex": "ext",
                        "type": "AMTSSchein_T",
                        "lib": types
                    },
                    "base_Medneo_T": {
                        "complex": "ext",
                        "type": "BillingTrackSchein_T",
                        "lib": types
                    },
                    "base_Treatment_T": {
                        "complex": "ext",
                        "type": "Treatment_T",
                        "lib": types
                    },
                    "base_FromPatient_T": {
                        "complex": "ext",
                        "type": "Measurement_T",
                        "lib": types
                    },
                    "base_Medication_T": {
                        "complex": "ext",
                        "type": "Medication_T",
                        "lib": types
                    },
                    "base_StockDispense_T": {
                        "complex": "ext",
                        "type": "StockDispense_T",
                        "lib": types
                    },
                    "base_Observation_T": {
                        "complex": "ext",
                        "type": "Observation_T",
                        "lib": types
                    },
                    "base_OphthalmologyTonometry_T": {
                        "complex": "ext",
                        "type": "OphthalmologyTonometry_T",
                        "lib": types
                    },
                    "base_OphthalmologyRefraction_T": {
                        "complex": "ext",
                        "type": "OphthalmologyRefraction_T",
                        "lib": types
                    },
                    "base_Utility_T": {
                        "complex": "ext",
                        "type": "Utility_T",
                        "lib": types
                    },
                    "base_KBVUtility_T": {
                        "complex": "ext",
                        "type": "KBVUtility_T",
                        "lib": types
                    },
                    "base_KBVUtility2Base_T": {
                        "complex": "ext",
                        "type": "KBVUtility2Base_T",
                        "lib": types
                    },
                    "base_KBVUtility2_T": {
                        "complex": "ext",
                        "type": "KBVUtility2_T",
                        "lib": types
                    },
                    "base_KBVUtility2Approval_T": {
                        "complex": "ext",
                        "type": "KBVUtility2Approval_T",
                        "lib": types
                    },
                    "base_Teleconsult_T": {
                        "complex": "ext",
                        "type": "Teleconsult_T",
                        "lib": types
                    },
                    "base_Labor_T": {
                        "complex": "ext",
                        "type": "Labor_T",
                        "lib": types
                    },
                    "base_LabRequest_T": {
                        "complex": "ext",
                        "type": "LabRequest_T",
                        "lib": types
                    },
                    "base_LabData_T": {
                        "complex": "ext",
                        "type": "LabData_T",
                        "lib": types
                    },
                    "base_Form_T": {
                        "complex": "ext",
                        "type": "Form_T",
                        "lib": types
                    },
                    "base_BaseETS_T": {
                        "complex": "ext",
                        "type": "BaseETS_T",
                        "lib": types
                    },
                    "base_Referral_T": {
                        "complex": "ext",
                        "type": "Referral_T",
                        "lib": types
                    },
                    "base_ETSReferral_T": {
                        "complex": "ext",
                        "type": "ETSReferral_T",
                        "lib": types
                    },
                    "base_AU_T": {
                        "complex": "ext",
                        "type": "AU_T",
                        "lib": types
                    },
                    "base_DM_T": {
                        "complex": "ext",
                        "type": "DM_T",
                        "lib": types
                    },
                    "base_DM1_T": {
                        "complex": "ext",
                        "type": "DM1_T",
                        "lib": types
                    },
                    "base_DM2_T": {
                        "complex": "ext",
                        "type": "DM2_T",
                        "lib": types
                    },
                    "base_BK_T": {
                        "complex": "ext",
                        "type": "BK_T",
                        "lib": types
                    },
                    "base_HGV_T": {
                        "complex": "ext",
                        "type": "HGV_T",
                        "lib": types
                    },
                    "base_ZERVIX_ZYTOLOGIE_T": {
                        "complex": "ext",
                        "type": "ZERVIX_ZYTOLOGIE_T",
                        "lib": types
                    },
                    "base_KHK_T": {
                        "complex": "ext",
                        "type": "KHK_T",
                        "lib": types
                    },
                    "base_ASTHMA_T": {
                        "complex": "ext",
                        "type": "ASTHMA_T",
                        "lib": types
                    },
                    "base_COPD_T": {
                        "complex": "ext",
                        "type": "COPD_T",
                        "lib": types
                    },
                    "DMP_BASE_T": {
                        "complex": "ext",
                        "type": "DMP_BASE_T",
                        "lib": types
                    },
                    "base_EHKS_ND_T": {
                        "complex": "ext",
                        "type": "EHKS_ND_T",
                        "lib": types
                    },
                    "base_EHKS_D_T": {
                        "complex": "ext",
                        "type": "EHKS_D_T",
                        "lib": types
                    },
                    "base_EHKS_BASE_T": {
                        "complex": "ext",
                        "type": "EHKS_BASE_T",
                        "lib": types
                    },
                    "base_EDOC_BASE_T": {
                        "complex": "ext",
                        "type": "EDOC_BASE_T",
                        "lib": types
                    },
                    "base_Assistive_T": {
                        "complex": "ext",
                        "type": "Assistive_T",
                        "lib": types
                    },
                    "base_Finding_T": {
                        "complex": "ext",
                        "type": "Finding_T",
                        "lib": types
                    },
                    "base_LabRequestReferral_T": {
                        "complex": "ext",
                        "type": "LabRequestReferral_T",
                        "lib": types
                    },
                    "base_Receipt_T": {
                        "complex": "ext",
                        "type": "Receipt_T",
                        "lib": types
                    },
                    "base_Measurement_T": {
                        "complex": "ext",
                        "type": "Measurement_T",
                        "lib": types
                    },
                    "base_Cave_T": {
                        "complex": "ext",
                        "type": "Cave_T",
                        "lib": types
                    },
                    "base_Surgery_T": {
                        "complex": "ext",
                        "type": "Surgery_T",
                        "lib": types
                    },
                    "base_Gravidogramm_T": {
                        "complex": "ext",
                        "type": "Gravidogramm_T",
                        "lib": types
                    },
                    "base_IngredientPlan_T": {
                        "complex": "ext",
                        "type": "IngredientPlan_T",
                        "lib": types
                    },
                    "base_MedData_T": {
                        "complex": "ext",
                        "type": "MedData_T",
                        "lib": types
                    },
                    "base_InvoiceRefPVS_T": {
                        "complex": "ext",
                        "type": "InvoiceRefPVS_T",
                        "lib": types
                    },
                    "base_InvoiceRefGKV_T": {
                        "complex": "ext",
                        "type": "InvoiceRefGKV_T",
                        "lib": types
                    },
                    "base_InvoiceRef_T": {
                        "complex": "ext",
                        "type": "InvoiceRef_T",
                        "lib": types
                    },
                    "base_QDOCU_T": {
                        "complex": "ext",
                        "type": "QDOCU_T",
                        "lib": types
                    },
                    "base_PutOnHold_T": {
                        "complex": "ext",
                        "type": "PutOnHold_T",
                        "lib": types
                    }
                },
                "Activity_E": {
                    "type": "String",
                    "required": true,
                    "list": [
                        {
                            "group": "CASEHISTORY",
                            "functionality": "sd1",
                            "val": "HISTORY",
                            "-de": "Anamnese",
                            i18n: i18n( 'activity-schema.Activity_E.HISTORY' ),
                            "-en": "History"
                        },
                        {
                            "group": "CASEHISTORY",
                            "functionality": "sd1",
                            "val": "EXTERNAL",
                            "-de": "Extern",
                            i18n: i18n( 'activity-schema.Activity_E.EXTERNAL' ),
                            "-en": "External"
                        },
                        {
                            "group": "CASEHISTORY",
                            "functionality": "sd1",
                            "val": "FROMPATIENT",
                            "-de": "Patientenformular",
                            i18n: i18n( 'activity-schema.Activity_E.FROMPATIENT' ),
                            "-en": "Patient Form"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "FROMPATIENTMEDIA",
                            "-de": "Patientendatei",
                            i18n: i18n( 'activity-schema.Activity_E.FROMPATIENTMEDIA' ),
                            "-en": "Patient data file"
                        },
                        {
                            "group": "ASSESSMENT",
                            "functionality": "sd1",
                            "val": "FINDING",
                            "-de": "Befund",
                            i18n: i18n( 'activity-schema.Activity_E.FINDING' ),
                            "-en": "Finding"
                        },
                        {
                            "group": "ASSESSMENT",
                            "functionality": "sd3",
                            "val": "DIAGNOSIS",
                            "-de": "Diagnose",
                            i18n: i18n( 'activity-schema.Activity_E.DIAGNOSIS' ),
                            "-en": "Diagnosis"
                        },
                        {
                            "group": "ASSESSMENT",
                            "functionality": "sd6",
                            "val": "OBSERVATION",
                            "-de": "Beobachtung",
                            i18n: i18n( 'activity-schema.Activity_E.OBSERVATION' ),
                            "-en": "Observation"
                        },
                        {
                            "group": "ASSESSMENT",
                            "functionality": "sd1",
                            "val": "MEASUREMENT",
                            "-de": "Messung",
                            i18n: i18n( 'activity-schema.Activity_E.MEASUREMENT' ),
                            "-en": "Measurement"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd4",
                            "val": "TREATMENT",
                            "-de": "Leistung",
                            i18n: i18n( 'activity-schema.Activity_E.TREATMENT' ),
                            "-en": "Treatment"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd1",
                            "val": "PREVENTION",
                            "-de": "Prävention",
                            i18n: i18n( 'activity-schema.Activity_E.PREVENTION' ),
                            "-en": "Prevention"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd2",
                            "val": "MEDICATION",
                            "-de": "Medikament",
                            i18n: i18n( 'activity-schema.Activity_E.MEDICATION' ),
                            "-en": "Medication"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd17",
                            "val": "ASSISTIVE",
                            "-de": "Hilfsmittel",
                            i18n: i18n( 'activity-schema.Activity_E.ASSISTIVE' ),
                            "-en": "Assistive"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd11",
                            "val": "UTILITY",
                            "deprecated": true,
                            "-de": "Heilmittel",
                            i18n: i18n( 'activity-schema.Activity_E.UTILITY' ),
                            "-en": "Utility"
                        },
                        {
                            "nameGroup": "KBVUTILITY2",
                            "group": "THERAPY",
                            "functionality": "sd11",
                            "val": "KBVUTILITY",
                            "-de": "Heilmittel",
                            i18n: i18n( 'activity-schema.Activity_E.KBVUTILITY' ),
                            "-en": "KBV Utility",
                            "searchWith": ["UTILITY", "KBVUTILITY2"]
                        },
                        {
                            "nameGroup": "KBVUTILITY2",
                            "group": "THERAPY",
                            "functionality": "sd11",
                            "val": "KBVUTILITY2",
                            "-de": "Heilmittel",
                            i18n: i18n( 'activity-schema.Activity_E.KBVUTILITY2' ),
                            "-en": "KBV Utility",
                            "searchWith": ["UTILITY", "KBVUTILITY"]
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd11",
                            "val": "KBVUTILITY2APPROVAL",
                            "-de": "HM Genehmigung",
                            i18n: i18n( 'activity-schema.Activity_E.KBVUTILITY2APPROVAL' ),
                            "-en": "HM Approval"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd1",
                            "val": "PROCEDERE",
                            "-de": "Procedere",
                            i18n: i18n( 'activity-schema.Activity_E.PROCEDERE' ),
                            "-en": "Procedure"
                        },
                        {
                            "group": "THERAPY",
                            "functionality": "sd1",
                            "val": "THERAPY",
                            "-de": "Therapie",
                            i18n: i18n( 'activity-schema.Activity_E.THERAPY' ),
                            "-en": "Therapy"
                        },

                        {
                            "group": "PROCESSES",
                            "functionality": "sd5",
                            "val": "SCHEIN",
                            "-de": "Schein",
                            i18n: i18n( 'activity-schema.Activity_E.SCHEIN' ),
                            "-en": "Schein Received"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd9",
                            "val": "PKVSCHEIN",
                            "-de": "Privat Schein",
                            "-de-ch": "Fall",
                            i18n: i18n( 'activity-schema.Activity_E.PKVSCHEIN' ),
                            "-en": "Private schein Received"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd9",
                            "val": "AMTSSCHEIN",
                            "-de": "AMTS Schein",
                            "-de-ch": "Fall",
                            i18n: i18n( 'activity-schema.Activity_E.AMTSSCHEIN' ),
                            "-en": "AMTS schein Received"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd10",
                            "val": "BGSCHEIN",
                            "-de": "BG Schein",
                            i18n: i18n( 'activity-schema.Activity_E.BGSCHEIN' ),
                            "-en": "BG schein Received"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PRIVPRESCR",
                            "-de": "Privatrezept",
                            i18n: i18n( 'activity-schema.Activity_E.PRIVPRESCR' ),
                            "-en": "Prescription"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PUBPRESCR",
                            "-de": "Kassenrezept",
                            i18n: i18n( 'activity-schema.Activity_E.PUBPRESCR' ),
                            "-en": "Public Prescription"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "LONGPRESCR",
                            "-de": "Dauerrezept",
                            i18n:  i18n( 'activity-schema.Activity_E.LONGPRESCR' ),
                            "-en": "Long prescription",
                            "-de-ch": "Dauerrezept"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PRESASSISTIVE",
                            "-de": "Rezept H",
                            i18n: i18n( 'activity-schema.Activity_E.PRESASSISTIVE' ),
                            "-en": "Prescription H"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PRESCRBTM",
                            "-de": "Rezept BTM",
                            i18n: i18n( 'activity-schema.Activity_E.PRESCRBTM' ),
                            "-en": "BTM Prescription"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "REMINDER",
                            "-de": "Erinnerung",
                            "-de-ch": "1. Mahnung",
                            i18n: i18n( 'activity-schema.Activity_E.REMINDER' ),
                            "-en": "Reminder"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "CREDITNOTE",
                            "-de": "Gutschrift",
                            i18n: i18n( 'activity-schema.Activity_E.CREDITNOTE' ),
                            "-en": "Credit note"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "BADDEBT",
                            "-de": "Ausbuchen",
                            i18n: i18n( 'activity-schema.Activity_E.BADDEBT' ),
                            "-en": "Bad debt"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "WARNING1",
                            "-de": "Mahnung 1",
                            "-de-ch": "2. Mahnung",
                            i18n: i18n( 'activity-schema.Activity_E.WARNING1' ),
                            "-en": "Warning 1"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "WARNING2",
                            "-de": "Mahnung 2",
                            "-de-ch": "3. Mahnung",
                            i18n: i18n( 'activity-schema.Activity_E.WARNING2' ),
                            "-en": "Warning 2"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PRESCRG",
                            "-de": "Rezept G",
                            i18n: i18n( 'activity-schema.Activity_E.PRESCRG' ),
                            "-en": "G Prescription"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PRESCRT",
                            "-de": "Rezept T",
                            i18n: i18n( 'activity-schema.Activity_E.PRESCRT' ),
                            "-en": "T Prescription"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd14",
                            "val": "REFERRAL",
                            "-de": "Überweisung",
                            i18n: i18n( 'activity-schema.Activity_E.REFERRAL' ),
                            "-en": "Referral"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "DOCLETTER",
                            "-de": "Arztbrief",
                            i18n: i18n( 'activity-schema.Activity_E.DOCLETTER' ),
                            "-en": "Doctors' letter"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "INVOICE",
                            "-de": "Rechnung",
                            i18n: i18n( 'activity-schema.Activity_E.INVOICE' ),
                            "-en": "Invoice"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "QUOTATION",
                            "-de": "Kostenplan",
                            i18n: i18n( 'activity-schema.Activity_E.QUOTATION' ),
                            "-en": "Cost estimate"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PUBRECEIPT",
                            "-de": "Patientenquittung",
                            i18n: i18n( 'activity-schema.Activity_E.PUBRECEIPT' ),
                            "-en": "KBV Receipt"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "RECEIPT",
                            "-de": "Quittung",
                            i18n: i18n( 'activity-schema.Activity_E.RECEIPT' ),
                            "-en": "Receipt"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "COMMUNICATION",
                            "-de": "Kommunikation",
                            i18n: i18n( 'activity-schema.Activity_E.COMMUNICATION' ),
                            "-en": "Communication"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "PROCESS",
                            "-de": "Vorgang",
                            i18n: i18n( 'activity-schema.Activity_E.PROCESS' ),
                            "-en": "Other Process"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "FORM",
                            "-de": "Formular",
                            i18n: i18n( 'activity-schema.Activity_E.FORM' ),
                            "-en": "Form"
                        },
                        {
                            "group": "OPHTHALMOLOGY",
                            "functionality": "sd_ophthalmology_tonometry",
                            "val": "OPHTHALMOLOGY_TONOMETRY",
                            "-de": "Tonometrie",
                            i18n: i18n( 'activity-schema.Activity_E.OPHTHALMOLOGY_TONOMETRY' ),
                            "-en": "Tonometry"
                        },
                        {
                            "group": "OPHTHALMOLOGY",
                            "functionality": "sd_ophthalmology_refraction",
                            "val": "OPHTHALMOLOGY_REFRACTION",
                            "-de": "Refraktion",
                            i18n: i18n( 'activity-schema.Activity_E.OPHTHALMOLOGY_REFRACTION' ),
                            "-en": "Refraction"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd12",
                            "val": "TELECONSULT",
                            "-de": "Telekonsil",
                            i18n: i18n( 'activity-schema.Activity_E.TELECONSULT' ),
                            "-en": "Teleconsult"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "CONTACT",
                            "-de": "Kontakt",
                            i18n: i18n( 'activity-schema.Activity_E.CONTACT' ),
                            "-en": "Contact"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd13",
                            "val": "LABREQUEST",
                            "-de": "Laborschein",
                            i18n: i18n( 'activity-schema.Activity_E.LABREQUEST' ),
                            "-en": "Lab request"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd16",
                            "val": "LABDATA",
                            "-de": "Labordaten",
                            i18n: i18n( 'activity-schema.Activity_E.LABDATA' ),
                            "-en": "Labdata"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd15",
                            "val": "AU",
                            "-de": "AU",
                            "-de-ch": "AUF",
                            i18n: i18n( 'activity-schema.Activity_E.AU' ),
                            "-en": "AU"
                        },
                        {
                            "group": "PROCESSES",
                            "val": "EHKSND",
                            "-de": i18n( 'activity-schema.Activity_E.EHKSND' ),
                            i18n: i18n( 'activity-schema.Activity_E.EHKSND' ),
                            "-en": i18n( 'activity-schema.Activity_E.EHKSND' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "EHKSD",
                            "-de": i18n( 'activity-schema.Activity_E.EHKSD' ),
                            i18n: i18n( 'activity-schema.Activity_E.EHKSD' ),
                            "-en": i18n( 'activity-schema.Activity_E.EHKSD' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "DM1",
                            "-de": i18n( 'activity-schema.Activity_E.DM1' ),
                            i18n: i18n( 'activity-schema.Activity_E.DM1' ),
                            "-en": i18n( 'activity-schema.Activity_E.DM1' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "DM2",
                            "-de": i18n( 'activity-schema.Activity_E.DM2' ),
                            i18n: i18n( 'activity-schema.Activity_E.DM2' ),
                            "-en": i18n( 'activity-schema.Activity_E.DM2' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "BK",
                            "-de": i18n( 'activity-schema.Activity_E.BK' ),
                            i18n: i18n( 'activity-schema.Activity_E.BK' ),
                            "-en": i18n( 'activity-schema.Activity_E.BK' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "HGV",
                            "-de": i18n( 'activity-schema.Activity_E.HGV' ),
                            i18n: i18n( 'activity-schema.Activity_E.HGV' ),
                            "-en": i18n( 'activity-schema.Activity_E.HGV' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "HGVK",
                            "-de": i18n( 'activity-schema.Activity_E.HGVK' ),
                            i18n: i18n( 'activity-schema.Activity_E.HGVK' ),
                            "-en": i18n( 'activity-schema.Activity_E.HGVK' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "ZERVIX_ZYTOLOGIE",
                            "-de": i18n( 'activity-schema.Activity_E.ZERVIX_ZYTOLOGIE' ),
                            i18n: i18n( 'activity-schema.Activity_E.ZERVIX_ZYTOLOGIE' ),
                            "-en": i18n( 'activity-schema.Activity_E.ZERVIX_ZYTOLOGIE' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "KHK",
                            "-de": i18n( 'activity-schema.Activity_E.KHK' ),
                            i18n: i18n( 'activity-schema.Activity_E.KHK' ),
                            "-en": i18n( 'activity-schema.Activity_E.KHK' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "ASTHMA",
                            "-de": i18n( 'activity-schema.Activity_E.ASTHMA' ),
                            i18n: i18n( 'activity-schema.Activity_E.ASTHMA' ),
                            "-en": i18n( 'activity-schema.Activity_E.ASTHMA' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "COPD",
                            "-de": i18n( 'activity-schema.Activity_E.COPD' ),
                            i18n: i18n( 'activity-schema.Activity_E.COPD' ),
                            "-en": i18n( 'activity-schema.Activity_E.COPD' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "CAVE",
                            "functionality": "sd1",
                            "-de": i18n( 'activity-schema.Activity_E.CAVE' ),
                            i18n: i18n( 'activity-schema.Activity_E.CAVE' ),
                            "-en": i18n( 'activity-schema.Activity_E.CAVE' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "MEDICATIONPLAN",
                            "functionality": "sd18",
                            "-de": i18n( 'activity-schema.Activity_E.MEDICATIONPLAN' ),
                            i18n: i18n( 'activity-schema.Activity_E.MEDICATIONPLAN' ),
                            "-en": i18n( 'activity-schema.Activity_E.MEDICATIONPLAN' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "KBVMEDICATIONPLAN",
                            "functionality": "sd18",
                            "-de": i18n( 'activity-schema.Activity_E.MEDICATIONPLAN' ),
                            i18n: i18n( 'activity-schema.Activity_E.MEDICATIONPLAN' ),
                            "-en": i18n( 'activity-schema.Activity_E.MEDICATIONPLAN' )
                        },
                        {
                            "group": "PROCESSES",
                            "val": "QDOCU",
                            "functionality": "sd13",
                            "-de": i18n( 'activity-schema.Activity_E.QDOCU' ),
                            i18n: i18n( 'activity-schema.Activity_E.QDOCU' ),
                            "-en": i18n( 'activity-schema.Activity_E.QDOCU' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd13",
                            "val": "HEALTHSURVEY",
                            "-de": i18n( 'activity-schema.Activity_E.HEALTHSURVEY' ),
                            i18n: i18n( 'activity-schema.Activity_E.HEALTHSURVEY' ),
                            "-en": i18n( 'activity-schema.Activity_E.HEALTHSURVEY' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "SURGERY",
                            "-de": "OP",
                            i18n: i18n( 'activity-schema.Activity_E.SURGERY' ),
                            "-en": "Surgery"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "GRAVIDOGRAMM",
                            "-de": "Gravidogramm",
                            i18n: i18n( 'activity-schema.Activity_E.GRAVIDOGRAMM' ),
                            "-en": "Gravidogramm"
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd18",
                            "val": "MEDDATA",
                            "-de": i18n( 'activity-schema.Activity_E.MEDDATA' ),
                            i18n: i18n( 'activity-schema.Activity_E.MEDDATA' ),
                            "-en": i18n( 'activity-schema.Activity_E.MEDDATA' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd18",
                            "val": "INGREDIENTPLAN",
                            "-de": i18n( 'activity-schema.Activity_E.INGREDIENTPLAN' ),
                            i18n: i18n( 'activity-schema.Activity_E.INGREDIENTPLAN' ),
                            "-en": i18n( 'activity-schema.Activity_E.INGREDIENTPLAN' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd18",
                            "val": "GRAVIDOGRAMMPROCESS",
                            "-de": i18n( 'activity-schema.Activity_E.GRAVIDOGRAMMPROCESS' ),
                            i18n: i18n( 'activity-schema.Activity_E.GRAVIDOGRAMMPROCESS' ),
                            "-en": i18n( 'activity-schema.Activity_E.GRAVIDOGRAMMPROCESS' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "CHECKUPPLAN",
                            "-de": i18n( 'activity-schema.Activity_E.CHECKUPPLAN' ),
                            i18n: i18n( 'activity-schema.Activity_E.CHECKUPPLAN' ),
                            "-en": i18n( 'activity-schema.Activity_E.CHECKUPPLAN' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd18",
                            "val": "PERCENTILECURVE",
                            "-de": i18n( 'activity-schema.Activity_E.PERCENTILECURVE' ),
                            i18n: i18n( 'activity-schema.Activity_E.PERCENTILECURVE' ),
                            "-en": i18n( 'activity-schema.Activity_E.PERCENTILECURVE' )
                        },
                        {
                            "group": "ASSESSMENT",
                            "functionality": "sd1",
                            "val": "DOCLETTERDIAGNOSIS",
                            "-de": i18n( 'activity-schema.Activity_E.DOCLETTERDIAGNOSIS' ),
                            i18n: i18n( 'activity-schema.Activity_E.DOCLETTERDIAGNOSIS' ),
                            "-en": i18n( 'activity-schema.Activity_E.DOCLETTERDIAGNOSIS' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "INVOICEREFPVS",
                            "-de": i18n( 'activity-schema.Activity_E.INVOICEREFPVS' ),
                            i18n: i18n( 'activity-schema.Activity_E.INVOICEREFPVS' ),
                            "-en": i18n( 'activity-schema.Activity_E.INVOICEREFPVS' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "INVOICEREFGKV",
                            "-de": i18n( 'activity-schema.Activity_E.INVOICEREFGKV' ),
                            i18n: i18n( 'activity-schema.Activity_E.INVOICEREFGKV' ),
                            "-en": i18n( 'activity-schema.Activity_E.INVOICEREFGKV' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "INVOICEREF",
                            "-de": i18n( 'activity-schema.Activity_E.INVOICEREF' ),
                            i18n: i18n( 'activity-schema.Activity_E.INVOICEREF' ),
                            "-en": i18n( 'activity-schema.Activity_E.INVOICEREF' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "THERAPYSTEP",
                            "-de": i18n( 'activity-schema.Activity_E.THERAPYSTEP' ),
                            i18n: i18n( 'activity-schema.Activity_E.THERAPYSTEP' ),
                            "-en": i18n( 'activity-schema.Activity_E.THERAPYSTEP' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "STOCKDISPENSE",
                            "-de": i18n( 'activity-schema.Activity_E.STOCKDISPENSE' ),
                            i18n: i18n( 'activity-schema.Activity_E.STOCKDISPENSE' ),
                            "-en": i18n( 'activity-schema.Activity_E.STOCKDISPENSE' )
                        },
                        {
                            "group": "PROCESSES",
                            "functionality": "sd1",
                            "val": "VACCINATION",
                            "-de": i18n( 'activity-schema.Activity_E.VACCINATION' ),
                            i18n: i18n( 'activity-schema.Activity_E.VACCINATION' ),
                            "-en": i18n( 'activity-schema.Activity_E.VACCINATION' )
                        }

                    ].filter( function( val ) {
                        return val && !val.deprecated;
                    } ),
                    i18n: i18n( 'activity-schema.Activity_E.i18n' ),
                    "-en": "Activity Type",
                    "-de": "Aktivitätstyp"
                },
                "ActStatus_E": {
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.Activity_T.status.i18n' )
                    },
                    "type": "String",
                    "default": "CREATED",
                    "list": [
                        /*  NB!! reflect changes here to FSM NB!! */
                        {
                            "val": "CREATED",
                            i18n: i18n( 'activity-schema.ActStatus_E.CREATED' ),
                            "-en": "Created",
                            "-de": "Geändert"
                        },
                        {
                            "val": "DISPATCHED",
                            i18n: i18n( 'activity-schema.ActStatus_E.DISPATCHED' ),
                            "-en": "Draft",
                            "-de": "Entwurf"
                        },
                        {
                            "val": "DELETED",
                            i18n: i18n( 'activity-schema.ActStatus_E.DELETED' ),
                            "-en": "Deleted",
                            "-de": "Gelöscht"
                        },
                        {
                            "val": "CANCELLED",
                            i18n: i18n( 'activity-schema.ActStatus_E.CANCELLED' ),
                            "-en": "Cancelled",
                            "-de": "Storniert"
                        },
                        {
                            "val": "VALID",
                            i18n: i18n( 'activity-schema.ActStatus_E.VALID' ),
                            "-en": "Valid",
                            "-de": "Validiert"
                        },
                        {
                            "val": "INVALID",
                            i18n: i18n( 'activity-schema.ActStatus_E.INVALID' ),
                            "-en": "Invalid",
                            "-de": "Fehlerhaft"
                        },
                        {
                            "val": "IMPORTED",
                            i18n: i18n( 'activity-schema.ActStatus_E.IMPORTED' ),
                            "-en": "Imported",
                            "-de": "Importiert"
                        },
                        {
                            "val": "APPROVED",
                            i18n: i18n( 'activity-schema.ActStatus_E.APPROVED' ),
                            "-en": "Approved",
                            "-de": "Freigegeben"
                        },
                        {
                            "val": "ENCRYPTED",
                            i18n: i18n( 'activity-schema.ActStatus_E.ENCRYPTED' ),
                            "-en": "Encrypted",
                            "-de": "Verschlüsselt"
                        },
                        {
                            "val": "CRYPT_ERR",
                            i18n: i18n( 'activity-schema.ActStatus_E.CRYPT_ERR' ),
                            "-en": "Encrypt error",
                            "-de": "Verschl. Fehler"
                        },
                        {
                            "val": "KBVBILLED",
                            i18n: i18n( 'activity-schema.ActStatus_E.KBVBILLED' ),
                            "-en": "Billed (KBV)",
                            "-de": "Abgerechnet (KBV)"
                        },
                        {
                            "val": "KBVERROR",
                            i18n: i18n( 'activity-schema.ActStatus_E.KBVERROR' ),
                            "-en": "Send error",
                            "-de": "Abrechnungsfehler"
                        },
                        {
                            "val": "KBVREJECTED",
                            i18n: i18n( 'activity-schema.ActStatus_E.KBVREJECTED' ),
                            "-en": "Rejected",
                            "-de": "Rechnungsfehler"
                        },
                        {
                            "val": "MEDIDATAREJECTED",
                            i18n: i18n( 'activity-schema.ActStatus_E.MEDIDATAREJECTED' ),
                            "-en": "Medidata rejected",
                            "-de": "Medidata abgelehnte"
                        },
                        {
                            "val": "MEDIDATAFIXED",
                            i18n: i18n( 'activity-schema.ActStatus_E.CREATED' ),
                            "-en": "Geändert",
                            "-de": "Geändert"
                        },
                        {
                            "val": "BILLED",
                            i18n: i18n( 'activity-schema.ActStatus_E.BILLED' ),
                            "-en": "Billed",
                            "-de": "Abgerechnet"
                        },
                        {
                            "val": "CREDITED",
                            i18n: i18n( 'activity-schema.ActStatus_E.CREDITED' ),
                            "-en": "Credited",
                            "-de": "Gutgeschrieben"
                        },
                        {
                            "val": "BILLINGREJECTED",
                            i18n: i18n( 'activity-schema.ActStatus_E.BILLINGREJECTED' ),
                            "-en": "Rejected",
                            "-de": "Rechnungsfehler"
                        },
                        {
                            "val": "PARTIALPAYMENT",
                            i18n: i18n( 'activity-schema.ActStatus_E.PARTIALPAYMENT' ),
                            "-en": "Partially paid",
                            "-de": "Teilzahlung"
                        },
                        {
                            "val": "PAID",
                            i18n: i18n( 'activity-schema.ActStatus_E.PAID' ),
                            "-en": "Paid",
                            "-de": "Bezahlt"
                        },
                        {
                            "val": "EDITING",
                            i18n: i18n( 'activity-schema.ActStatus_E.EDITING' ),
                            "-en": "Editing",
                            "-de": "In Arbeit"
                        },
                        {
                            "val": "ARCHIVED",
                            i18n: i18n( 'activity-schema.ActStatus_E.ARCHIVED' ),
                            "-en": "Archived",
                            "-de": "Archiviert"
                        },
                        {
                            "val": "CHECKED",
                            i18n: i18n( 'activity-schema.ActStatus_E.CHECKED' ),
                            "-en": "Checked",
                            "-de": "Geprüft"
                        },
                        {
                            "val": DIRTY_ENUM,
                            i18n: i18n( 'activity-schema.ActStatus_E.DIRTY_IMPORT' ),
                            "-en": "Imported",
                            "-de": "Importiert"
                        },
                        {
                            "val": FOREIGN_ENUM,
                            i18n: i18n( 'activity-schema.ActStatus_E.EXT_IMPORT' ),
                            "-en": "Imported",
                            "-de": "Importiert"
                        },
                        {
                            "val": "REMINDED",
                            i18n: i18n( 'activity-schema.ActStatus_E.REMINDED' ),
                            "-en": "Reminded",
                            "-de": "Erinnert"
                        },
                        {
                            "val": "WARN1",
                            i18n: i18n( 'activity-schema.ActStatus_E.WARN1' ),
                            "-en": "Warned I",
                            "-de": "Gemahnt I"
                        },
                        {
                            "val": "WARN2",
                            i18n: i18n( 'activity-schema.ActStatus_E.WARN2' ),
                            "-en": "Warned II",
                            "-de": "Gemahnt II"
                        },
                        {
                            "val": "DERECOGNIZED",
                            i18n: i18n( 'activity-schema.ActStatus_E.DERECOGNIZED' ),
                            "-en": "Derecognized",
                            "-de": "Ausgebucht"
                        },
                        {
                            "val": "DEBTCOLLECT",
                            i18n: i18n( 'activity-schema.ActStatus_E.DEBTCOLLECT' ),
                            "-en": "Debtcollected",
                            "-de": "Inkasso"
                        },
                        {
                            "val": "SENT",
                            i18n: i18n( 'activity-schema.ActStatus_E.SENT' ),
                            "-en": "Sent",
                            "-de": "Versendet"
                        },
                        {
                            "val": "ACCEPTED",
                            i18n: i18n( 'activity-schema.ActStatus_E.ACCEPTED' ),
                            "-en": "Accepted",
                            "-de": "Akzeptiert"
                        },
                        {
                            "val": "REPLACED",
                            i18n: i18n( 'activity-schema.ActStatus_E.REPLACED' ),
                            "-en": "Replaced",
                            "-de": "Ersetzt"
                        },
                        {
                            "val": "LOCKED",
                            i18n: i18n( 'activity-schema.ActStatus_E.LOCKED' ),
                            "-en": "Locked",
                            "-de": "Verschlossen"
                        },
                        {
                            "val": "INCOMPLETE",
                            i18n: i18n( 'activity-schema.ActStatus_E.INCOMPLETE' ),
                            "-en": "Incomplete",
                            "-de": "Ungültig"
                        },
                        {
                            "val": "PREPARED",
                            i18n: i18n( 'activity-schema.ActStatus_E.PREPARED' ),
                            "-en": "Prepared",
                            "-de": "Vorbereitet"
                        },
                        {
                            "val": "ORDERED",
                            i18n:  i18n( 'activity-schema.ActStatus_E.ORDERED' ),
                            "-en": "Ordered",
                            "-de": "Bestellt"
                        },
                        {
                            "val": "DISPENSED",
                            i18n: i18n( 'activity-schema.ActStatus_E.DISPENSED' ),
                            "-en": 'Dispenes',
                            "-de": 'Abgabe'
                        },
                        {
                            "val": "ONHOLD",
                            i18n: i18n( 'activity-schema.ActStatus_E.ONHOLD' ),
                            "-en": 'On Hold',
                            "-de": 'Abgeschlossen'
                        },
                        {
                            "val": "REVOKEWARN",
                            i18n: i18n( 'activity-schema.ActStatus_E.REVOKEWARN' ),
                            "-en": 'Revoke warning',
                            "-de": 'Mahnstopp'
                        }
                    ]
                },
                "KimBase_T": {
                    "kimState": {
                        "complex": "eq",
                        "type": "KimState_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.KimBase_T.kimState.i18n' ),
                        "-en": "KIM Status",
                        "-de": "KIM Status"
                    },
                    "kimSignedBy": {
                        complex: "inc",
                        i18n: i18n( 'activity-schema.KimBase_T.kimSignedBy.i18n' ),
                        type: "KimSignedBy_T",
                        lib: types
                    }
                },
                "EDocLetter_T": {
                    "xmlSetId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.EDocLetter_T.xmlSetId.i18n' ),
                        "-en": "Set ID",
                        "-de": "Set-ID "
                    },
                    "flatFeeTreatmentId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.EDocLetter_T.flatFeeTreatmentId.i18n' ),
                        "-en": "Flat fee",
                        "-de": "Kostenpauschale "
                    }
                },
                "KimSignedBy_T": {
                    timestamp: {
                        type: 'Date',
                        i18n: i18n( 'activity-schema.KimSignedBy_T.timestamp.i18n' )
                    },
                    name: {
                        type: 'String',
                        i18n: i18n( 'activity-schema.KimSignedBy_T.employeeId.i18n' )
                    },
                    employeeId: {
                        type: 'String',
                        i18n: i18n( 'activity-schema.KimSignedBy_T.employeeId.i18n' )
                    }
                },
                "KimState_E": {
                    "type": "String",
                    "default": "NOT_SIGNED",
                    "list": [
                        {
                            "val": "SIGNED",
                            i18n: i18n( 'activity-schema.KimState_E.SIGNED' ),
                            "-en": "Signed",
                            "-de": "Signiert"
                        },
                        {
                            "val": "NOT_SIGNED",
                            i18n: i18n( 'activity-schema.KimState_E.NOT_SIGNED' ),
                            "-en": "Not signed",
                            "-de": "Nicht signiert"
                        },
                        {
                            "val": "SEND",
                            i18n: i18n( 'activity-schema.KimState_E.SEND' ),
                            "-en": "Sent",
                            "-de": "Gesendet"
                        },
                        {
                            "val": "NOT_SEND",
                            i18n: i18n( 'activity-schema.KimState_E.NOT_SEND' ),
                            "-en": "Not sent",
                            "-de": "Nicht gesendet"
                        },
                        {
                            "val": "RECEIVED",
                            i18n: i18n( 'activity-schema.KimState_E.RECEIVED' ),
                            "-en": "Received",
                            "-de": "Empfangen"
                        },
                        {
                            "val": "RECEIVED_AND_READ",
                            i18n: i18n( 'activity-schema.KimState_E.RECEIVED_AND_READ' ),
                            "-en": "Received and read",
                            "-de": "Empfangen und gelesen"
                        }
                    ]
                },
                "ApkState_E": {
                    "type": "String",
                    "default": "IN_PROGRESS",
                    "list": [
                        {
                            "val": "IN_PROGRESS",
                            i18n: i18n( 'activity-schema.ApkState_E.IN_PROGRESS' ),
                            "-en": "In Progress",
                            "-de": "In Arbeit"
                        },
                        {
                            "val": "DOCUMENTED",
                            i18n: i18n( 'activity-schema.ApkState_E.DOCUMENTED' ),
                            "-en": "Documented",
                            "-de": "Dokumentiert"
                        },
                        {
                            "val": "VALIDATED",
                            i18n: i18n( 'activity-schema.ApkState_E.VALIDATED' ),
                            "-en": "Validated",
                            "-de": "Geprüft"
                        }
                    ]
                },
                "Attachment_T": {
                    "docId": {
                        "type": "String",
                        "dcRef": "document",
                        "refType": "ObjectId",
                        "future": "foreignkey.Document_T",
                        i18n: i18n( 'activity-schema.Attachment_T.docId.i18n' ),
                        "-en": "docId",
                        "-de": "docId"
                    }
                },
                "Catalog_T": {
                    "catalog": {
                        "default": false,
                        "type": "boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Catalog_T.catalog.i18n' ),
                        "-en": "catalog",
                        "-de": "catalog"
                    },
                    "catalogShort": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Catalog_T.catalogShort.i18n' ),
                        "-en": "catalogShort",
                        "-de": "catalogShort",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Measurement_T.catalog.i18n' )
                        }
                    },
                    "catalogRef": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Catalog_T.catalogRef.i18n' ),
                        "-en": "catalogRef",
                        "-de": "catalogRef"
                    },
                    "code": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        "validate": "kbv.Activity_T_code",
                        i18n: i18n( 'activity-schema.Catalog_T.code.i18n' ),
                        "-en": "code",
                        "-de": "Kode",
                        "rule-engine": {
                            i18n: 'Code'
                        }
                    },
                    // this field is defined twice (Schein & Catalog)
                    "forInsuranceType": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Catalog_T.forInsuranceType.i18n' ),
                        "-en": "For Insurance Type",
                        "-de": "für Kostenträger Typ"
                    },
                    "modifyHomeCat": {
                        "default": false,
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.Activity_T.modifyHomeCat.i18n' ),
                        "-en": "modify home catalog",
                        "-de": "modify home catalog"
                    },
                    "deleteEntryHomeCat": {
                        "default": false,
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.Activity_T.deleteEntryHomeCat.i18n' ),
                        "-en": "delete entry from home catalog",
                        "-de": "delete entry from home catalog"
                    }
                },
                "Diagnosis_T": {
                    "diagnosisCert": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "DiagnosisCert_E",
                        "lib": types
                    },
                    "diagnosisType": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "DiagnosisType_E",
                        "lib": types
                    },
                    "diagnosisTreatmentRelevance": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "DiagnosisTreatmentRelevance_E",
                        "lib": types
                    },
                    "diagnosisSite": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "DiagnosisSite_E",
                        "lib": types
                    },
                    "diagnosisDerogation": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Diagnosis_T.diagnosisDerogation.i18n' ),
                        "-en": "Derogation",
                        "-de": "Ausnahmetatbestand",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Diagnosis_T.diagnosisDerogation.i18n' )
                        }
                    },
                    // MOJ-11762: invalidate diagnoses
                    "diagnosisInvalidationDate": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Diagnosis_T.diagnosisInvalidationDate.i18n' ),
                        "-en": "invalid since",
                        "-de": "ungültig seit",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Diagnosis_T.diagnosisInvalidationDate.i18n' )
                        }
                    },
                    //  Swiss mode fields are added here in v_schema
                    //  MOJ-11216 uncomment because causing error
                    'diagnosis_CH': {
                        complex: "ext",
                        type: "Diagnosis_CH_T",
                        lib: types
                    }

                },
                "Diagnosis_CH_T": {
                    "diagnosisPeriod": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "DiagnosisPeriod_E",
                        "lib": types
                    },
                    "diagnosisLaterality": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "DiagnosisLaterality_E",
                        "lib": types
                    },
                    "diagnosisInfectious": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Diagnosis_CH_T.diagnosisInfectious.i18n' ),
                        "-en": "Infectious",
                        "-de": "Infektiös"
                    },
                    "diagnosisFunctional": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Diagnosis_CH_T.diagnosisFunctional.i18n' ),
                        "-en": "Functional",
                        "-de": "Funktionell"
                    },
                    "diagnosisNeoplasia": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Diagnosis_CH_T.diagnosisNeoplasia.i18n' ),
                        "-en": "Neoplasia",
                        "-de": "Neoplasie"
                    },
                    "diagnosisOcupationally": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Diagnosis_CH_T.diagnosisOcupationally.i18n' ),
                        "-en": "Occupationally",
                        "-de": "Berufsbedingt"
                    },
                    "relatedCodes": {
                        complex: "inc",
                        type: "RelatedCodes_CH_T",
                        lib: types
                    }
                },
                "MedDataItemDataType_E": {
                    "type": "String",
                    "required": true,
                    "list": [
                        {
                            "val": "ANY",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.ANY' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.ANY' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.ANY' )
                        },
                        {
                            "val": "STRING_OR_NUMBER",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.STRING_OR_NUMBER' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.STRING_OR_NUMBER' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.STRING_OR_NUMBER' )
                        },
                        {
                            "val": "STRING",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.STRING' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.SYMPTOMS' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.STRING' )
                        },
                        {
                            "val": "STRING_ENUM",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.STRING_ENUM' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.STRING_ENUM' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.STRING_ENUM' )
                        },
                        {
                            "val": "NUMBER_INT",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_INT' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_INT' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_INT' )
                        },
                        {
                            "val": "NUMBER_TIMEDIFF",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_TIMEDIFF' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_TIMEDIFF' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_TIMEDIFF' )
                        },
                        {
                            "val": "NUMBER_FLOAT",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_FLOAT' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_FLOAT' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.NUMBER_FLOAT' )
                        },
                        {
                            "val": "BOOLEAN",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.BOOLEAN' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.BOOLEAN' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.BOOLEAN' )
                        },
                        {
                            "val": "DATE",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.DATE' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.DATE' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.DATE' )
                        },
                        {
                            "val": "DATE_TIME",
                            "-de": i18n( 'v_meddata-schema.medDataItemDataTypes.DATE_TIME' ),
                            i18n: i18n( 'v_meddata-schema.medDataItemDataTypes.DATE_TIME' ),
                            "-en": i18n( 'v_meddata-schema.medDataItemDataTypes.DATE_TIME' )
                        }
                    ],
                    i18n: i18n( 'activity-schema.MedDataCategory_E.i18n' ),
                    "-en": "Meddata item data type",
                    "-de": "Medizindaten-Eintrag Datentyp"
                },
                "MedDataCategory_E": {
                    "type": "String",
                    "required": true,
                    "list": [
                        {
                            "val": "BIOMETRICS",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.BIOMETRICS' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.BIOMETRICS' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.BIOMETRICS' )
                        },
                        {
                            "val": "SYMPTOMS",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.SYMPTOMS' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.SYMPTOMS' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.SYMPTOMS' )
                        },
                        {
                            "val": "ALLERGIES",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.ALLERGIES' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.ALLERGIES' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.ALLERGIES' )
                        },
                        {
                            "val": "ALIMENTATIONS",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.ALIMENTATIONS' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.ALIMENTATIONS' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.ALIMENTATIONS' )
                        },
                        {
                            "val": "ACTIVEINGREDIENTS",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.ACTIVEINGREDIENTS' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.ACTIVEINGREDIENTS' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.ACTIVEINGREDIENTS' )
                        },
                        {
                            "val": "GRAVIDOGRAMM",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.GRAVIDOGRAMM' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.GRAVIDOGRAMM' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.GRAVIDOGRAMM' )
                        },
                        {
                            "val": "PERCENTILECURVE",
                            "-de": i18n( 'activity-schema.MedDataCategory_E.PERCENTILECURVE' ),
                            i18n: i18n( 'activity-schema.MedDataCategory_E.PERCENTILECURVE' ),
                            "-en": i18n( 'activity-schema.MedDataCategory_E.PERCENTILECURVE' )
                        }
                    ],
                    i18n: i18n( 'activity-schema.MedDataCategory_E.i18n' ),
                    "-en": "Meddata Category",
                    "-de": "Medizindaten Kategorie"
                },
                // activities that have a duration, as yet unused
                "Duration_T": {
                    "start": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Duration_T.start.i18n' ),
                        "-en": "start",
                        "-de": "Beginn"
                    },
                    "end": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Duration_T.end.i18n' ),
                        "-en": "end",
                        "-de": "Ende"
                    }
                },
                "HasDiagnosis_T": {
                    "icds": { //  array of _id strings of other activities
                        "type": ["String"],
                        "validate": "kbv.Activity_T_icds",
                        i18n: i18n( 'activity-schema.HasDiagnosis_T.icds.i18n' ),
                        "-en": "treatment-relevant",
                        "-de": "behandlungsrelevant"
                    },
                    "icdsExtra": { //  array of _id strings of other activities
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.HasDiagnosis_T.icdsExtra.i18n' ),
                        "-en": "icdsExtra",
                        "-de": "icdsExtra"
                    }
                },
                "PutOnHold_T": {
                    "onHold": {
                        "type": "Boolean",
                        default: false,
                        i18n:  i18n( 'activity-schema.PKVSchein_T_CH.onHold' ),
                        "-en": i18n( 'activity-schema.PKVSchein_T_CH.onHold' ),
                        "-de": i18n( 'activity-schema.PKVSchein_T_CH.onHold' )
                    },
                    "onHoldNotes": {
                        "type": "String",
                        default: '',
                        i18n:  i18n( 'InCaseMojit.casefile_detail.label.ON_HOLD_NOTES' ),
                        "-en": i18n( 'InCaseMojit.casefile_detail.label.ON_HOLD_NOTES' ),
                        "-de": i18n( 'InCaseMojit.casefile_detail.label.ON_HOLD_NOTES' )
                    },
                    "statusBeforeHold": {
                        "complex": "eq",
                        "type": "ActStatus_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.status.i18n' ),
                        "-en": "Status before hold",
                        "-de": "Status vor dem Sperren"
                    }
                },
                "HasUvGoaeType_T": {
                    "uvGoaeType": {
                        "complex": "eq",
                        "type": "UvGoaeType_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.uvGoaeType.i18n' ),
                        "-en": "UV-GOÄ-Type",
                        "-de": "UV-GOÄ-Type"
                    }
                },
                "BillingTrackSchein_T":{
                    // these fields are in invoice, schein and treatment!
                    "scheinOrder": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinOrder",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinOrder.i18n' ),
                        "-en": "Order",
                        "-de": "Auftrag"
                    },
                    "scheinDiagnosis": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinDiagnosis",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinDiagnosis.i18n' ),
                        "-en": "Diagnosis (Text)",
                        "-de": "Diagnose/Verdacht (Text)"
                    },
                    "treatmentType": {
                        "complex": "eq",
                        "type": "TreatmentType_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "reasonType": {
                        "complex": "eq",
                        "type": "ScheinReasons_E",
                        "lib": types
                    },
                    "includesBSK": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Schein_T.includesBSK.i18n' ),
                        "-en": "includes BSK",
                        "-de": "inklusive BSK"
                    },
                    "isChiefPhysician": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Schein_T.isChiefPhysician.i18n' ),
                        "-en": "chief physician",
                        "-de": "Chefarzt"
                    },
                    "debtCollection": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.debtCollection.i18n' ),
                        "-en": "Debt collection on contract/Schein",
                        "-de": "Inkasso"
                    },
                    "orderAccounting": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.orderAccounting.i18n' ),
                        "-en": "Order Accounting",
                        "-de": "Konto (FiBu)"
                    },
                    "agencyCost": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.agencyCost.i18n' ),
                        "-en": "Agency cost",
                        "-de": "Zusätzl Kosten"
                    }
                },
                "Prescription_T": {
                    "noOfRepetitions": { //  how many times this has been repeated, eg a prescription reissued
                        "type": "Number", //  added for MOJ-2597
                        i18n: i18n( 'activity-schema.Prescription_T.noOfRepetitions.i18n' ),
                        "-en": "repetitions",
                        "-de": "Folgeverordnung"
                    },
                    "parentPrescriptionId": { //  following prescription will increment noOfRepetitions of their parent and that value will be assign to new child as well
                        "type": "String", //  added for MOJ-2597
                        i18n: i18n( 'activity-schema.Prescription_T.parentPrescriptionId.i18n' ),
                        "-en": "parent prescription",
                        "-de": "Parent-Rezept"
                    },
                    "rootPrescriptionId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Prescription_T.parentPrescriptionId.i18n' ),
                        "-en": "parent prescription",
                        "-de": "Parent-Rezept"
                    },
                    // MOJ-10501: override paidFree from insuranceStatus
                    "paidFreeStatus": {
                        "complex": "eq",
                        "type": "PaidFreeStatus_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.PaidFreeStatus_E.i18n' ),
                        "-en": "Charges",
                        "-de": "Gebühren"
                    },
                    "restRequestId": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Prescription_T.restRequestId.i18n' ),
                        "-en": "restRequestId",
                        "-de": "restRequestId"
                    },
                    "recommendationId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Prescription_T.recommendationId.i18n' ),
                        "-en": "recommendationId",
                        "-de": "recommendationId"
                    },
                    "nightTime": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.nightTime.i18n' ),
                        "-en": "noctu",
                        "-de": "noctu"
                    },
                    "otherInsurance": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.otherInsurance.i18n' ),
                        "-en": "Sonstige (K/T)",
                        "-de": "Sonstige (K/T)"
                    },
                    "utUnfall": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.utUnfall.i18n' ),
                        "-en": "Unfall",
                        "-de": "Unfall"
                    },
                    "workAccident": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.workAccident.i18n' ),
                        "-en": "Arb.unfall",
                        "-de": "Arb.unfall"
                    },
                    "isPatientBVG": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.isPatientBVG.i18n' ),
                        "-en": "BVG",
                        "-de": "BVG"
                    },
                    "assistive": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.assistive.i18n' ),
                        "-en": "Hilfsmittel",
                        "-de": "Hilfsmittel"
                    },
                    "vaccination": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.vaccination.i18n' ),
                        "-en": "Impfstoff",
                        "-de": "Impfstoff"
                    },
                    "practiceAssistive": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.practiceAssistive.i18n' ),
                        "-en": "Spr.Std.Bedarf",
                        "-de": "Spr.Std.Bedarf"
                    },
                    "dentist": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.dentist.i18n' ),
                        "-en": "Begr.Pflicht",
                        "-de": "Begr.Pflicht"
                    },
                    "substitutePrescription": {
                        "type": "Boolean",
                        "validate": "kbv.Prescription_T_substitutePrescription",
                        i18n: i18n( 'activity-schema.Prescription_T.substitutePrescription.i18n' ),
                        "-en": "Substitute Prescription",
                        "-de": "Ersatzverordnung"
                    },
                    "employeeSpecialities": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.employeeSpecialities.i18n' ),
                        "-en": "Sonstige (BTM)",
                        "-de": "Sonstige (BTM)"
                    },
                    "fk4202": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.fk4202.i18n' ),
                        "-en": "Unfall, Unfallfolgen",
                        "-de": "Unfall, Unfallfolgen"
                    },
                    "correctUsage": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.correctUsage.i18n' ),
                        "-en": "Sich.eingehalten",
                        "-de": "Sich.eingehalten"
                    },
                    "patientInformed": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.patientInformed.i18n' ),
                        "-en": "Infomaterial ausg.",
                        "-de": "Infomaterial ausg."
                    },
                    "inLabel": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.inLabel.i18n' ),
                        "-en": "In-Label",
                        "-de": "In-Label"
                    },
                    "offLabel": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.offLabel.i18n' ),
                        "-en": "Off-Label",
                        "-de": "Off-Label"
                    },
                    "exactMed1": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.exactMed1.i18n' ),
                        "-en": "aut idem 1",
                        "-de": "aut idem 1"
                    },
                    "exactMed2": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.exactMed2.i18n' ),
                        "-en": "aut idem 2",
                        "-de": "aut idem 2"
                    },
                    "exactMed3": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Prescription_T.exactMed3.i18n' ),
                        "-en": "aut idem 3",
                        "-de": "aut idem 3"
                    }
                },
                "PaidFreeStatus_E": {
                    "type": "String",
                    "default": "AUTO",
                    i18n: i18n( 'activity-schema.PaidFreeStatus_E.i18n' ),
                    "list": [
                        {
                            "val": "AUTO",
                            i18n: i18n( 'activity-schema.PaidFreeStatus_E.AUTO.i18n' ),
                            "-en": "auto",
                            "-de": "auto"
                        },
                        {
                            "val": "MUST_PAY",
                            i18n: i18n( 'activity-schema.PaidFreeStatus_E.MUST_PAY.i18n' ),
                            "-en": "charges apply",
                            "-de": "gebührenpflichtig"
                        },
                        {
                            "val": "MUST_NOT_PAY",
                            i18n: i18n( 'activity-schema.PaidFreeStatus_E.MUST_NOT_PAY.i18n' ),
                            "-en": "toll free",
                            "-de": "gebührenbefreit"
                        }
                    ]
                },
                "ScheinOrderTenC_E": {
                    "type": "String",
                    "list": [
                        {
                            "val": "Diagnostische Abklärung",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.DiagnosticWorkUp.i18n' )
                        }
                    ]
                },
                "ScheinOrder_E": { // not explcitly linked because only used for GKVSCHEIN "Satzart 0102 mit Scheinuntergruppe 21"
                    "type": "String",
                    "list": [
                        {
                            "val": "P-HPV",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.P-HPV.i18n' ),
                            "-en": "nur HPV-Test im Primärscreening",
                            "-de": "nur HPV-Test im Primärscreening"
                        },
                        {
                            "val": "P-Zyto",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.P-Zyto.i18n' ),
                            "-en": "nur zytologische Untersuchung im Primärscreening",
                            "-de": "nur zytologische Untersuchung im Primärscreening"
                        },
                        {
                            "val": "P-KoTest",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.P-KoTest.i18n' ),
                            "-en": "Ko-Test im Primärscreening",
                            "-de": "Ko-Test im Primärscreening"
                        },
                        {
                            "val": "A-HPV",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.A-HPV.i18n' ),
                            "-en": "nur HPV-Test in der Abklärung",
                            "-de": "nur HPV-Test in der Abklärung"
                        },
                        {
                            "val": "A-Zyto",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.A-Zyto.i18n' ),
                            "-en": "nur zytologische Untersuchung in der Abklärung",
                            "-de": "nur zytologische Untersuchung in der Abklärung"
                        },
                        {
                            "val": "A-KoTest",
                            i18n: i18n( 'activity-schema.ScheinOrder_E.A-KoTest.i18n' ),
                            "-en": "Ko-Test in der Abklärung",
                            "-de": "Ko-Test in der Abklärung"
                        }
                    ]
                },
                "Price_T": {
                    "hasOP": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Price_T.hasOP.i18n' ),
                        "-en": "has opcodes",
                        "-de": "ist OP"
                    },
                    "totalASK": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalASK.i18n' ),
                        "-en": "total ASK",
                        "-de": "Gesamt Alg. SK"
                    },
                    "totalBSK": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalBSK.i18n' ),
                        "-en": "total BSK",
                        "-de": "Gesamt Bes. SK"
                    },
                    "totalDoc": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalDoc.i18n' ),
                        "-en": "totalDoc",
                        "-de": "totalDoc"
                    },
                    "totalWithoutExpenses": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalWithoutExpenses.i18n' ),
                        "-en": "totalWithoutExpenses",
                        "-de": "totalWithoutExpenses"
                    },
                    "total75": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.total75.i18n' ),
                        "-en": "total75",
                        "-de": "total75"
                    },
                    "total25": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.total25.i18n' ),
                        "-en": "total25",
                        "-de": "total25"
                    },
                    "total15": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.total15.i18n' ),
                        "-en": "total15",
                        "-de": "total15"
                    },
                    "totalOwing": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalOwing.i18n' ),
                        "-en": "totalOwing",
                        "-de": "totalOwing"
                    },
                    "beforetax": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.beforetax.i18n' ),
                        "-en": "beforetax",
                        "-de": "beforetax"
                    },
                    "totalExpense": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalExpense.i18n' ),
                        "-en": "totalExpense",
                        "-de": "totalExpense"
                    },
                    "totalAHB": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalAHB.i18n' ),
                        "-en": "totalAHB",
                        "-de": "totalAHB"
                    },
                    "totalBHB": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalBHB.i18n' ),
                        "-en": "totalBHB",
                        "-de": "totalBHB"
                    },
                    "total": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.total.i18n' ),
                        "-en": "total",
                        "-de": "total"
                    },
                    "totalVat": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalVat.i18n' ),
                        "-en": "totalVat",
                        "-de": "totalVat"
                    },
                    "vatAmount": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.vatAmount.i18n' ),
                        "-en": "vatAmount",
                        "-de": "vatAmount"
                    },
                    "BSK": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.BSK.i18n' ),
                        "-en": "BSK",
                        "-de": "BSK"
                    },
                    "ASK": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.ASK.i18n' ),
                        "-en": "ASK",
                        "-de": "ASK",
                        "rule-engine": {}
                    },
                    "AHB": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.AHB.i18n' ),
                        "-en": "AHB",
                        "-de": "AHB"
                    },
                    "BHB": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.totalBSK.i18n' ),
                        "-en": "BHB",
                        "-de": "BHB"
                    },
                    "price": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.price.i18n' ),
                        "-en": "price",
                        "-de": "Kosten",
                        "rule-engine": {}
                    },
                    "actualPrice": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.actualPrice.i18n' ),
                        "-en": 'actual price',
                        "-de": 'tatsächlicher Preis'
                    },
                    "unit": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Price_T.unit.i18n' ),
                        "-en": "unit",
                        "-de": "Einheit"
                    },
                    "actualUnit": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Price_T.actualUnit.i18n' ),
                        "-en": 'actual unit',
                        "-de": 'tatsächlicher Einheit'
                    },
                    "hasVat": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Price_T.hasVat.i18n' ),
                        "-en": 'hasVat',
                        "-de": 'hasVat.'
                    },
                    "vat": {
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.vat.i18n' ),
                        "-en": 'VAT',
                        "-de": 'Ust.'
                    }
                },
                "Treatment_T": {
                    "baseFromSchein":{
                        "complex": "ext",
                        "type": "BillingTrackSchein_T",
                        "lib": types
                    },
                    'baseTreatment': {
                        complex: "ext",
                        type: "BaseTreatment_T",
                        lib: types
                    },
                    'treatment_D': {
                        complex: "ext",
                        type: "Treatment_D_T",
                        lib: types
                    },
                    'treatment_CH': {
                        complex: "ext",
                        type: "Treatment_CH_T",
                        lib: types
                    },
                    "materialCosts": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Activity_T.materialCosts.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.materialCosts.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.materialCosts.i18n' )
                    },
                    "invoiceLogId" : {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' )
                        }
                    },
                    "invoiceLogType" : {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' )
                    },
                    "invoiceId" : {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' ),
                        "-en": "invoiceId",
                        "-de": "invoiceId",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' )
                        }
                    },
                    "generalCosts": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Activity_T.generalCosts.i18n' ),
                        "-en": "General costs",
                        "-de": "Allgemeinkosten"
                    },
                    "specialCosts": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Activity_T.specialCosts.i18n' ),
                        "-en": "Special costs",
                        "-de": "Besonderekosten"
                    },
                    "areTreatmentDiagnosesBillable": {
                        "default": "1",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_T.areTreatmentDiagnosesBillable.i18n' ),
                        "-en": "treatment billable",
                        "-de": "Leistung abrechenbar",
                        "rule-engine": {}
                    },
                    "billingFactorValue": {
                        "type": "String",
                        "default": "1",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Treatment_T_billingFactorValue",
                        i18n: i18n( 'activity-schema.Treatment_T.billingFactorValue.i18n' ),
                        "-en": "billing factor value",
                        "-de": "Rechnungsfaktor",
                        "rule-engine": {
                            "type": "Number",
                            i18n: i18n( 'activity-schema.Treatment_T.billingFactorValueRule.i18n' )
                        }
                    },
                    "billingFactorType": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.billingFactorType.i18n' ),
                        "-en": "billing factor type",
                        "-de": "Rechnungsfaktortyp"
                    },
                    "omimCodes": {
                        "complex": "inc",
                        "type": "Omim_T",
                        "lib": types,
                        "validate": "kbv.Treatment_T_omimCodes",
                        i18n: i18n( 'activity-schema.Treatment_T.omimCodes.i18n' ),
                        "-en": "OMIM Codes",
                        "-de": "OMIM Codes"
                    },
                    "gebuehType": {
                        "complex": "eq",
                        "type": "GebuehType_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.gebuehType.i18n' ),
                        "-en": "GebueH-Type",
                        "-de": "GebueH-Type"
                    },
                    "costType": {
                        "complex": "eq",
                        "type": "CostType_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.costType.i18n' ),
                        "-en": "Cost type",
                        "-de": "Cost type"
                    },
                    "linkedPercentage": {
                        "validate": "Treatment_T_linkedPercentage",
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Treatment_T.linkedPercentage.i18n' ),
                        "-en": i18n( 'activity-schema.Treatment_T.linkedPercentage.i18n' ),
                        "-de": i18n( 'activity-schema.Treatment_T.linkedPercentage.i18n' )
                    },
                    "noASV": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Treatment_T.noASV.i18n' ),
                        "-en": i18n( 'activity-schema.Treatment_T.noASV.i18n' ),
                        "-de": i18n( 'activity-schema.Treatment_T.noASV.i18n' )
                    },
                    "gnrAdditionalInfo": {
                        "complex": "eq",
                        "type": "GnrAdditionalInfo_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.i18n' ),
                        "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.i18n' ),
                        "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.i18n' )
                    },
                    "gnrAdditionalInfoType": {
                        "complex": "eq",
                        "type": "GnrAdditionalInfoType_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.GnrAdditionalInfoType_E.i18n' ),
                        "-en": i18n( 'activity-schema.GnrAdditionalInfoType_E.i18n' ),
                        "-de": i18n( 'activity-schema.GnrAdditionalInfoType_E.i18n' )
                    },
                    "labRequestRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Labor_T.labRequestId.i18n' ),
                        "-en": "labRequestRef",
                        "-de": "labRequestRef"
                    }/*,
                    "makeNCopies": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Treatment_T.makeNCopies.i18n' ),
                        "-en": "Number of copies",
                        "-de": "Anzahl"
                    }
                    */
                },
                'BaseTreatment_T': {
                    'countryMode': {
                        "complex": "eq",
                        "type": "CountryMode_E",
                        "lib": types
                    }
                },
                "CountryMode_E": {
                    "type": ["String"],
                    i18n: i18n( 'activity-schema.CountryMode_E.i18n' ),
                    "default": ["D"],
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": "D"
                        },
                        {
                            "val": "CH"
                        }
                    ]
                },
                'Treatment_D_T': {
                    "chapter": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.chapter.i18n' ),
                        "-en": "Chapter",
                        "-de": "Kapitel"
                    },
                    "fk5002": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5002",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5002.i18n' ),
                        "-en": "Type of investigation",
                        "-de": "Art der Untersuchung"
                    },
                    "fk5005": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5005",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5005.i18n' ),
                        "-en": "Multiplier",
                        "-de": "Multiplikator"
                    },
                    "fk5008": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5008",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5008.i18n' ),
                        "-en": "DKM",
                        "-de": "DKM"
                    },
                    "fk5013": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5013",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5013.i18n' ),
                        "-en": "Percent of the achievement",
                        "-de": "Prozent der Leistung"
                    },
                    "fk5017": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5017",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5017.i18n' ),
                        "-en": "Visit home visit",
                        "-de": "Besuchsort Hausbesuch"
                    },
                    "fk5019": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5019",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5019.i18n' ),
                        "-en": "Location of the device",
                        "-de": "Erbringungsort/Standort des Gerätes"
                    },
                    "fk5023": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5023",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5023.i18n' ),
                        "-en": "GO-Numbers-Additional",
                        "-de": "GO-Nummern-Zusatz",
                        "rule-engine": {}
                    },
                    "fk5024": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5024",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5024.i18n' ),
                        "-en": "GNR additional indicator for post-inpatient services provided",
                        "-de": "GNR-Zusatzkennzeichen für poststationär erbrachte Leistungen",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Treatment_T.fk5024.rule-i18n' )
                        }
                    },
                    "fk5025": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Treatment_T_fk5025",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5025.i18n' ),
                        "-en": "Recorded",
                        "-de": "Aufnahmedatum",
                        "rule-engine": {}
                    },
                    "fk5026": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Treatment_T_fk5026",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5026.i18n' ),
                        "-en": "Discharge date",
                        "-de": "Entlassdatum",
                        "rule-engine": {}
                    },
                    "fk5034": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Treatment_T_fk5034",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5034.i18n' ),
                        "-en": "OP-date",
                        "-de": "OP-Datum",
                        "rule-engine": {}
                    },
                    "fk5037": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5037",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5037.i18n' ),
                        "-en": "Total cut-suture time",
                        "-de": "Gesamt Schnitt-Naht-Zeit",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "rule-engine": {}
                    },
                    "fk5040": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5040",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5040.i18n' ),
                        "-en": "Patient number (FEK-arch)",
                        "-de": "Patientennummer (FEK-Bogen)"
                    },
                    "fk5044": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5044",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5044.i18n' ),
                        "-en": "Economically calculated price in cents",
                        "-de": "Betriebswirtschaftlicher kalkulierter Preis in Cent"
                    },
                    "fk5012Set": {
                        "complex": "inc",
                        "type": "Fk5012_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5012Set.i18n' ),
                        "-en": "Material costs",
                        "-de": "Sachkosten/Materialkosten"
                    },
                    "fk5015": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5015.i18n' ),
                        "-en": "Organ",
                        "-de": "Organ"
                    },
                    "fk5016": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5016.i18n' ),
                        "-en": "Name of Doctor",
                        "-de": "Name des Arztes"
                    },
                    "tsvDoctorNo": {
                        "type": "String",
                        "rule-engine": {},
                        i18n: i18n( 'activity-schema.Treatment_T.tsvDoctorNo.i18n' ),
                        "-en": "(N)BSNR of the mediated specialist",
                        "-de": "(N)BSNR des vermittelten Facharztes"
                    },
                    "fk5018": {
                        "complex": "eq",
                        "type": "Fk5018_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5018.i18n' ),
                        "-en": "Zone at home visit",
                        "-de": "Zone bei Hausbesuch"
                    },
                    "fk5020Set": {
                        "complex": "inc",
                        "type": "Fk5020_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5020Set.i18n' ),
                        "-en": "Repeat Examination",
                        "-de": "Wiederholungsuntersuchung"
                    },
                    "fk5035Set": {
                        "complex": "inc",
                        "type": "Fk5035_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5035Set.i18n' ),
                        "-en": "OP-Key Documentation",
                        "-de": "OP-Schlüssel Dokumentation",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Fk5035_T.fk5035.i18n' )
                        }
                    },
                    "fk5036Set": {
                        "complex": "inc",
                        "type": "Fk5036_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5036Set.i18n' ),
                        "-en": "GNR as a justification",
                        "-de": "GNR als Begründung",
                        "rule-engine": {
                            "type": "String"
                        }
                    },
                    "fk5038": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5038.i18n' ),
                        "-en": "Complication",
                        "-de": "Komplikation",
                        "rule-engine": {}
                    },
                    "fk5010BatchNumber": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5010.i18n' ),
                        "-en": "Batch number",
                        "-de": "Chargennummer",
                        "validate": "kbv.TREATMENT_T_fk5010",
                        "rule-engine": {
                            "type": "String"
                        }
                    },
                    "fk5042Set": {
                        "complex": "inc",
                        "type": "Fk5042_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5042Set.i18n' ),
                        "-en": "KM/AM",
                        "-de": "KM/AM"
                    }
                },
                'Treatment_CH_T': {
                    "treatmentCategory": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.treatmentCategory.i18n' ),
                        "-en": "Treatment category",
                        "-de": "Leistungskategorie"
                    },
                    "hierarchyRules": {
                        complex: "inc",
                        type: "HierarchyRules_CH_T",
                        lib: types
                    },
                    "divisionCode": {
                        "type": "Number",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.divisionCode.i18n' ),
                        "-en": "Division (code)",
                        "-de": "Sparte (Code)"
                    },
                    "divisionText": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.divisionText.i18n' ),
                        "-en": "Division (text)",
                        "-de": "Sparte (Text)"
                    },
                    "anaesthesiaCode": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.anaesthesiaCode.i18n' ),
                        "-en": "Anaesthesia (code)",
                        "-de": "Anästhesie (Code)"
                    },
                    "anaesthesiaText": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.anaesthesiaText.i18n' ),
                        "-en": "Anaesthesia (text)",
                        "-de": "Anästhesie (Text)"
                    },
                    "medicalText": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.medicalText.i18n' ),
                        "-en": "Medical Interpretation",
                        "-de": "Medizinische Interpretation"
                    },
                    "technicalText": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.technicalText.i18n' ),
                        "-en": "Technical Interpretation",
                        "-de": "Technische Interpretation"
                    },
                     //taxPoints - EAL MIGEL catalogs
                    "taxPoints": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.medicalTaxPoints.i18n' ),
                        "-en": "Tax points",
                        "-de": "Taxpunkte"
                    },
                    //medicalTaxPoint - tarmed catalogs
                    "medicalTaxPoints": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.medicalTaxPoints.i18n' ),
                        "-en": "Medical service",
                        "-de": "Ärztliche Leistung (AL)"
                    },
                    "technicalTaxPoints": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.technicalTaxPoints.i18n' ),
                        "-en": "Technical service",
                        "-de": "Technische Leistung (TL)"
                    },
                    "assistanceTaxPoints": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.assistanceTaxPoints.i18n' ),
                        "-en": "Assitance tax points",
                        "-de": "Assistenz Taxpunkte"
                    },
                    "taxPointValue": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.taxPointValue.i18n' ),
                        "-en": "Tax point value",
                        "-de": "Taxpunktwerte"
                    },
                    "medicalScalingFactor": {
                        "type": "Number",
                        "default": 1,
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.medicalScalingFactor.i18n' ),
                        "-en": "Medical scaling factor",
                        "-de": "Medizinischer Skalierungsfaktor"
                    },
                    "technicalScalingFactor": {
                        "type": "Number",
                        "default": 1,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.technicalScalingFactor.i18n' ),
                        "-en": "Technical sclaling factor",
                        "-de": "Technisher Skalierungsfaktor"
                    },
                    "treatmentTime": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.treatmentTime.i18n' ),
                        "-en": "Treatment in the narrow sense (min)",
                        "-de": "Leistung im engeren Sinne (min)"
                    },
                    "preparationAndFollowUpTime": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.preparationAndFollowUpTime.i18n' ),
                        "-en": "Preparation and follow-up (min)",
                        "-de": "Vor- und Nachbereitung (min)"
                    },
                    "reportTime": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.reportTime.i18n' ),
                        "-en": "Report (min)",
                        "-de": "Bericht (min)"
                    },
                    "roomOccupancyTime": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.roomOccupancyTime.i18n' ),
                        "-en": "Room occupancy (min)",
                        "-de": "Raumbelegung (min)"
                    },
                    "rotationTime": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.rotationTime.i18n' ),
                        "-en": "Rotation time (min)",
                        "-de": "Wechselzeit (min)"
                    },
                    "assistanceQuantity": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.assistanceQuantity.i18n' ),
                        "-en": "Number of assistants",
                        "-de": "Anzahl der Assistenten"
                    },
                    "benefitsCode": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.benefitsCode.i18n' ),
                        "-en": "Benefits (code)",
                        "-de": "Leistungspflicht (Code)"
                    },
                    "benefitsText": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.benefitsText.i18n' ),
                        "-en": "Benefits (text)",
                        "-de": "Leistungspflicht (Text)"
                    },
                    "billingRole": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "Treatment_CH_T_BillingRole",
                        i18n: i18n( 'activity-schema.Treatment_CH_T.billingRole.i18n' ),
                        "lib": types
                    },
                    "treatmentTypeCh": {
                        "complex": "eq",
                        "type": "TreatmentType_CH_E",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.treatmentTypeCh.i18n' ),
                        "lib": types
                    },
                    "side": {
                        "complex": "eq",
                        "type": "Side_CH_E",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "Treatment_CH_T_side",
                        i18n: i18n( 'activity-schema.Treatment_CH_T.side.i18n' ),
                        "lib": types
                    },
                    "sideMandatory": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.Treatment_CH_T.sideMandatory.i18n' ),
                        "apiv": { v: 2, queryParam: false }
                    },
                    "price": {
                        "type": "Number",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.price.i18n' )
                    },
                    "displayPrice": {
                        "type": "String",
                        "default": 0,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Treatment_CH_T.displayPrice.i18n' )
                    },
                    "bstrReferenceCode": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Catalog_T.bstrReferenceCode.i18n' ),
                        "-en": "bstr Reference Code",
                        "-de": "bstr Reference Code"
                    },
                    "tariffType": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Catalog_T.tariffType.i18n' ),
                        "-en": "bstr Tariff Type",
                        "-de": "bstr Tariff Type"
                    }
                },
                'HierarchyRules_CH_T': {
                    "checked": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.HierarchyRules_CH_T.checked.i18n' ),
                        "-en": "Checked",
                        "-de": "Checked"
                    },
                    "disabled": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.HierarchyRules_CH_T.disabled.i18n' ),
                        "-en": "Disabled",
                        "-de": "Disabled"
                    },
                    "title": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.HierarchyRules_CH_T.title.i18n' ),
                        "-en": "title",
                        "-de": "title"
                    },
                    "seq": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.HierarchyRules_CH_T.seq.i18n' ),
                        "-en": "seq",
                        "-de": "seq"
                    },
                    "validFrom": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.HierarchyRules_CH_T.validFrom.i18n' ),
                        "-en": "validFrom",
                        "-de": "validFrom"
                    },
                    "validUntil": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.HierarchyRules_CH_T.validUntil.i18n' ),
                        "-en": "validUntil",
                        "-de": "validUntil"
                    }
                },
                'RelatedCodes_CH_T': {
                    "checked": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.checked.i18n' ),
                        "-en": "Checked",
                        "-de": "Checked"
                    },
                    "title": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.title.i18n' ),
                        "-en": "title",
                        "-de": "title"
                    },
                    "seq": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.seq.i18n' ),
                        "-en": "seq",
                        "-de": "seq"
                    },
                    "F": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.F.i18n' ),
                        "-en": "Checked",
                        "-de": "Checked"
                    },
                    "I": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.I.i18n' ),
                        "-en": "Checked",
                        "-de": "Checked"
                    },
                    "N": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.N.i18n' ),
                        "-en": "Checked",
                        "-de": "Checked"
                    },
                    "B": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.RelatedCodes_CH_T.B.i18n' ),
                        "-en": "Checked",
                        "-de": "Checked"
                    }
                },
                "Treatment_CH_T_BillingRole": {
                    "type": ["String"],
                    "default": ['MEDICAL', 'TECHNICAL'],
                    i18n: i18n( 'activity-schema.Treatment_CH_T_BillingRole.i18n' ),
                    "list": [
                        {
                            "val": "MEDICAL",
                            i18n: i18n( 'activity-schema.Treatment_CH_T_BillingRole.MEDICAL.i18n' )
                        },
                        {
                            "val": "TECHNICAL",
                            i18n: i18n( 'activity-schema.Treatment_CH_T_BillingRole.TECHNICAL.i18n' )
                        }
                    ]
                },
                "Omim_T": {
                    "fk5070": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5070",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5070.i18n' ),
                        "-en": "OMIM G-code of the examined gene",
                        "-de": "OMIM-G-Kode des untersuchten Gens"
                    },
                    "fk5070ValidAt": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5070.i18n' ),
                        "-en": "OMIM G-code of the examined gene valid at",
                        "-de": "OMIM-G-Kode des untersuchten Gens valide am"
                    },
                    "fk5071": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5071",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5071.i18n' ),
                        "-en": "OMIM-P code (type of disease)",
                        "-de": "OMIM-P-Kode (Art der Erkrankung)"
                    },
                    "fk5071ValidAt": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5071.i18n' ),
                        "-en": "OMIM-P code (type of disease) valid at",
                        "-de": "OMIM-P-Kode (Art der Erkrankung) valide am"
                    },
                    "fk5072": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5072",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5072.i18n' ),
                        "-en": "Gene Name",
                        "-de": "Gen-Name"
                    },
                    "fk5073": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5073",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5073.i18n' ),
                        "-en": "Type of disease",
                        "-de": "Art der Erkrankung"
                    }
                },
                "Observation_T": {
                    "observationTherapyStatus": {
                        "complex": "eq",
                        "type": "ObservationTherapyStatus_E",
                        "lib": types
                    },
                    "observationValuation": {
                        "complex": "eq",
                        "type": "ObservationValuation_E",
                        "lib": types
                    }
                },
                "PKVSchein_T": {
                    "scheinBillingFactorValue": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        //": "kbv.Treatment_T_billingFactorValue",
                        i18n: i18n( 'activity-schema.Treatment_T.billingFactorValue.i18n' ),
                        "-en": i18n( 'activity-schema.Treatment_T.billingFactorValue.i18n' ),
                        "-de": i18n( 'activity-schema.Treatment_T.billingFactorValue.i18n' )
                    },
                    "PKVSchein_CH": {
                        complex: "ext",
                        type: "PKVSchein_CH_T",
                        lib: types
                    }
                },
                "AMTSSchein_T": {
                    "isPaid": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.AMTSSchein_T.isPaid.i18n' )
                    },
                    "healthStatusRatingBeforeCheck": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.AMTSSchein_T.healthStatusRatingBeforeCheck.i18n' )
                    },
                    "healthStatusRatingOnFollowUp": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.AMTSSchein_T.healthStatusRatingOnFollowUp.i18n' )
                    },
                    "amtsStatus": {
                        "default": 100,
                        "type": "Number", // Should have values of AMTSStatus_E but checking is not required by inSuite, it's done in Data sol.
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.AMTSStatus_E.i18n' ),
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.AMTSStatus_E.rule-i18n' )
                        }
                    },
                    "checkProcessId": {
                        "default": '',
                        "type": "string",
                        "apiv": { v: 2, queryParam: true },
                        i18n: ''
                    },
                    "amtsBubbleCollectionImage": {
                        "default": '',
                        "type": "string",
                        "apiv": { v: 2, queryParam: false },
                        i18n: ''
                    },
                    "checkProcessJsonString": {
                        "default": '',
                        "type": "string",
                        "apiv": { v: 2, queryParam: false },
                        i18n: ''
                    },
                    "caseOfSpecialCare": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: ''
                    },
                    "caseOfSpecialCareReason": {
                        "default": '',
                        "type": "string",
                        "apiv": { v: 2, queryParam: false },
                        i18n: ''
                    },
                    "amtsSelectiveContractInsuranceId": {
                        "type": "string",
                        "apiv": { v: 2, queryParam: false },
                        i18n: ''
                    }
                },
                "PKVSchein_CH_T": {
                    "isTiersGarant": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.PKVSchein_CH_T.isTiersGarant.i18n' ),
                        "-en": "Tiers Garant",
                        "-de": "Tiers Garant"
                    },
                    "isTiersPayant": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.PKVSchein_CH_T.isTiersPayant.i18n' ),
                        "-en": "Tiers Payant",
                        "-de": "Tiers Payant"
                    },
                    "docPrinted": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.PKVSchein_CH_T.docPrinted.i18n' ),
                        "-en": "Print document",
                        "-de": "Dokument drucken"
                    }
                },
                "GKVSchein_T": {

                    "scheinQuarter": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinQuarter",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinQuarter.i18n' ),
                        "-en": "Quarter",
                        "-de": "Quartal"
                    },
                    "scheinDate": {
                        "validate": "kbv.Schein_T_scheinDate",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinDate.i18n' ),
                        "-en": "Original Schein Date",
                        "-de": "Ausstellungsdatum"
                    },
                    "scheinYear": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinYear",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinYear.i18n' ),
                        "-en": "Year",
                        "-de": "Jahr"
                    },
                    "fk4229": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4229.i18n' ),
                        "-en": "Exceptional indication",
                        "-de": "Ausnahmeindikation"
                    },
                    "scheinBillingArea": {
                        "default": "00",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinBillingArea.i18n' ),
                        "-en": "Billing Area",
                        "-de": "Abrechnungsgebiet"
                    },
                    "scheinType": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Schein_T_scheinType",
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinType.i18n' ),
                        "-en": "Group",
                        "-de": "Gruppe"
                    },
                    "scheinSubgroup": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinSubgroup",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinSubgroup.i18n' ),
                        "-en": "Subgroup",
                        "-de": "Untergruppe"
                    },
                    "scheinInputTemplate": {
                        "complex": "eq",
                        "type": "ScheinInputTemplate_E",
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinInputTemplate.i18n' ),
                        "lib": types,
                        "-en": "template",
                        "-de": "Muster"
                    },
                    "scheinTransferType": {
                        complex: "eq",
                        type: "ScheinTransferType_E",
                        lib: types,
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinTransferType.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "TSVG Vermittlungs-/Kontaktart",
                        "-de": "TSVG Vermittlungs-/Kontaktart"
                    },
                    "scheinTransferArrangementCode": {
                        "default": "",
                        "type": "String",
                        "rule-engine": {},
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Schein_T_scheinTransferArrangementCode",
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinTransferArrangementCode.i18n' ),
                        "-en": "Vermittlungscode",
                        "-de": "Vermittlungscode"
                    },
                    "scheinTransferDateOfContact": {
                        "default": "",
                        "type": "Date",
                        "rule-engine": {},
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinTransferDateOfContact.i18n' ),
                        "-en": "Datum der Kontaktaufnahme bei der TSS",
                        "-de": "Datum der Kontaktaufnahme bei der TSS"
                    },
                    "scheinTransferTypeInfo": {
                        "default": "",
                        "type": "String",
                        "rule-engine": {},
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinTransferTypeInfo.i18n' ),
                        "-en": "Ergänzende Informationen zur TSVG Vermittlungs-/Kontaktart",
                        "-de": "Ergänzende Informationen zur TSVG Vermittlungs-/Kontaktart"
                    },
                    "fk4124": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4124.i18n' ),
                        "-en": "SKT-Zusatzangaben",
                        "-de": "SKT-Zusatzangaben"
                    },
                    "fk4126": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4126.i18n' ),
                        "-en": "SKT-Bemerkungen",
                        "-de": "SKT-Bemerkungen"
                    },
                    "fk4125from": {
                        "default": "",
                        "validate": "kbv.Schein_T_fk4125",
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4125from.i18n' ),
                        "-en": "Gültigkeitszeitraum von",
                        "-de": "Gültigkeitszeitraum von"
                    },
                    "fk4125to": {
                        "default": "",
                        "validate": "kbv.Schein_T_fk4125",
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4125to.i18n' ),
                        "-en": "Gültigkeitszeitraum bis",
                        "-de": "Gültigkeitszeitraum bis"
                    },
                    "fk4123": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4123.i18n' ),
                        "-en": "Personenkreis, Untersuchungskategorie",
                        "-de": "Personenkreis, Untersuchungskategorie"
                    },
                    "fk4206": {
                        "default": "",
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "dateNotRequired",
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4206.i18n' ),
                        "-en": "Mutmaßlicher Tag der Entbindung",
                        "-de": "Mutmaßlicher Tag der Entbindung"
                    },
                    "fk4236": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4236.i18n' ),
                        "-en": "Abklärung somatischer Ursachen vor Aufnahme einer Psychotherapie",
                        "-de": "Abklärung somatischer Ursachen vor Aufnahme einer Psychotherapie"
                    },
                    "fk4204": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4204.i18n' ),
                        "-en": "Eingeschränkter Leistungsanspruch",
                        "-de": "Eingeschränkter Leistungsanspruch"
                    },
                    "fk4241": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "kbv.Schein_T_fk4241",
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4241.i18n' ),
                        "-en": "Erstveranlasser Lebenslange Arztnr.",
                        "-de": "Erstveranlasser Lebenslange Arztnr."
                    },
                    "fk5098": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] }
                    },
                    "fk5099": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] }
                    },
                    "fk4217": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "kbv.Schein_T_fk4217",
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4217.i18n' ),
                        "-en": "Erstveranlasser Betriebsstättennr.",
                        "-de": "Erstveranlasser Betriebsstättennr."
                    },
                    "ÜberwAn": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.ueberwAn.i18n' ),
                        "-en": "überweisung an",
                        "-de": "überweisung an"
                    },
                    "auBis": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.auBis.i18n' ),
                        "-en": "AU bis",
                        "-de": "AU bis"
                    },
                    "untersArt": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.UntersArt_E.i18n' ),
                        "-en": "Untersuchungsart",
                        "-de": "Untersuchungsart"
                    },
                    "asvReferrer": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.GKVSchein_T.asvReferrer.i18n' ),
                        "-en": "ASV referring doctor number",
                        "-de": "ASV-Überweiser"
                    },
                    "asvInitiator": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.GKVSchein_T.asvInitiator.i18n' ),
                        "-en": "ASV initiator doctor number",
                        "-de": "ASV-Erveranlasser"
                    },
                    "initiatorPhysicianName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.GKVSchein_T.initiatorPhysicianName.i18n' ),
                        "-en": "Physician name",
                        "-de": "Arzt Name"
                    }
                },
                "ScheinType_E" : {
                    "type" : "String",
                    "i18n" : "Scheingruppe",
                    "-en" : "Scheingruppe",
                    "-de" : "Scheingruppe",
                    "list" : [
                        {
                            "val" : "0101",
                            "i18n" : "ambulante Behandlung",
                            "-de" : "ambulante Behandlung",
                            "-en" : "ambulante Behandlung"
                        },
                        {
                            "val" : "0102",
                            "i18n" : "Überweisung",
                            "-de" : "Überweisung",
                            "-en" : "Überweisung"
                        },
                        {
                            "val" : "0103",
                            "i18n" : "Belegärztliche Behandlung",
                            "-de" : "Belegärztliche Behandlung",
                            "-en" : "Belegärztliche Behandlung"
                        },
                        {
                            "val" : "0104",
                            "i18n" : "Notfall/Vertretung",
                            "-de" : "Notfall/Vertretung",
                            "-en" : "Notfall/Vertretung"
                        }
                    ]
                },
                "ScheinSubgroup_E" : {
                    "type" : "String",
                    "i18n" : "Scheinuntergruppe",
                    "-en" : "Scheinuntergruppe",
                    "-de" : "Scheinuntergruppe",
                    "list" : [
                        {
                            "val" : "00",
                            "i18n" : "ambulante Behandlung",
                            "-de" : "ambulante Behandlung",
                            "-en" : "ambulante Behandlung"
                        },
                        {
                            "val" : "20",
                            "i18n" : "Selbstausstellung",
                            "-de" : "Selbstausstellung",
                            "-en" : "Selbstausstellung"
                        },
                        {
                            "val" : "21",
                            "i18n" : "Auftragsleistungen",
                            "-de" : "Auftragsleistungen",
                            "-en" : "Auftragsleistungen"
                        },
                        {
                            "val" : "23",
                            "i18n" : "Konsiliaruntersuchung",
                            "-de" : "Konsiliaruntersuchung",
                            "-en" : "Konsiliaruntersuchung"
                        },
                        {
                            "val" : "24",
                            "i18n" : "Mit-/Weiterbehandlung",
                            "-de" : "Mit-/Weiterbehandlung",
                            "-en" : "Mit-/Weiterbehandlung"
                        },
                        {
                            "val" : "26",
                            "i18n" : "Stationäre Mitbehandlung, Vergütung nach ambulanten Grundsätzen",
                            "-de" : "Stationäre Mitbehandlung, Vergütung nach ambulanten Grundsätzen",
                            "-en" : "Stationäre Mitbehandlung, Vergütung nach ambulanten Grundsätzen"
                        },
                        {
                            "val" : "27",
                            "i18n" : "Überweisungs-/Abrechnungsschein für Laboratoriumsuntersuchungen als Auftragsleistung",
                            "-de" : "Überweisungs-/Abrechnungsschein für Laboratoriumsuntersuchungen als Auftragsleistung",
                            "-en" : "Überweisungs-/Abrechnungsschein für Laboratoriumsuntersuchungen als Auftragsleistung"
                        },
                        {
                            "val" : "28",
                            "i18n" : "Anforderungsschein für Laboratoriumsuntersuchungen bei Laborgemeinschaften",
                            "-de" : "Anforderungsschein für Laboratoriumsuntersuchungen bei Laborgemeinschaften",
                            "-en" : "Anforderungsschein für Laboratoriumsuntersuchungen bei Laborgemeinschaften"
                        },
                        {
                            "val" : "30",
                            "i18n" : "Belegärztliche Behandlung",
                            "-de" : "Belegärztliche Behandlung",
                            "-en" : "Belegärztliche Behandlung"
                        },
                        {
                            "val" : "31",
                            "i18n" : "Belegärztliche Mitbehandlung",
                            "-de" : "Belegärztliche Mitbehandlung",
                            "-en" : "Belegärztliche Mitbehandlung"
                        },
                        {
                            "val" : "32",
                            "i18n" : "Urlaubs-/Krankheitsvertretung bei belegärztlicher Behandlung",
                            "-de" : "Urlaubs-/Krankheitsvertretung bei belegärztlicher Behandlung",
                            "-en" : "Urlaubs-/Krankheitsvertretung bei belegärztlicher Behandlung"
                        },
                        {
                            "val" : "41",
                            "i18n" : "Ärztlicher Notfalldienst",
                            "-de" : "Ärztlicher Notfalldienst",
                            "-en" : "Ärztlicher Notfalldienst"
                        },
                        {
                            "val" : "42",
                            "i18n" : "Urlaubs-/Krankheitsvertretung",
                            "-de" : "Urlaubs-/Krankheitsvertretung",
                            "-en" : "Urlaubs-/Krankheitsvertretung"
                        },
                        {
                            "val" : "43",
                            "i18n" : "Notfall",
                            "-de" : "Notfall",
                            "-en" : "Notfall"
                        },
                        {
                            "val" : "44",
                            "i18n" : "Notfalldienst mit Taxi",
                            "-de" : "Notfalldienst mit Taxi",
                            "-en" : "Notfalldienst mit Taxi"
                        },
                        {
                            "val" : "45",
                            "i18n" : "Notarzt-/Rettungswagen",
                            "-de" : "Notarzt-/Rettungswagen",
                            "-en" : "Notarzt-/Rettungswagen"
                        },
                        {
                            "val" : "46",
                            "i18n" : "Zentraler Notfalldienst",
                            "-de" : "Zentraler Notfalldienst",
                            "-en" : "Zentraler Notfalldienst"
                        }
                    ]
                },
                ScheinTransferType_E: {
                    "type" : "String",
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.GKVSchein_T.scheinTransferType.i18n' )
                    },
                    i18n: i18n( 'activity-schema.GKVSchein_T.scheinTransferType.i18n' ),
                    "list" : [
                        {
                            "val" : "",
                            "i18n" : i18n( 'activity-schema.ScheinTransferType_E..i18n' ),
                            "-de" : "Bitte wählen...",
                            "-en" : "Please choose..."
                        },
                        {
                            "val" : "1",
                            "i18n" : i18n( 'activity-schema.ScheinTransferType_E.1.i18n' ),
                            "-de" : "TSS-Terminfall",
                            "-en" : "TSS-Terminfall"
                        },
                        {
                            "val" : "2",
                            "i18n" : i18n( 'activity-schema.ScheinTransferType_E.2.i18n' ),
                            "-de" : "TSS-Akutfall",
                            "-en" : "TSS-Akutfall"
                        },
                        {
                            "val" : "3",
                            "i18n" : i18n( 'activity-schema.ScheinTransferType_E.3.i18n' ),
                            "-de" : "HA-Vermittlungsfall",
                            "-en" : "HA-Vermittlungsfall"
                        },
                        {
                            "val" : "4",
                            "i18n" : i18n( 'activity-schema.ScheinTransferType_E.4.i18n' ),
                            "-de" : "Offene Sprechstunde",
                            "-en" : "Offene Sprechstunde"
                        },
                        {
                            "val" : "5",
                            "i18n" : i18n( 'activity-schema.ScheinTransferType_E.5.i18n' ),
                            "-de" : "Neupatient",
                            "-en" : "Neupatient"
                        }
                    ]
                },
                "BGSchein_T": {
                    "assignedBgScheinRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.BGSchein_T.assignedBgScheinRef' ),
                        "-en": "BG Schein",
                        "-de": "BG Schein"
                    },
                    "timeOfAccident": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.timeOfAccident' ),
                        "-en": "time of accident",
                        "-de": "Unfalluhrzeit"
                    },
                    "workingHoursStart": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.workingHoursStart' ),
                        "-en": "working hours start",
                        "-de": "Beginn Arbeitszeit"
                    },
                    "workingHoursEnd": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.workingHoursEnd' ),
                        "-en": "working hours end",
                        "-de": "Ende Arbeitszeit"
                    },
                    "dayOfArrival": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.dayOfArrival' ),
                        "-en": "day of arrival",
                        "-de": "eingetroffen in Praxis am"
                    },
                    "timeOfArrival": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.timeOfArrival' ),
                        "-en": "day of arrival",
                        "-de": "eingetroffen in Praxis um"
                    },
                    "dayOfFristTreat": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.BGSchein_T.dayOfFristTreat' ),
                        "-en": "day of frist treat",
                        "-de": "erstmalig behandelt am"
                    },
                    "fristTreatPhysician": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.BGSchein_T.fristTreatPhysician' ),
                        "-en": "by",
                        "-de": "durch"
                    },
                    "accidentCompany": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.accidentCompany' ),
                        "-en": "accident company",
                        "-de": "Unfallbetrieb"
                    },
                    "accidentCompanyStreet": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.accidentCompanyStreet' ),
                        "-en": "street",
                        "-de": "Straße"
                    },
                    "accidentCompanyHouseno": {
                        "default": "",
                        "type": "String",
                        "validate": "Address_T_houseno",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.accidentCompanyHouseno' ),
                        "-en": "House No.",
                        "-de": "Hausnummer"
                    },
                    "accidentCompanyPLZ": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.accidentCompanyPLZ' ),
                        "-en": "ZIP",
                        "-de": "PLZ"
                    },
                    "accidentCompanyCity": {
                        "default": "",
                        "type": "String",
                        "validate": "Address_T_city",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.accidentCompanyCity' ),
                        "-en": "city",
                        "-de": "Stadt"
                    }
                },
                "Schein_T": {
                    "invoiceLogId" : {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "apiv": { v: 2, queryParam: true },
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' )
                        }
                    },
                    "invoiceLogType" : {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' )
                    },
                    // this field is defined twice (Schein & Catalog)
                    "forInsuranceType": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Schein_T.forInsuranceType.i18n' ),
                        "-en": "For Insurance Type",
                        "-de": "für Kostenträger Typ"
                    },
                    "locationFeatures": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Schein_T.locationFeatures.i18n' ),
                        "-en": "Wohnortkennzeichen",
                        "-de": "Wohnortkennzeichen"
                    },
                    "scheinSettledDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Schein_T.scheinSettledDate.i18n' ),
                        "-en": "Settled at",
                        "-de": "Abgerechnet am"
                    },
                    "scheinRemittor": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinRemittor",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinRemittor.i18n' ),
                        "-en": "Referring doctor number",
                        "-de": "Überweiser"
                    },
                    "scheinEstablishment": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinEstablishment",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinEstablishment.i18n' ),
                        "-en": "Referring location",
                        "-de": "Betriebsstätte"
                    },
                    "scheinSpecialisation": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinSpecialisation",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinSpecialisation.i18n' ),
                        "-en": "Specialisation",
                        "-de": "Fachrichtung"
                    },
                    "baseFromSchein":{
                        "complex": "ext",
                        "type": "BillingTrackSchein_T",
                        "lib": types
                    },
                    "scheinFinding": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Schein_T_scheinFinding",
                        i18n: i18n( 'activity-schema.Schein_T.scheinFinding.i18n' ),
                        "-en": "Finding/Medication",
                        "-de": "Befund/Medikation"
                    },
                    "scheinClinicID": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinClinicID.i18n' ),
                        "-en": "Case number KH",
                        "-de": "Fallnummer KH"
                    },
                    "scheinNotes": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.scheinNotes.i18n' ),
                        "-en": "Notes",
                        "-de": "Notizen"
                    },
                    "scheinClinicalTreatmentFrom": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Schein_T_scheinClinicalTreatmentFrom",
                        i18n: i18n( 'activity-schema.Schein_T.scheinClinicalTreatmentFrom.i18n' ),
                        "-en": "From",
                        "-de": "Stationäre Behandlung von"
                    },
                    "scheinClinicalTreatmentTo": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Schein_T_scheinClinicalTreatmentTo",
                        i18n: i18n( 'activity-schema.Schein_T.scheinClinicalTreatmentTo.i18n' ),
                        "-en": "To",
                        "-de": "Stationäre Behandlung bis"
                    },
                    "scheinNextTherapist": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Schein_T_scheinNextTherapist",
                        i18n: i18n( 'activity-schema.Schein_T.scheinNextTherapist.i18n' ),
                        "-en": "Next therapists to physician",
                        "-de": "Weiterbehandelnde Arzt"
                    },
                    "fk4234": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Schein_T.fk4234.i18n' ),
                        "-en": "Anerkannte Psychotherapie",
                        "-de": "Anerkannte Psychotherapie"
                    },
                    "fk4235Set": {
                        "complex": "inc",
                        "type": "Fk4235_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Schein_T.fk4235Set.i18n' ),
                        "-en": "Certificate of recognition",
                        "-de": "Anerkennungsbescheid"
                    },
                    "fk4219": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "kbv.Schein_T_fk4219",
                        i18n: i18n( 'activity-schema.Schein_T.fk4219.i18n' ),
                        "-en": "Überweisung von anderen Ärzten",
                        "-de": "Überweisung von anderen Ärzten"
                    },
                    "continuousIcds": {
                        "default": [],
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Schein_T.continuousIcds.i18n' ),
                        "-en": "Chronic diagnoses",
                        "-de": "Dauerdiagnosen"
                    },
                    "continuousMedications": {
                        "default": [],
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Schein_T.continuousMedications.i18n' ),
                        "-en": "Continuous medications",
                        "-de": "Dauermedikament"
                    },
                    "patientVersionId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Schein_T.patientVersionId.i18n' ),
                        "-en": "patientVersionId",
                        "-de": "patientVersionId"
                    },
                    "invoiceData": {
                        "complex": "inc",
                        "type": "Price_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Schein_T.invoiceData.i18n' ),
                        "-en": "invoiceData",
                        "-de": "invoiceData"
                    },
                    createContinuousDiagnosisOnSave: {
                        type: 'Boolean',
                        default: false,
                        i18n: i18n( 'activity-schema.Activity_T.createContinuousDiagnosisOnSave.i18n' ),
                        "-en": "Copy continuous diagnosis to current case",
                        "-de": "Dauerdiagnosen in aktuellen Fall kopieren"
                    },
                    createContinuousMedicationsOnSave: {
                        type: 'Boolean',
                        default: false,
                        i18n: i18n( 'activity-schema.Activity_T.createContinuousMedicationsOnSave.i18n' ),
                        "-en": "Copy continuous medications to current case",
                        "-de": "Medikamenten in aktuellen Fall kopieren"
                    },

                    "caseNumber": {
                        "type": "String",
                        default: '',
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'InCaseMojit.casefile_detail.label.CASE_NUMBER' ),
                        "-en": "Case number",
                        "-de": "Fall Nummer",
                        "rule-engine": {
                            i18n: i18n( 'InCaseMojit.casefile_detail.label.ACCIDENT_NUMBER' )
                        }
                    },
                    "dayOfAccident": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.BGSchein_T.dayOfAccident' ),
                        "-en": "day of accident",
                        "-de": "Unfalltag"
                    }
                },
                "ScheinReasons_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.ScheinReasons_E.i18n' ),
                    "-en": "Treatment reason",
                    "-de": "Behandlungsgrund",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.' ),
                            "-en": "Please select"
                        },
                        {
                            "val": "DISEASE",
                            "-de": "Krankheit",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.DISEASE' ),
                            "-en": "Disease",
                            lawTypes: ['PRIVATE_CH', "PRIVATE_CH_IVG", "PRIVATE_CH_UVG", "PRIVATE_CH_MVG",  "PRIVATE_CH_VVG"]
                        },
                        {
                            "val": "ACCIDENT",
                            "-de": "Unfall",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.ACCIDENT' ),
                            "-en": "Accident",
                            lawTypes: ['PRIVATE_CH', "PRIVATE_CH_IVG", "PRIVATE_CH_UVG", "PRIVATE_CH_MVG",  "PRIVATE_CH_VVG"]
                        },
                        {
                            "val": "MATERNITY",
                            "-de": "Mutterschaft",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.MATERNITY' ),
                            "-en": "Maternity",
                            lawTypes: ['PRIVATE_CH', "PRIVATE_CH_IVG", "PRIVATE_CH_UVG", "PRIVATE_CH_MVG",  "PRIVATE_CH_VVG"]
                        },
                        {
                            "val": "PREVENTION",
                            "-de": "Verhütung",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.PREVENTION' ),
                            "-en": "Prevention",
                            lawTypes: ['PRIVATE_CH', "PRIVATE_CH_IVG", "PRIVATE_CH_UVG", "PRIVATE_CH_MVG",  "PRIVATE_CH_VVG"]
                        },
                        {
                            "val": "BIRTH_DEFECT",
                            "-de": "Geburtsgebrechen",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.BIRTH_DEFECT' ),
                            "-en": "Birth defect",
                            lawTypes: ['PRIVATE_CH', "PRIVATE_CH_IVG", "PRIVATE_CH_UVG", "PRIVATE_CH_MVG",  "PRIVATE_CH_VVG"]
                        },
                        {
                            "val": "DISABILITY",
                            "-de": "Invalidität",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.DISABILITY' ),
                            "-en": "Disability",
                            lawTypes: ['PRIVATE_CH_IVG']
                        },
                        {
                            "val": "UNKNOWN",
                            "-de": "Unbekannt",
                            i18n: i18n( 'activity-schema.ScheinReasons_E.UNKNOWN' ),
                            "-en": "Unknown",
                            lawTypes: ['PRIVATE_CH_VVG']
                        }
                    ]
                },
                "AMTSStatus_E": {
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.AMTSStatus_E.i18n' )
                    },
                    "default": 100,
                    "type": "Number",
                    i18n: i18n( 'activity-schema.AMTSStatus_E.i18n' ),
                    "list": [
                        {
                            "val": 100,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.100' )
                        },
                        {
                            "val": 200,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.200' )
                        },
                        {
                            "val": 300,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.300' )
                        },
                        {
                            "val": 400,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.400' )
                        },
                        {
                            "val": 500,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.500' )
                        },
                        {
                            "val": 600,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.600' )
                        },
                        {
                            "val": 700,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.700' )
                        },
                        {
                            "val": 800,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.800' )
                        },
                        {
                            "val": 900,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.900' )
                        },
                        {
                            "val": 1000,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1000' )
                        },
                        {
                            "val": 1100,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1100' )
                        },
                        {
                            "val": 1200,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1200' )
                        },
                        {
                            "val": 1300,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1300' )
                        },
                        {
                            "val": 1400,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1400' )
                        },
                        {
                            "val": 1500,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1500' )
                        },
                        {
                            "val": 1600,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1600' )
                        },
                        {
                            "val": 1700,
                            i18n: i18n( 'activity-schema.AMTSStatus_E.1700' )
                        }
                    ]
                },
                "DebtCollection_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.DebtCollection_E.i18n' ),
                    "-en": "Debt Collection",
                    "-de": "Inkasso",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen",
                            i18n: i18n( 'activity-schema.DebtCollection_E.' ),
                            "-en": "Please select"
                        },
                        {
                            "val": "MEDNEO",
                            "-de": "Medneo",
                            i18n: i18n( 'activity-schema.DebtCollection_E.MEDNEO' ),
                            "-en": "Medneo"
                        },
                        {
                            "val": "PRAXIS",
                            "-de": "Praxis/Arzt",
                            i18n: i18n( 'activity-schema.DebtCollection_E.PRAXIS' ),
                            "-en": "Practice"
                        },
                        {
                            "val": "VS",
                            "-de": "Verrechnungsstelle",
                            i18n: i18n( 'activity-schema.DebtCollection_E.VS' ),
                            "-en": "Verrechnungsstelle"
                        }
                    ]
                },
                "Fk4235_T": {
                    "fk4235": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Schein_T_fk4235",
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4235.i18n' ),
                        "-en": "Date recognized by administrative",
                        "-de": "Datum des Anerkennungsbescheides"
                    },
                    "fk4247": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Schein_T_fk4247",
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4247.i18n' ),
                        "-en": "Application date of the certificate of recognition",
                        "-de": "Antragsdatum des Anerkennungsbescheid"
                    },
                    "fk4250": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4250.i18n' ),
                        "-en": "Kombinationsbehandlung aus Einzel- und Gruppentherapie",
                        "-de": "Kombinationsbehandlung aus Einzel- und Gruppentherapie"
                    },
                    "fk4251Set": {
                        "complex": "inc",
                        "type": "Fk4251Set_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4251Set.i18n' ),
                        "-en": "Durchführungsart der Kombinationsbehandlung",
                        "-de": "Durchführungsart der Kombinationsbehandlung"
                    },
                    "fk4252": {
                        "type": "Number",
                        "validate": "kbv.Schein_T_fk4252",
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4252.i18n' ),
                        "-en": "Gesamtanzahl bewilligter Therapieeinheiten für den Versicherten",
                        "-de": "Gesamtanzahl bewilligter Therapieeinheiten für den Versicherten"
                    },
                    "fk4255": {
                        "type": "Number",
                        "validate": "kbv.Schein_T_fk4255",
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4255.i18n' ),
                        "-en": "Gesamtanzahl bewilligter Therapieeinheiten für die Bezugsperson",
                        "-de": "Gesamtanzahl bewilligter Therapieeinheiten für die Bezugsperson"
                    },
                    "fk4299": {
                        "type": "String",
                        "validate": "Physician_T_officialNo",
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4299.i18n' ),
                        "-en": "Lebenslange Arztnummer (LANR) des Vertragspsychotherapeuten",
                        "-de": "Lebenslange Arztnummer (LANR) des Vertragspsychotherapeuten"
                    },
                    "fk4244Set": { // Versicherter
                        "complex": "inc",
                        "type": "Fk4244_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4244Set.i18n' ),
                        "-en": "services",
                        "-de": "Leistungen"
                    },
                    "fk4256Set": { // Bezugsperson
                        "complex": "inc",
                        "type": "Fk4244_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Fk4235_T.fk4244Set.i18n' ),
                        "-en": "services",
                        "-de": "Leistungen"
                    },
                    "finishedWithoutPseudoCode": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Fk4235_T.finishedWithoutPseudoCode.i18n' ),
                        "-en": "No termination notification (pseudo-GOPen 88130 or 88131) is transmitted. The health insurance company was informed about another way!",
                        "-de": "Es wird keine Beendigungsmitteilung (Pseudo-GOPen 88130 oder 88131) übermittelt. Die Krankenkasse wurde über einen anderen Weg informiert!"
                    },
                    "pseudoGop": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Fk4235_T.pseudoGop.i18n' )
                    },
                    "pseudoGopId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Fk4235_T.pseudoGopId.i18n' )
                    }
                },
                "Fk4244_T": {
                    "fk4244": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Fk4244_T.fk4244.i18n' ),
                        "-en": "Bewilligte Leistung",
                        "-de": "Bewilligte Leistung"
                    },
                    "fk4246": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Schein_T_fk4246",
                        i18n: i18n( 'activity-schema.Fk4244_T.fk4246.i18n' ),
                        "-en": "Number of contracts in progress",
                        "-de": "Anzahl abgerechneter Leistungen"
                    },
                    "fk4246Offset": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Schein_T_fk4246Offset",
                        i18n: i18n( 'activity-schema.Fk4244_T.fk4246Offset.i18n' ),
                        "-en": "Initial number of contracts in progress",
                        "-de": "Initiale Anzahl abgerechneter Leistungen"
                    },
                    /**
                        * @deprecated still needed to fix old BL on copy
                        */
                    "fk4245": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Fk4244_T.fk4245.i18n' ),
                        "-en": "Number of approved services",
                        "-de": "Anzahl bewilligter Leistungen"
                    }
                },
                "Fk4251Set_T": {
                    "fk4251": {
                        "complex": "eq",
                        "type": "Fk4251_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Fk4251Set_T.fk4251.i18n' ),
                        "-en": "Durchführungsart der Kombinationsbehandlung",
                        "-de": "Durchführungsart der Kombinationsbehandlung"
                    }
                },
                "Fk4251_E": {
                    "type": "String",
                    "default": "",
                    i18n: i18n( 'activity-schema.Fk4251_E.i18n' ),
                    "-en": "Durchführungsart der Kombinationsbehandlung",
                    "-de": "Durchführungsart der Kombinationsbehandlung",
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.Fk4251_E.' ),
                            "-en": "Please Choose ...",
                            "-de": "Bitte wählen ..."
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.Fk4251_E.1.i18n' ),
                            "-en": "Alleinige Durchführung mit überwiegend Einzeltherapie",
                            "-de": "Alleinige Durchführung mit überwiegend Einzeltherapie"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.Fk4251_E.2.i18n' ),
                            "-en": "Alleinige Durchführung mit überwiegend Gruppentherapie",
                            "-de": "Alleinige Durchführung mit überwiegend Gruppentherapie"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.Fk4251_E.3.i18n' ),
                            "-en": "Einzeltherapie-Anteil bei Durchführung durch zwei Therapeuten",
                            "-de": "Einzeltherapie-Anteil bei Durchführung durch zwei Therapeuten"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.Fk4251_E.4.i18n' ),
                            "-en": "Gruppentherapie-Anteil bei Durchführung durch zwei Therapeuten",
                            "-de": "Gruppentherapie-Anteil bei Durchführung durch zwei Therapeuten"
                        }
                    ]
                },
                "Fk5011_T": {
                    "fk5011": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "kbv.Fk5011_T_fk5011",
                        i18n: i18n( 'activity-schema.Fk5011_T.fk5011.i18n' ),
                        "-en": "Material costs designation",
                        "-de": "Sachkosten-Bezeichnung"
                    }
                },
                "Fk5012_T": {
                    "fk5012": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "kbv.Fk5012_T_fk5012",
                        i18n: i18n( 'activity-schema.Fk5012_T.fk5012.i18n' ),
                        "-en": "Material costs in cents",
                        "-de": "Sachkosten/Materialkosten in Cent"
                    },
                    "fk5074": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Fk5012_T.fk5074.i18n' ),
                        "-en": "Name Hersteller/ Lieferant",
                        "-de": "Name Hersteller/ Lieferant"
                    },
                    "fk5075": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Fk5012_T.fk5075.i18n' ),
                        "-en": "Artikel-/ Modellnummer",
                        "-de": "Artikel-/ Modellnummer"
                    },
                    "fk5011Set": {
                        "complex": "inc",
                        "type": "Fk5011_T",
                        "validate": "kbv.Fk5012_T_fk5011Set",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Fk5012_T.fk5011Set.i18n' ),
                        "-en": "Designations",
                        "-de": "Bezeichnungen"
                    }
                },
                "Fk5020_T": {
                    "fk5020": {
                        "default": false,
                        "type": "Boolean",
                        "validate": "kbv.Fk5020_T_fk5020",
                        i18n: i18n( 'activity-schema.Fk5020_T.fk5020.i18n' ),
                        "-en": "Repeat Examination",
                        "-de": "Wiederholungsuntersuchung"
                    },
                    "fk5021": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Fk5020_T_fk5021",
                        i18n: i18n( 'activity-schema.Fk5020_T.fk5021.i18n' ),
                        "-en": "Year of last cancer screening test",
                        "-de": "Jahr der letzten Krebsfrüherkennungsuntersuchung"
                    }
                },
                "Fk5035_T": {
                    "fk5035": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Fk5035_T_fk5035",
                        i18n: i18n( 'activity-schema.Fk5035_T.fk5035.i18n' ),
                        "-en": "OP-Key",
                        "-de": "OP-Schlüssel",
                        "rule-engine": {
                            useValidator: true
                        }
                    },
                    "fk5041": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Fk5035_T_fk5041",
                        i18n: i18n( 'activity-schema.Fk5035_T.fk5041.i18n' ),
                        "-en": "Site Localization OPS",
                        "-de": "Seitenlokalisation OPS"
                    },
                    "catalogEntry": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Fk5035_T.catalogEntry.i18n' ),
                        "-en": "catalogEntry",
                        "-de": "catalogEntry"
                    },
                    "seqs": {
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: true }
                    }
                },
                "Fk5036_T": {
                    "fk5036": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        "validate": "kbv.Fk5036_T_fk5036",
                        i18n: i18n( 'activity-schema.Fk5036_T.fk5036.i18n' ),
                        "-en": "GNR as a justification",
                        "-de": "GNR als Begründung",
                        "rule-engine": {}
                    }
                },
                "Fk5042_T": {
                    "fk5042": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Fk5042_T_fk5042",
                        i18n: i18n( 'activity-schema.Fk5042_T.fk5042.i18n' ),
                        "-en": "Quantitative Indication KM/AM",
                        "-de": "Mengenangabe KM/AM"
                    },
                    "fk5043": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Fk5042_T_fk5043",
                        i18n: i18n( 'activity-schema.Fk5042_T.fk5043.i18n' ),
                        "-en": "Unit KM / AM",
                        "-de": "Maßeinheit KM/AM"
                    }
                },
                "Fk5018_E": {
                    "type": "String",
                    "default": "",
                    i18n: i18n( 'activity-schema.Fk5018_E.i18n' ),
                    "-en": "Zone at home visit",
                    "-de": "Zone bei Hausbesuch",
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.Fk5018_E.' ),
                            "-en": "Please Choose ...",
                            "-de": "Bitte wählen ..."
                        },
                        {
                            "val": "Z1",
                            i18n: i18n( 'activity-schema.Fk5018_E.Z1' ),
                            "-en": "Z1",
                            "-de": "Z1"
                        },
                        {
                            "val": "Z2",
                            i18n: i18n( 'activity-schema.Fk5018_E.Z2' ),
                            "-en": "Z2",
                            "-de": "Z2"
                        },
                        {
                            "val": "Z3",
                            i18n: i18n( 'activity-schema.Fk5018_E.Z3' ),
                            "-en": "Z3",
                            "-de": "Z3"
                        },
                        {
                            "val": "Z4",
                            i18n: i18n( 'activity-schema.Fk5018_E.Z4' ),
                            "-en": "Z4",
                            "-de": "Z4"
                        }
                    ]
                },
                "Activity_T": {
                    "attachments": {
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Activity_T.attachments.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Attachments",
                        "-de": "Anhänge"
                    },
                    "attachedMedia": {
                        "complex": "inc",
                        "type": "AttachedMedia_T",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "attachedMediaTags": {
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Activity_T.attachedMediaTags.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Tags",
                        "-de": "Tags"
                    },
                    "actType": {
                        "complex": "eq",
                        "type": "Activity_E",
                        "lib": types,
                        "required": true
                    },
                    "pressButton": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.pressButton.i18n' )
                    },
                    "subType": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        "validate": "kbv.KBVUTILITY_subType",
                        i18n: i18n( 'activity-schema.Activity_T.subType.i18n' ),
                        "rule-engine": {},
                        "-en": "subType",
                        "-de": "Subtyp"
                    },
                    "timestamp": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: true },
                        "validate": "pastOrPresentDate",
                        i18n: i18n( 'activity-schema.Activity_T.timestamp.i18n' ),
                        "required": true,
                        "rule-engine": {},
                        "-en": "Date",
                        "-de": "Datum"
                    },
                    "daySeparation": {
                        "type": "String",
                        "validate": "timeNotRequired",
                        i18n: i18n( 'activity-schema.Activity_T.daySeparation.i18n' ),
                        "-en": "Day Separation",
                        "-de": "Tagtrennung",
                        "rule-engine": {
                            allowedOperators: ['$exists']
                        }
                    },
                    "time": {
                        "type": "String",
                        "default": "",
                        "validate": "timeNotRequired",
                        i18n: i18n( 'activity-schema.Activity_T.time.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.time.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.time.i18n' ),
                        "rule-engine": {
                            i18n: i18n( 'InCaseMojit.activity_model_clientJS.placeholder.TIME' ),
                            allowedOperators: ['$exists']
                        }
                    },
                    "patientId": {
                        "required": true,
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        "ref": "patient",
                        i18n: i18n( 'activity-schema.Activity_T.patientId.i18n' ),
                        "-en": "Patient ID",
                        "-de": "Patienten-ID",
                        "rule-engine": {
                            i18n: "Patient",
                            widget: "PatientSelect"
                        }
                    },
                    "employeeId": {
                        "required": true,
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.employeeId.i18n' ),
                        "-en": "employee ID",
                        "-de": "Arzt-nr"
                    },
                    "backupEmployeeIds": {
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.employeeId.i18n' ),
                        "-en": "backup employee ID",
                        "-de": "Arzt-nr-Sicherung"
                    },
                    "employeeName": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.employeeName.i18n' ),
                        "-en": "employee",
                        "-de": "Arzt",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Activity_T.employeeNameRule.i18n' )
                        }
                    },
                    "employeeInitials": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'employee-schema.Employee_T.initials.i18n' ),
                        "-en": "Initials",
                        "-de": "Kürzel"
                    },
                    "locationId": {
                        "required": true,
                        "type": "ObjectId",
                        "apiv": { v: 2, queryParam: true },
                        "ref": "location",
                        i18n: i18n( 'activity-schema.Activity_T.locationId.i18n' ),
                        "-en": "locationId",
                        "-de": "locationId",
                        "rule-engine": {}
                    },
                    "external": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.Activity_T.external.i18n' ),
                        "-en": "external",
                        "-de": "external"
                    },
                    "externalRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.externalRef.i18n' ),
                        "-en": "externalRef",
                        "-de": "externalRef"
                    },
                    "copyRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.copyRef.i18n' ),
                        "-en": "copyRef",
                        "-de": "copyRef"
                    },
                    "content": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.content.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.content.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.content.i18n' ),
                        "rule-engine": {}
                    },
                    "mirrorActivityId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.mirrorActivityId.i18n' ),
                        "-en": "mirrorActivityId",
                        "-de": "mirrorActivityId"
                    },
                    "mirrorCaseFolderType": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true, readOnly: true },
                        i18n: i18n( 'activity-schema.Activity_T.mirrorCaseFolderType.i18n' ),
                        "-en": "mirrorCaseFolderType",
                        "-de": "mirrorCaseFolderType"
                    },
                    "userContent": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Activity_T.userContent.i18n' ),
                        "-en": "Content",
                        "-de": "Inhalt",
                        "rule-engine": {}
                    },
                    "mediaImportError": {
                        "default": "",
                        "type": "Mixed",
                        i18n: i18n( 'activity-schema.Activity_T.mediaImportMsg.i18n' )
                    },
                    "partnerInfo": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: true, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Activity_T.userContent.i18n' ),
                        "-en": "Partner Info",
                        "-de": "Partner Infos"
                    },
                    "patientShort": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.patientShort.i18n' ),
                        "-en": "Patient Short",
                        "-de": "Patient Kurz"
                    },
                    "comment": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.comment.i18n' ),
                        "-en": "comment",
                        "-de": "Kommentar"
                    },
                    "explanations": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Activity_T.explanations.i18n' ),
                        "-en": "Explanations",
                        "-de": "Erläuterungen",
                        "rule-engine": {}
                    },
                    "status": {
                        "default": "CREATED",
                        "complex": "eq",
                        "type": "ActStatus_E",
                        "apiv": { v: 2, queryParam: true, readOnly: true, countryMode: ["D"] },
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.status.i18n' ),
                        "-en": "status",
                        "-de": "Status"
                    },
                    "editor": {
                        "complex": "inc",

                        "type": "EmployeeShort_T",
                        "lib": "employee",
                        i18n: i18n( 'activity-schema.Activity_T.editor.i18n' ),
                        "-en": "editor",
                        "-de": "editor"
                    },
                    "activities": {             //  array of _id strings of other activities
                        "type": [
                            "String"
                        ],
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Activity_T.activities.i18n' ),
                        "-en": "activities",
                        "-de": "activities"
                    },
                    "referencedBy": {           //  array of _id strings, reciprocal to activities
                        "type": [
                            "String"
                        ],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.activities.i18n' ),
                        "-en": "referenced by",
                        "-de": "referenziert von",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Activity_T.activities.rule-engine' ),
                            "type": "String"
                        }
                    },
                    "formId": {                 //  canonical _id of a formtemplate
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: true, readOnly: true },
                        i18n: i18n( 'activity-schema.Activity_T.formId.i18n' ),
                        "-en": "formId",
                        "-de": "formId"
                    },
                    "formVersion": { //  _id of a specific formtemplateversion (global, used to hold version number which was local)
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: true, readOnly: true },
                        i18n: i18n( 'activity-schema.Activity_T.formVersion.i18n' ),
                        "-en": "formVersion",
                        "-de": "formVersion"
                    },
                    "formPdf": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.formPdf.i18n' ),
                        "-en": "PDF Media Id",
                        "-de": "PDF Media Id"
                    },
                    "formLang": {
                        "default": "de",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.formLang.i18n' ),
                        "-en": "Form language",
                        "-de": "Sprache Formular"
                    },
                    "formGender": {
                        "default": "n",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.formGender.i18n' ),
                        "-en": "Form Gender",
                        "-de": "Geschlecht Formular"
                    },
                    "u_extra": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.u_extra.i18n' ),
                        "-en": "user-definedExtras",
                        "-de": "benutzerdefinierteExtras"
                    },
                    "caseFolderId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.caseFolderId.i18n' ),
                        "apiv": { v: 2, queryParam: true },
                        "-en": "caseFolderId",
                        "-de": "caseFolderId"
                    },
                    "patientName": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        "-en": "patientName",
                        "-de": "patientName"
                    },
                    "patientLastName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.patientLastName.i18n' )
                    },
                    "patientFirstName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.patientFirstName.i18n' )
                    },
                    "patientNo": {
                        "type": "String",
                        i18n: i18n( 'patient-schema.Patient_T.patientNo.i18n' )
                    },
                    "patientKbvDob": {
                        "type": "String",
                        i18n: i18n( 'person-schema.Person_T.kbvDob' )
                    },
                    "apkState": {
                        "default": "IN_PROGRESS",
                        "complex": "eq",
                        "type": "ApkState_E",
                        "apiv": { v: 2, queryParam: true, countryMode: ["D"] },
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.apkState.i18n' ),
                        "-en": "APK",
                        "-de": "APK"
                    },
                    "sentToMediport": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Activity_T.sentToMediport.i18n' )
                    },
                    "asvTeamnumber": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.asvTeamnumber.i18n' ),
                        "-en": "ASV-Teamnumber",
                        "-de": "ASV-Teamnummer des Vertragsarztes"
                    },
                    "careComment": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.careComment.i18n' ),
                        "-en": "Care Comment",
                        "-de": "Care Kommentar"
                    },
                    "caseFolderDisabled": { // currently only used for eDMP activities / casefolders
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Activity_T.caseFolderDisabled.i18n' ),
                        "-en": "caseFolderDisabled",
                        "-de": "caseFolderDisabled"
                    },
                    "notDeletable": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Activity_T.notDeletable.i18n' ),
                        "-en": "Not deletable",
                        "-de": "Nicht löschbar"
                    },
                    "cancelReason": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.cancelReason.i18n' ),
                        "-en": "Reason for cancellation",
                        "-de": "Stornierungsgrund"
                    },
                    "autoGenID": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.autoGenID.i18n' ),
                        "-en": "autoGenID",
                        "-de": "autoGenID"
                    },
                    "locationName": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Activity_T.locationName.i18n' ),
                        "-en": "locationName",
                        "-de": "locationName"
                    },
                    "lastChanged": {
                        "type": "Date",
                        i18n: i18n( 'UserMgmtMojit.lastChanged.i18n' ),
                        "-en": "last changed",
                        "-de": "zuletzt geändert"
                    },
                    "unlinkedMirrorIds": {
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Activity_T.unlinkedMirrorIds.i18n' ),
                        "-en": "unlinkedMirrorIds",
                        "-de": "unlinkedMirrorIds"
                    },
                    "printCount": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Activity_T.printCount.i18n' ),
                        "-en": "print count",
                        "-de": "Druckanzahl"
                    },
                    "savedEmails": {
                        "type": ["ObjectId"]
                    }
                },
                "AttachedMedia_T": {
                    "mediaId": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.AttachedMedia_T.mediaId.i18n' ),
                        "-en": i18n( 'activity-schema.AttachedMedia_T.mediaId.i18n' ),
                        "-de": i18n( 'activity-schema.AttachedMedia_T.mediaId.i18n' )
                    },
                    "contentType": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.AttachedMedia_T.contentType.i18n' ),
                        "-en": i18n( 'activity-schema.AttachedMedia_T.contentType.i18n' ),
                        "-de": i18n( 'activity-schema.AttachedMedia_T.contentType.i18n' )
                    },
                    "caption": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.AttachedMedia_T.caption.i18n' ),
                        "-en": i18n( 'activity-schema.AttachedMedia_T.caption.i18n' ),
                        "-de": i18n( 'activity-schema.AttachedMedia_T.caption.i18n' )
                    },
                    "title": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.AttachedMedia_T.title.i18n' ),
                        "-en": i18n( 'activity-schema.AttachedMedia_T.title.i18n' ),
                        "-de": i18n( 'activity-schema.AttachedMedia_T.title.i18n' )
                    },
                    "malwareWarning": {
                        "type": "String",
                        i18n: i18n( 'media-schema.Media_T.malwareWarning' ),
                        "-en": i18n( 'media-schema.Media_T.malwareWarning' ),
                        "-de": i18n( 'media-schema.Media_T.malwareWarning' )
                    }
                },
                "Form_T": {
                    "base_VerordKrankenhaus_T": {
                        "complex": "ext",
                        "type": "VerordKrankenhaus_T",
                        "lib": types
                    },
                    "base_KinderKrankengeld_T": {
                        "complex": "ext",
                        "type": "KinderKrankengeld_T",
                        "lib": types
                    },
                    "base_PTV11_T": {
                        "complex": "ext",
                        "type": "PTV11_T",
                        "lib": types
                    },
                    "base_MedData_T": {
                        "complex": "ext",
                        "type": "MedData_T",
                        "lib": types
                    }
                },
                "Quotation_T": {
                    "_modifiedQuotationTreatments": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T._modifiedQuotationTreatments.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "String",
                        "-de": "String"
                    }
                },
                "AU_T": {
                    "auType": {
                        "complex": "eq",
                        "type": "AuType_E",
                        "lib": types
                    },
                    "erstBesch": {
                        "default": true,
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.erstBesch.i18n' ),
                        "-en": "Erstbescheinigung",
                        "-de": "Erstbescheinigung"
                    },
                    "folgeBesc": {
                        "type": "boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.AU_T.folgeBesc.i18n' ),
                        "-en": "Folgebescheinigung",
                        "-de": "Folgebescheinigung"
                    },
                    "arbeitsunfall": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.arbeitsunfall.i18n' ),
                        "-en": "Arbeitsunfall",
                        "-de": "Arbeitsunfall"
                    },
                    "durchgangsarzt": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.durchgangsarzt.i18n' ),
                        "-en": "Durchgangsarzt",
                        "-de": "Durchgangsarzt"
                    },
                    "auVon": {
                        "type": "Date",
                        "validate": "kbv.Au_T_auVon",
                        i18n: i18n( 'activity-schema.AU_T.auVon.i18n' ),
                        "-en": "AU von",
                        "-de": "AU von"
                    },
                    "auVorraussichtlichBis": {
                        "type": "Date",
                        "validate": "kbv.AU_T_auVorraussichtlichBis",
                        i18n: i18n( 'activity-schema.AU_T.auVorraussichtlichBis.i18n' ),
                        "-en": "AU voraussichtlich bis",
                        "-de": "AU voraussichtlich bis"
                    },
                    "festgestelltAm": {
                        "type": "Date",
                        "validate": "kbv.AU_T_festgestelltAm",
                        i18n: i18n( 'activity-schema.AU_T.festgestelltAm.i18n' ),
                        "-en": "Festgestellt am",
                        "-de": "Festgestellt am"
                    },
                    "sonstigerUnf": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.sonstigerUnf.i18n' ),
                        "-en": "sonstiger Unfall, Unfallfolgen",
                        "-de": "sonstiger Unfall, Unfallfolgen"
                    },
                    "bvg": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.VerordKrankenhaus_T.bvg.i18n' ),
                        "-en": "BVG",
                        "-de": "BVG"
                    },
                    "rehab": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.rehab.i18n' ),
                        "-en": "Leistung zur medizinischen Rehabilitation",
                        "-de": "Leistung zur medizinischen Rehabilitation"
                    },
                    "reintegration": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.reintegration.i18n' ),
                        "-en": "stufenweise Wiedereingliederung",
                        "-de": "stufenweise Wiedereingliederung"
                    },
                    "massnahmen": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.AU_T.massnahmen.i18n' ),
                        "-en": "Sonstige Maßnahmen",
                        "-de": "Sonstige Maßnahmen"
                    },
                    "diagnosesAdd": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.AU_T.diagnosesAdd.i18n' ),
                        "-en": "Hinweise zur Diagnose",
                        "-de": "Hinweise zur Diagnose"
                    },
                    "krankengeld": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.krankengeld.i18n' ),
                        "-en": "ab 7. AU-Woche oder sonstiger Krankengeldfall",
                        "-de": "ab 7. AU-Woche oder sonstiger Krankengeldfall"
                    },
                    "endBesch": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.AU_T.endBesch.i18n' ),
                        "-en": "Endbescheinigung",
                        "-de": "Endbescheinigung"
                    }
                },
                "BaseETS_T": {
                    "eTSArrangementCode": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.BaseETS_T.eTSArrangementCode.i18n' ),
                        "-en": "Arrangement Code",
                        "-de": "Vermittlungscode"
                    },
                    "eTSArrangementCodeRequestMessageId": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.BaseETS_T.eTSArrangementCodeRequestMessageId.i18n' ),
                        "-en": "eTSArrangementCodeRequestMessageId",
                        "-de": "eTSArrangementCodeRequestMessageId"
                    },
                    "eTSAErrorMessage": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.BaseETS_T.eTSAErrorMessage.i18n' ),
                        "-en": "eTSAErrorMessage",
                        "-de": "eTSAErrorMessage"
                    }
                },
                "Referral_T": {
                    "fk8401": {
                        "complex": "eq",
                        "type": "fk8401_E",
                        i18n: i18n( 'activity-schema.fk8401_E.i18n' ),
                        "-en": "Befundart",
                        "-de": "Befundart",
                        "lib": types
                    },
                    // nur ÜBERW
                    "untersArt": {
                        "complex": "eq",
                        "type": "UntersArt_E",
                        "lib": types
                    },
                    "auBis": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Referral_T.auBis.i18n' ),
                        "-en": "AU bis",
                        "-de": "AU bis"
                    },
                    "datumOP": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Referral_T.datumOP.i18n' ),
                        "-en": "Op date (referral)",
                        "-de": "OP Datum Überweisung"
                    },
                    "ueberwAn": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.Referral_T.ueberwAn.i18n' ),
                        "-en": "Überweisung an",
                        "-de": "Überweisung an"
                    },
                    "ueberwAnCodeSystem": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.Referral_T.ueberwAnCodeSystem.i18n' ),
                        "-en": "Überweisung an (CodeSystem)",
                        "-de": "Überweisung an (CodeSystem)"
                    },
                    "asvTeamReferral": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.Referral_T.asvTeamReferral.i18n' ),
                        "-en": "ASV Team Referral",
                        "-de": "ASV Team Überweisung"
                    },
                    "diagnosesText": {
                        "type": "String",
                        "default": "",
                        i18n: i18n( 'activity-schema.Referral_T.diagnosesText.i18n' ),
                        "-en": "Disagnoses Text",
                        "-de": "Diagnostiziert Text"
                    },
                    "medicationsText": {
                        "type": "String",
                        "default": "",
                        "validate": "kbv.REFERRAL_single_line",
                        i18n: i18n( 'activity-schema.Referral_T.medicationsText.i18n' ),
                        "-en": "Medications Text",
                        "-de": "Medikamente Text"
                    },
                    "findingsText": {
                        "type": "String",
                        "default": "",
                        "validate": "kbv.REFERRAL_single_line",
                        i18n: i18n( 'activity-schema.Referral_T.findingsText.i18n' ),
                        "-en": "Findings Text",
                        "-de": "Befund Text"
                    }
                },
                "ETSReferral_T": {
                    "urgency": {
                        "complex": "eq",
                        "type": "ETSReferralUrgency_E",
                        i18n: i18n( 'activity-schema.ETSReferral_T.urgency.i18n' ),
                        "-en": "Urgency",
                        "-de": "Dringlichkeit",
                        "lib": types
                    },
                    "eTSAdditionalQualifications": {
                        "complex": "inc",
                        i18n: i18n( 'activity-schema.ETSReferral_T.eTSAdditionalQualifications.i18n' ),
                        "type": "ETSAdditionalQualifications_T",
                        "-en": "Zusätzliche Qualifikationen",
                        "-de": "Zusätzliche Qualifikationen",
                        "lib": types
                    }
                },
                ETSAdditionalQualifications_T: {
                    code: {
                        i18n: i18n( 'activity-schema.ETSAdditionalQualifications_T.code.i18n' ),
                        type: 'String'
                    },
                    display: {
                        i18n: i18n( 'activity-schema.ETSAdditionalQualifications_T.display.i18n' ),
                        type: 'String'
                    },
                    system: {
                        i18n: i18n( 'activity-schema.ETSAdditionalQualifications_T.display.i18n' ),
                        type: 'String'
                    }
                },
                "Labor_T": {
                    "labRequestId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Labor_T.labRequestId.i18n' ),
                        "-en": "Request Id.",
                        "-de": "Anforderungs-Ident."
                    }
                },
                "LabData_T": {
                    "labText": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.LabData_T.labText.i18n' ),
                        "-en": "Lab Text",
                        "-de": "Laborbericht"
                    },
                    "labEntries": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.labEntries.i18n' ),
                        "-en": "Simplified Lab Data",
                        "-de": "Labordaten"
                    },
                    "l_extra": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.l_extra.i18n' ),
                        "-en": "user-defined Extras",
                        "-de": "benutzerdefinierteExtras"
                    },
                    "l_version": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.l_version.i18n' ),
                        "-en": "Extra Version Data",
                        "-de": "Extra Version Data"
                    },
                    labLogTimestamp: {
                        type: "Date",
                        apiv: { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Activity_T.timestamp.i18n' ),
                        required: false,
                        default: ""
                    }
                },
                "LabRequestReferral_T": {
                    "fk4204": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4204.i18n' ),
                        "-en": "Eingeschränkter Leistungsanspruch",
                        "-de": "Eingeschränkter Leistungsanspruch"
                    },
                    "behandlungGemaess": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Referral_T.behandlungGemaess.i18n' ),
                        "-en": "Behandlung gemäß § 116b SGB V",
                        "-de": "Behandlung gemäß § 116b SGB V"
                    },
                    "abnDatumZeit": {
                        "type": "date",
                        i18n: i18n( 'activity-schema.Referral_T.abnDatumZeit.i18n' ),
                        "-en": "Abnahmedatum/Abnahmezeit",
                        "-de": "Abnahmedatum/Abnahmezeit"
                    },
                    "auftrag": {
                        "type": "String",
                        "default": "",
                        "validate": "kbv.REFERRAL_quadruple_line",
                        i18n: i18n( 'activity-schema.Referral_T.auftrag.i18n' ),
                        "-en": "Laborauftrag",
                        "-de": "Laborauftrag"
                    }
                },
                "LabRequest_T": {
                    "labRequestType": {
                        "complex": "eq",
                        "type": "LabRequestType_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "sonstigesText": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.sonstigesText.i18n' ),
                        "-en": "Freitext",
                        "-de": "Freitext"
                    },
                    /*
                     * Used starting Q4 2020
                     */
                    "knappschaftskennzeichen": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.knappschaftskennzeichen.i18n' )
                    },
                    /*
                     * Used starting Q4 2020
                     */
                    "befEiltTelBool": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Referral_T.befEiltTelBool.i18n' )
                    },
                    /*
                     * Used starting Q4 2020
                     */
                    "befEiltFaxBool": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Referral_T.befEiltFaxBool.i18n' )
                    },
                    /*
                     * Used starting Q4 2020
                     */
                    "befEiltNr": {
                        "type": "String",
                        "validate": "kbv.LabRequest_T_befEiltNr",
                        i18n: i18n( 'activity-schema.Referral_T.befEiltNr.i18n' )
                    },
                    /*
                     * Used starting Q4 2020
                     */
                    "ssw": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.ssw.i18n' )
                    },
                    /*
                     * Used starting Q4 2020
                     */
                    "zuAngaben": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.zuAngaben.i18n' )
                    },
                    /*
                     * @deprecated since Q4 2020
                     */
                    "befEiltFax": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.befEiltFax.i18n' ),
                        "validate": "faxOrEmpty",
                        "-en": "Fax-Nr.",
                        "-de": "Fax-Nr."
                    },
                    /*
                     * @deprecated since Q4 2020
                     */
                    "befEiltTel": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.befEiltTel.i18n' ),
                        "validate": "phoneOrEmpty",
                        "-en": "Telefon-Nr.",
                        "-de": "Telefon-Nr."
                    },
                    /*
                     * @deprecated since Q4 2020
                     */
                    "befEilt": { //01
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.Referral_T.befEilt.i18n' ),
                        "-en": "Befundübermittlung eilt (Dringlichkeitsstatus)",
                        "-de": "Befundübermittlung eilt (Dringlichkeitsstatus)"
                    },

                    "kontrollunters": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.Referral_T.kontrollunters.i18n' ),
                        "-en": "Kontrolluntersuchung",
                        "-de": "Kontrolluntersuchung"
                    },
                    "scheinRemittor": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinRemittor",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Schein_T.scheinRemittor.i18n' ),
                        "-en": "Referring doctor number",
                        "-de": "Überweiser"
                    },
                    "scheinEstablishment": {
                        "default": "",
                        "validate": "kbv.Schein_T_scheinEstablishment",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Schein_T.scheinEstablishment.i18n' ),
                        "-en": "Referring location",
                        "-de": "Betriebsstätte"
                    },
                    "ggfKennziffer": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.ggfKennziffer.i18n' ),
                        "-en": "ggf. Kennziffer",
                        "-de": "ggf. Kennziffer"
                    },
                    "edtaGrBlutbild": { //02
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.edtaGrBlutbild.i18n' ),
                        "-en": "großes Blutbild",
                        "-de": "großes Blutbild"
                    },
                    "edtaKlBlutbild": { //03
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.edtaKlBlutbild.i18n' ),
                        "-en": "kleines Blutbild",
                        "-de": "kleines Blutbild"
                    },
                    "edtaHbA1c": { //04
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.edtaHbA1c.i18n' ),
                        "-en": "HbA1c",
                        "-de": "HbA1c"
                    },
                    "edtaReti": { //05
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.edtaReti.i18n' ),
                        "-en": "Retikulozyten",
                        "-de": "Retikulozyten"
                    },
                    "edtaBlutsenkung": { //06
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.edtaBlutsenkung.i18n' ),
                        "-en": "Blutsenkung",
                        "-de": "Blutsenkung"
                    },
                    "edtaDiffBlutbild": { //07 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.edtaDiffBlutbild.i18n' ),
                        "-en": "Diff. Blutbild (Ausstrich)",
                        "-de": "Diff. Blutbild (Ausstrich)"
                    },
                    "citratQu": { //08
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.citratQu.i18n' ),
                        "-en": "Quick",
                        "-de": "Quick"
                    },
                    "citratQuMarcumar": { //09
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.citratQuMarcumar.i18n' ),
                        "-en": "Quick unter Marcumar-Therapie",
                        "-de": "Quick unter Marcumar-Therapie"
                    },
                    "citratThrombin": { //10
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.citratThrombin.i18n' ),
                        "-en": "Thrombinzeit",
                        "-de": "Thrombinzeit"
                    },
                    "citratPTT": { //11
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.citratPTT.i18n' ),
                        "-en": "PTT",
                        "-de": "PTT"
                    },
                    "citratFibri": { //12 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.citratFibri.i18n' ),
                        "-en": "Fibrinogen",
                        "-de": "Fibrinogen"
                    },
                    "svbAlkPhos": { //13
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbAlkPhos.i18n' ),
                        "-en": "alkalische Phosphatase",
                        "-de": "alkalische Phosphatase"
                    },
                    "svbAmylase": { //14
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbAmylase.i18n' ),
                        "-en": "Amylase",
                        "-de": "Amylase"
                    },
                    "svbASL": { //15
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbASL.i18n' ),
                        "-en": "ASL",
                        "-de": "ASL"
                    },
                    "svbBiliD": { //16
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbBiliD.i18n' ),
                        "-en": "Bilirubin direkt",
                        "-de": "Bilirubin direkt"
                    },
                    "svbBiliG": { //17
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbBiliG.i18n' ),
                        "-en": "Bilirubin gesamt",
                        "-de": "Bilirubin gesamt"
                    },
                    "svbCalc": { //18
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbCalc.i18n' ),
                        "-en": "Calcium",
                        "-de": "Calcium"
                    },
                    "svbCholesterin": { //19
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbCholesterin.i18n' ),
                        "-en": "Cholesterin",
                        "-de": "Cholesterin"
                    },
                    "svbCholin": { //20
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbCholin.i18n' ),
                        "-en": "Cholinesterase",
                        "-de": "Cholinesterase"
                    },
                    "svbCK": { //21
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbCK.i18n' ),
                        "-en": "CK",
                        "-de": "CK"
                    },
                    "svbCKMB": { //22 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbCKMB.i18n' ),
                        "-en": "CK-MB",
                        "-de": "CK-MB"
                    },
                    "svbCRP": { //23
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbCRP.i18n' ),
                        "-en": "CRP",
                        "-de": "CRP"
                    },
                    "svbEisen": { //24
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbEisen.i18n' ),
                        "-en": "Eisen",
                        "-de": "Eisen"
                    },
                    "svbEiwE": { //25
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbEiwE.i18n' ),
                        "-en": "Eiweiß Elektrophorese",
                        "-de": "Eiweiß Elektrophorese"
                    },
                    "svbEiwG": { //26
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbEiwG.i18n' ),
                        "-en": "Eiweiß gesamt",
                        "-de": "Eiweiß gesamt"
                    },
                    "svbGammaGT": { //27
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbGammaGT.i18n' ),
                        "-en": "Gamma GT",
                        "-de": "Gamma GT"
                    },
                    "svbGlukose": { //28
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbGlukose.i18n' ),
                        "-en": "Glukose",
                        "-de": "Glukose"
                    },
                    "svbGOT": { //29
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbGOT.i18n' ),
                        "-en": "GOT",
                        "-de": "GOT"
                    },
                    "svbGPT": { //30
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbGPT.i18n' ),
                        "-en": "GPT",
                        "-de": "GPT"
                    },
                    "svbHarnsäure": { //31
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbHarnsäure.i18n' ),
                        "-en": "Harnsäure",
                        "-de": "Harnsäure"
                    },
                    "svbHarnstoff": { //32
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbHarnstoff.i18n' ),
                        "-en": "Harnstoff",
                        "-de": "Harnstoff"
                    },
                    "svbHBDH": { //33 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbHBDH.i18n' ),
                        "-en": "HBDH",
                        "-de": "HBDH"
                    },
                    "svbHDL": { //34
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbHDL.i18n' ),
                        "-en": "HDL-Cholesterin",
                        "-de": "HDL-Cholesterin"
                    },
                    "svbLgA": { //35
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbLgA.i18n' ),
                        "-en": "IgA",
                        "-de": "IgA"
                    },
                    "svbLgG": { //36
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbLgG.i18n' ),
                        "-en": "IgG",
                        "-de": "IgG"
                    },
                    "svbLgM": { //37
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbLgM.i18n' ),
                        "-en": "IgM",
                        "-de": "IgM"
                    },
                    "svbKali": { //38
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbKali.i18n' ),
                        "-en": "Kalium",
                        "-de": "Kalium"
                    },
                    "svbKrea": { //39
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbKrea.i18n' ),
                        "-en": "Kreatinin",
                        "-de": "Kreatinin"
                    },
                    "svbKreaC": { //40
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbKreaC.i18n' ),
                        "-en": "Kreatinin Clearance",
                        "-de": "Kreatinin Clearance"
                    },
                    "svbLDH": { //41
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbLDH.i18n' ),
                        "-en": "LDH",
                        "-de": "LDH"
                    },
                    "svbLDL": { //42
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbLDL.i18n' ),
                        "-en": "LDL-Cholesterin",
                        "-de": "LDL-Cholesterin"
                    },
                    "svbLipase": { //43
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbLipase.i18n' ),
                        "-en": "Lipase",
                        "-de": "Lipase"
                    },
                    "svbNatrium": { //44
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbNatrium.i18n' ),
                        "-en": "Natrium",
                        "-de": "Natrium"
                    },
                    "svbOPVorb": { //45
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbOPVorb.i18n' ),
                        "-en": "OP-Vorbereitung",
                        "-de": "OP-Vorbereitung"
                    },
                    "svbPhos": { //46
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbPhos.i18n' ),
                        "-en": "Phosphat, anorganisches",
                        "-de": "Phosphat, anorganisches"
                    },
                    "svbTransf": { //47
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbTransf.i18n' ),
                        "-en": "Transferrin",
                        "-de": "Transferrin"
                    },
                    "svbTrigl": { //48
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbTrigl.i18n' ),
                        "-en": "Triglyceride",
                        "-de": "Triglyceride"
                    },
                    "svbTSHBasal": { //49
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbTSHBasal.i18n' ),
                        "-en": "TSH basal",
                        "-de": "TSH basal"
                    },
                    "svbTSHTRH": { //50 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.svbTSHTRH.i18n' ),
                        "-en": "TSH nach TRH",
                        "-de": "TSH nach TRH"
                    },
                    "glu1": { //51
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.glu1.i18n' ),
                        "-en": "Glukose 1",
                        "-de": "Glukose 1"
                    },
                    "glu2": { //52
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.glu2.i18n' ),
                        "-en": "Glukose 2",
                        "-de": "Glukose 2"
                    },
                    "glu3": { //53
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.glu3.i18n' ),
                        "-en": "Glukose 3",
                        "-de": "Glukose 3"
                    },
                    "glu4": { //54
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.glu4.i18n' ),
                        "-en": "Glukose 4",
                        "-de": "Glukose 4"
                    },
                    "urinStatus": { //55
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.urinStatus.i18n' ),
                        "-en": "Status",
                        "-de": "Status"
                    },
                    "urinMikroalb": { //56
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.urinMikroalb.i18n' ),
                        "-en": "Mikroalbumin",
                        "-de": "Mikroalbumin"
                    },
                    "urinSchwTest": { //57 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.urinSchwTest.i18n' ),
                        "-en": "Schwangerschaftstest",
                        "-de": "Schwangerschaftstest"
                    },
                    "urinGlukose": { //58
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.urinGlukose.i18n' ),
                        "-en": "Glukose",
                        "-de": "Glukose"
                    },
                    "urinAmylase": { //59 @deprecated
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.urinAmylase.i18n' ),
                        "-en": "Amylase",
                        "-de": "Amylase"
                    },
                    "urinSediment": { //60
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.urinSediment.i18n' ),
                        "-en": "Sediment",
                        "-de": "Sediment"
                    },
                    "sonstiges": { //61
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.sonstiges.i18n' ),
                        "-en": "Sonstiges",
                        "-de": "Sonstiges"
                    },
                    "harnStreifenTest": { //62
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.harnStreifenTest.i18n' ),
                        "-en": "Harnstoffstreifentest (62)",
                        "-de": "Harnstoffstreifentest (62)"
                    },
                    "nuechternPlasmaGlukose": { //63
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.nuechternPlasmaGlukose.i18n' ),
                        "-en": "Nüchternplasmaglukose (63)",
                        "-de": "Nüchternplasmaglukose (63)"
                    },
                    "lipidprofil": { //64
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.LabRequest_T.lipidprofil.i18n' ),
                        "-en": "Lipidprofil (64)",
                        "-de": "Lipidprofil (64)"
                    },
                    "asvTeamReferral": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.Referral_T.asvTeamReferral.i18n' ),
                        "-en": "ASV Team Referral",
                        "-de": "ASV Team Überweisung"
                    },
                    "testDescriptions": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.LabRequest_T.testDescriptions.i18n' ),
                        "-en": "Testbezeichnungen",
                        "-de": "Test Descriptions"
                    }
                },
                "HealthExaminationSurvey_T": {
                    "requestId": {
                        default: "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Labor_T.labRequestId.i18n' ),
                        "-en": i18n( 'activity-schema.Labor_T.labRequestId.i18n' ),
                        "-de": i18n( 'activity-schema.Labor_T.labRequestId.i18n' )
                    },
                    "insuranceType": {
                        "complex": "eq",
                        "type": "insuranceType_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.insuranceType.i18n' ),
                        "-en": "Kassenart",
                        "-de": "Kassenart",
                        "lib": types
                    },
                    "ageGroup": {
                        "complex": "eq",
                        "type": "AgeGroup_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.ageGroup.i18n' ),
                        "-en": "Altersgruppe",
                        "-de": "Altersgruppe",
                        "lib": types
                    },
                    "surveySex": {
                        "complex": "eq",
                        "type": "surveySex_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.surveySex.i18n' ),
                        "-en": "Gender",
                        "-de": "Geschlecht",
                        "lib": types
                    },
                    "repeatedExam": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.repeatedExam.i18n' ),
                        "-en": "Wiederholungsuntersuchung",
                        "-de": "Wiederholungsuntersuchung"
                    },
                    "hypertonia": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.hypertonia.i18n' ),
                        "-en": "Hypertonie",
                        "-de": "Hypertonie",
                        "lib": types
                    },
                    "coronalHeartDisease": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.coronalHeartDisease.i18n' ),
                        "-en": "koronare Herzkrankheit",
                        "-de": "koronare Herzkrankheit",
                        "lib": types
                    },
                    "otherArterialClosure": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.otherArterialClosure.i18n' ),
                        "-en": "sonst. arter. Verschlußkrankheit",
                        "-de": "sonst. arter. Verschlußkrankheit",
                        "lib": types
                    },
                    "diabetesMellitus": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.diabetesMellitus.i18n' ),
                        "-en": "Diabetes Mellitus",
                        "-de": "Diabetes Mellitus",
                        "lib": types
                    },
                    "hyperlipidemia": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.hyperlipidemia.i18n' ),
                        "-en": "Hyperlipidämie",
                        "-de": "Hyperlipidämie",
                        "lib": types
                    },
                    "kidneyDiseases": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.kidneyDiseases.i18n' ),
                        "-en": "Nierenkrankheiten",
                        "-de": "Nierenkrankheiten",
                        "lib": types
                    },
                    "lungDiseases": {
                        "complex": "eq",
                        "type": "SurveyAnamnesis_E",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.lungDiseases.i18n' ),
                        "-en": "Lungenerkrankung",
                        "-de": "Lungenerkrankung",
                        "lib": types
                    },
                    "nicotineAbuse": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.nicotineAbuse.i18n' ),
                        "-en": "Nikotinabusus",
                        "-de": "Nikotinabusus"
                    },
                    "chronicEmotionalStressFactor": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.chronicEmotionalStressFactor.i18n' ),
                        "-en": "dauerhafte emotionale Belastungsfaktoren",
                        "-de": "dauerhafte emotionale Belastungsfaktoren"
                    },
                    "sedentaryLifestyle": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.sedentaryLifestyle.i18n' ),
                        "-en": "Bewegungsmangel",
                        "-de": "Bewegungsmangel"
                    },
                    "adipositas": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.adipositas.i18n' ),
                        "-en": "Adipositas",
                        "-de": "Adipositas"
                    },
                    "alcoholAbuse": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.HealthExaminationSurvey_T.alcoholAbuse.i18n' ),
                        "-en": "Alkoholabusus",
                        "-de": "Alkoholabusus"
                    }
                },
                "ScheinFlags_T": {
                    "scheinSlipMedicalTreatment": {
                        "complex": "eq",
                        "type": "ScheinSlipMedicalTreatment_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "fk4202": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.GKVSchein_T.fk4202.i18n' ),
                        "-en": "Unfall, Unfallfolgen",
                        "-de": "Unfall, Unfallfolgen"
                    }
                },
                "fk8401_E": {
                    "type": "string",
                    i18n: i18n( 'activity-schema.fk8401_E.i18n' ),
                    "list": [
                        {
                            "val": "E",
                            i18n: i18n( 'activity-schema.fk8401_E.pkv1' ),
                            "-en": "Endbefund",
                            "-de": "Endbefund"
                        },
                        {
                            "val": "T",
                            i18n: i18n( 'activity-schema.fk8401_E.pkv2' ),
                            "-en": "Teilbefund",
                            "-de": "Teilbefund"
                        },
                        {
                            "val": "V",
                            i18n: i18n( 'activity-schema.fk8401_E.beihilfe' ),
                            "-en": "Vorläufiger Befund",
                            "-de": "Vorläufiger Befund"
                        },
                        {
                            "val": "A",
                            i18n: i18n( 'activity-schema.fk8401_E.postb' ),
                            "-en": "Archiv-Befund",
                            "-de": "Archiv-Befund"
                        },
                        {
                            "val": "N",
                            i18n: i18n( 'activity-schema.fk8401_E.gesetzlich' ),
                            "-en": "Nachforderung",
                            "-de": "Nachforderung"
                        }
                    ]
                },
                "VerordKrankenhaus_T": {
                    "belegarztBeh": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.VerordKrankenhaus_T.belegarztBeh.i18n' ),
                        "-en": "Belegarztbehandlung",
                        "-de": "Belegarztbehandlung"
                    },
                    "notfall": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.VerordKrankenhaus_T.notfall.i18n' ),
                        "-en": "Notfall",
                        "-de": "Notfall"
                    },
                    "unfall": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.VerordKrankenhaus_T.unfall.i18n' ),
                        "-en": "Unfall",
                        "-de": "Unfall"
                    },
                    "bvg": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.VerordKrankenhaus_T.bvg.i18n' ),
                        "-en": "BVG",
                        "-de": "BVG"
                    }
                },
                "hörhilfe_T": {
                    "folgegerät": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.hörhilfe_T.folgegerät.i18n' ),
                        "-en": "Folgegerät",
                        "-de": "Folgegerät"
                    },
                    "bvg": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.hörhilfe_T.BVG.i18n' ),
                        "-en": "BVG",
                        "-de": "BVG"
                    },
                    "hörhilfeNotw": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.hörhilfe_T.hörhilfeNotw.i18n' ),
                        "-en": "Hörhilfe notwendig",
                        "-de": "Hörhilfe notwendig"
                    }
                },
                "notfVertrSchein_T": {
                    "notfDienstUrlaubNotfall": {
                        "type": "number",
                        i18n: i18n( 'activity-schema.notfVertrSchein_T.notfDienstUrlaubNotfall.i18n' ),
                        "-en": "ärztlicher Notfalldienst/Urlaub/Notfall",
                        "-de": "ärztlicher Notfalldienst/Urlaub/Notfall"
                    },
                    "unfallfolgen": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.notfVertrSchein_T.unfallfolgen.i18n' ),
                        "-en": "Unfallfolgen",
                        "-de": "Unfallfolgen"
                    }
                },
                "KinderKrankengeld_T": {
                    "unfall": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.KinderKrankengeld_T.unfall.i18n' ),
                        "-en": "Unfall",
                        "-de": "Unfall"
                    },
                    "notwendig": {
                        "type": "boolean",
                        i18n: i18n( 'activity-schema.KinderKrankengeld_T.unfall.i18n' ),
                        "-en": "notwendig",
                        "-de": "notwendig"
                    },
                    "betreuungVon": {
                        "type": "date",
                        i18n: i18n( 'activity-schema.KinderKrankengeld_T.betreuungVon.i18n' ),
                        "-en": "Betreuung von",
                        "-de": "Betreuung von"
                    },
                    "betreuungBis": {
                        "type": "date",
                        i18n: i18n( 'activity-schema.KinderKrankengeld_T.betreuungBis.i18n' ),
                        "-en": "Betreuung bis",
                        "-de": "Betreuung bis"
                    }
                },
                "PTV11_T": {
                    "ambulantePsychotherapeutischeAkutbehandlung": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PTV11_T.ambulantePsychotherapeutischeAkutbehandlung.i18n' ),
                        "-en": "ambulante Psychotherapeutische Akutbehandlung",
                        "-de": "ambulante Psychotherapeutische Akutbehandlung"
                    },
                    "ambulantePsychoTherapie": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PTV11_T.ambulantePsychoTherapie.i18n' ),
                        "-en": "ambulante PsychoTherapie",
                        "-de": "ambulante PsychoTherapie"
                    },
                    "zeitnahErforderlich": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PTV11_T.zeitnahErforderlich.i18n' ),
                        "-en": "zeitnah Erforderlich",
                        "-de": "zeitnah Erforderlich"
                    },
                    "analytischePsychotherapie": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PTV11_T.analytischePsychotherapie.i18n' ),
                        "-en": "Analytische Psychotherapie",
                        "-de": "Analytische Psychotherapie"
                    },
                    "tiefenpsychologischFundiertePsychotherapie": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PTV11_T.tiefenpsychologischFundiertePsychotherapie.i18n' ),
                        "-en": "Tiefenpsychologisch fundierte Psychotherapie",
                        "-de": "Tiefenpsychologisch fundierte Psychotherapie"
                    },
                    "verhaltenstherapie": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PTV11_T.verhaltenstherapie.i18n' ),
                        "-en": "Verhaltenstherapie",
                        "-de": "Verhaltenstherapie"
                    },
                    "naehereAngabenZuDenEmpfehlungen": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PTV11_T.naehereAngabenZuDenEmpfehlungen.i18n' ),
                        "-en": "nähere Angaben zu den Empfehlungen",
                        "-de": "nähere Angaben zu den Empfehlungen"
                    }
                },
                "DiagnosisCert_E": {
                    "default": "NONE",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.DiagnosisCert_E.i18n' ),
                    "-en": "diagnosisCert",
                    "-de": "Diagnose, Sicherheit",
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.DiagnosisCert_E.i18n' )
                    },
                    "list": [
                        {
                            "val": "NONE",
                            "-de": "Keine Angabe",
                            i18n: i18n( 'activity-schema.DiagnosisCert_E.NONE' ),
                            "-en": "n/a"
                        },
                        {
                            "val": "CONFIRM",
                            "-de": "Gesichert",
                            i18n: i18n( 'activity-schema.DiagnosisCert_E.CONFIRM' ),
                            "-en": "confirm"
                        },
                        {
                            "val": "TENTATIVE",
                            "-de": "Verdacht auf",
                            i18n: i18n( 'activity-schema.DiagnosisCert_E.TENTATIVE' ),
                            "-en": "tentative"
                        },
                        {
                            "val": "ASYMPTOMATIC",
                            "-de": "Zustand nach",
                            i18n: i18n( 'activity-schema.DiagnosisCert_E.ASYMPTOMATIC' ),
                            "-en": "asymptomatic"
                        },
                        {
                            "val": "EXCLUDE",
                            "-de": "Ausschluss",
                            i18n: i18n( 'activity-schema.DiagnosisCert_E.EXCLUDE' ),
                            "-en": "exclude"
                        }
                    ]
                },
                "DiagnosisType_E": {
                    "default": "ACUTE",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.DiagnosisType_E.i18n' ),
                    "-en": "diagnosisType",
                    "-de": "Diagnose, Typ",
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.DiagnosisType_E.i18n' )
                    },
                    "list": [
                        {
                            "val": "ACUTE",
                            "-de": "Akut",
                            i18n: i18n( 'activity-schema.DiagnosisType_E.ACUTE' ),
                            "-en": "Acute"
                        },
                        {
                            "val": "ANAMNESTIC",
                            "-de": "anam. Dauerdiagnose",
                            i18n: i18n( 'activity-schema.DiagnosisType_E.ANAMNESTIC' ),
                            "-en": "Anam. Continuous Diagnostics"
                        },
                        {
                            "val": "CONTINUOUS",
                            "-de": "Dauerdiagnose",
                            i18n: i18n( 'activity-schema.DiagnosisType_E.CONTINUOUS' ),
                            "-en": "Continuous Diagnostics"
                        }
                    ]
                },
                "DiagnosisPeriod_E": {
                    "default": "03",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.DiagnosisPeriod_E.i18n' ),
                    "-en": "diagnosisType",
                    "-de": "Diagnose, Typ",
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.DiagnosisPeriod_E.i18n' )
                    },
                    "list": [
                        {
                            "val": "03",
                            "-de": "Akut",
                            i18n: i18n( 'activity-schema.DiagnosisPeriod_E.LEFT' ),
                            "-en": "Acute"
                        },
                        {
                            "val": "04",
                            "-de": "Chronisch / Rezidiv",
                            i18n: i18n( 'activity-schema.DiagnosisPeriod_E.RIGHT' ),
                            "-en": "Chronic / Recurrence"
                        }
                    ]
                },
                "DiagnosisTreatmentRelevance_E": {
                    "default": "TREATMENT_RELEVANT",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.DiagnosisTreatmentRelevance_E.i18n' ),
                    "-en": "diagnosisTreatmentRelevance",
                    "-de": "Diagnose, Relevanz",
                    "rule-engine": {
                        i18n: i18n( 'activity-schema.DiagnosisTreatmentRelevance_E.i18n' )
                    },
                    "list": [
                        {
                            "val": "TREATMENT_RELEVANT",
                            "-de": "behandlungsrelevant",
                            i18n: i18n( 'activity-schema.DiagnosisTreatmentRelevance_E.TREATMENT_RELEVANT' ),
                            "-en": "Treatment-relevant"
                        },
                        {
                            "val": "DOKUMENTATIV",
                            "-de": "dokumentativ",
                            i18n: i18n( 'activity-schema.DiagnosisTreatmentRelevance_E.DOKUMENTATIV' ),
                            "-en": "Dokumentativ"
                        },
                        {
                            "val": "INVALIDATING",
                            "-de": "nicht mehr gültig",
                            i18n: i18n( 'activity-schema.DiagnosisTreatmentRelevance_E.INVALIDATING' ),
                            "-en": "invalidated"
                        }
                    ]
                },
                "DiagnosisSite_E": {
                    "default": "",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.DiagnosisSite_E.i18n' ),
                    "-en": "diagnosisSite",
                    "-de": "diagnosisSite",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte Lokalisation wählen",
                            i18n: i18n( 'activity-schema.DiagnosisSite_E.' ),
                            "-en": "Please choose Site"
                        },
                        {
                            "val": "LEFT",
                            "-de": "Links",
                            i18n: i18n( 'activity-schema.DiagnosisSite_E.LEFT' ),
                            "-en": "Left"
                        },
                        {
                            "val": "RIGHT",
                            "-de": "Rechts",
                            i18n: i18n( 'activity-schema.DiagnosisSite_E.RIGHT' ),
                            "-en": "Right"
                        },
                        {
                            "val": "BOTH",
                            "-de": "Beidseitig",
                            i18n: i18n( 'activity-schema.DiagnosisSite_E.BOTH' ),
                            "-en": "Both"
                        }
                    ]
                },
                "DiagnosisLaterality_E": {
                    "default": "01",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.DiagnosisLaterality_E.i18n' ),
                    "-en": "DiagnosisLaterality",
                    "-de": "DiagnosisLaterality",
                    "list": [
                        {
                            "val": "01",
                            "-de": "Links",
                            i18n: i18n( 'activity-schema.DiagnosisLaterality_E.LEFT' ),
                            "-en": "Left"
                        },
                        {
                            "val": "02",
                            "-de": "Rechts",
                            i18n: i18n( 'activity-schema.DiagnosisLaterality_E.RIGHT' ),
                            "-en": "Right"
                        },
                        {
                            "val": "0102",
                            "-de": "Beidseitig",
                            i18n: i18n( 'activity-schema.DiagnosisLaterality_E.BOTH' ),
                            "-en": "Both"
                        }
                    ]
                },
                "FormExtra_T": {
                    "certNumber": {
                        "type": "string",
                        i18n: i18n( 'activity-schema.KinderKrankengeld_T.certNumber.i18n' ),
                        "-en": "certNumber",
                        "-de": "certNumber"
                    },
                    "auBis": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Referral_T.auBis.i18n' ),
                        "-en": "AU bis",
                        "-de": "AU bis"
                    }
                },
                "FormExtraContact_T": {
                    "selectedContact": {
                        "type": "String",
                        i18n: i18n( 'form-schema.Form_T.selectedContact' ),
                        "-en": "Selected contact",
                        "-de": "Ausgewählter Kontakt"
                    }
                },
                "FormExtraRehabilitation_T": {
                    "mobilityOtherCheck": {
                        "type": "string",
                        i18n: i18n( 'activity-schema.FormExtraRehabilitation_T.mobilityOtherCheck.i18n' ),
                        "-en": "Mobility Other (check)",
                        "-de": "Mobilität Sonstige (kontrol)"
                    },
                    "mobilityOtherString": {
                        "type": "string",
                        "validate": "kbv.KBV_BFB61_mobilityOther",
                        i18n: i18n( 'activity-schema.FormExtraRehabilitation_T.mobilityOtherString.i18n' ),
                        "-en": "Mobility Other (string)",
                        "-de": "Mobilität Sonstige (texte)"
                    }
                },
                "ScheinInputTemplate_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( "activity-schema.GKVSchein_T.scheinInputTemplate.i18n" ),
                    "listFor21": [
                        {
                            val: "",
                            i18n: i18n( 'activity-schema.ScheinInputTemplate_E.' )
                        },
                        {
                            val: "10c",
                            i18n: i18n( 'activity-schema.ScheinInputTemplate_E.1' )
                        }
                    ],
                    "listFor27": [
                        {
                            val: "",
                            i18n: i18n( 'activity-schema.ScheinInputTemplate_E.' )
                        },
                        {
                            val: "39",
                            i18n: i18n( 'activity-schema.ScheinInputTemplate_E.2' )
                        }
                    ]
                },
                "ScheinSlipMedicalTreatment_E": {
                    "default": "",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    "validate": "kbv.Schein_T_scheinSlipMedicalTreatment",
                    i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.i18n' ),
                    "-en": "Hospitalised Treatment (belegärztliche Behandlung)",
                    "-de": "belegärztliche Behandlung",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte belegärztliche Behandlung wählen",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.' ),
                            "-en": "Please choose hospitalised Treatment"
                        },
                        {
                            "val": "1",
                            "-de": "Kurativ",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.1' ),
                            "-en": "Kurativ"
                        },
                        {
                            "val": "2",
                            "-de": "Präventiv",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.2' ),
                            "-en": "Präventiv"
                        },
                        {
                            "val": "3",
                            "-de": "(ESS) Empfängnisregelung, Sterilisation, Schwangerschaftsabbruch",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.3' ),
                            "-en": "(ESS) Empfängnisregelung, Sterilisation, Schwangerschaftsabbruch"
                        },
                        {
                            "val": "4",
                            "-de": "(BB) Belegärztliche Behandlung",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.4' ),
                            "-en": "(BB) Belegärztliche Behandlung"
                        }
                    ]
                },
                "insuranceType_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.insuranceType_E.i18n' ),
                    "-en": "Kassenart",
                    "-de": "Kassenart",
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.insuranceType_E.' ),
                            "-de": "Bitte Kassenart wählen",
                            "-en": "Bitte Kassenart wählen"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.insuranceType_E.1' ),
                            "-de": "AOK",
                            "-en": "AOK"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.insuranceType_E.2' ),
                            "-de": "LKK",
                            "-en": "LKK"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.insuranceType_E.3' ),
                            "-de": "VdeK",
                            "-en": "VdeK"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.insuranceType_E.4' ),
                            "-de": "BKK",
                            "-en": "BKK"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.insuranceType_E.5' ),
                            "-de": "Bundesknappschaft",
                            "-en": "Bundesknappschaft"
                        },
                        {
                            "val": "6",
                            i18n: i18n( 'activity-schema.insuranceType_E.6' ),
                            "-de": "IKK",
                            "-en": "IKK"
                        }
                    ]
                },
                "AgeGroup_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.AgeGroup_E.i18n' ),
                    "-en": "Altersgruppe",
                    "-de": "Altersgruppe",
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.AgeGroup_E.' ),
                            "-de": "Bitte Altersgruppe wählen",
                            "-en": "Bitte Altersgruppe wählen"
                        },
                        {
                            "val": "01",
                            i18n: i18n( 'activity-schema.AgeGroup_E.01' ),
                            "-de": "unter 35",
                            "-en": "unter 35"
                        },
                        {
                            "val": "02",
                            i18n: i18n( 'activity-schema.AgeGroup_E.02' ),
                            "-de": "35-39",
                            "-en": "35-39"
                        },
                        {
                            "val": "03",
                            i18n: i18n( 'activity-schema.AgeGroup_E.03' ),
                            "-de": "40-44",
                            "-en": "40-44"
                        },
                        {
                            "val": "04",
                            i18n: i18n( 'activity-schema.AgeGroup_E.04' ),
                            "-de": "45-49",
                            "-en": "45-49"
                        },
                        {
                            "val": "05",
                            i18n: i18n( 'activity-schema.AgeGroup_E.05' ),
                            "-de": "50-54",
                            "-en": "50-54"
                        },
                        {
                            "val": "06",
                            i18n: i18n( 'activity-schema.AgeGroup_E.06' ),
                            "-de": "55-59",
                            "-en": "55-59"
                        },
                        {
                            "val": "07",
                            i18n: i18n( 'activity-schema.AgeGroup_E.07' ),
                            "-de": "60-64",
                            "-en": "60-64"
                        },
                        {
                            "val": "08",
                            i18n: i18n( 'activity-schema.AgeGroup_E.08' ),
                            "-de": "65-69",
                            "-en": "65-69"
                        },
                        {
                            "val": "09",
                            i18n: i18n( 'activity-schema.AgeGroup_E.09' ),
                            "-de": "70-74",
                            "-en": "70-74"
                        },
                        {
                            "val": "10",
                            i18n: i18n( 'activity-schema.AgeGroup_E.10' ),
                            "-de": "75-79",
                            "-en": "75-79"
                        },
                        {
                            "val": "11",
                            i18n: i18n( 'activity-schema.AgeGroup_E.11' ),
                            "-de": "80+",
                            "-en": "80+"
                        }
                    ]
                },
                "surveySex_E": {
                    "default": "X",
                    "type": "String",
                    i18n: i18n( 'activity-schema.surveySex_E.i18n' ),
                    "-en": "Geschlecht",
                    "-de": "Geschlecht",
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.surveySex_E.' ),
                            "-de": "Bitte wählen Sie geschlecht",
                            "-en": "Please, choose gender"
                        },
                        {
                            "val": "M",
                            i18n: i18n( 'activity-schema.surveySex_E.M' ),
                            "-de": "männlich",
                            "-en": "male"
                        },
                        {
                            "val": "W",
                            i18n: i18n( 'activity-schema.surveySex_E.W' ),
                            "-de": "weiblich",
                            "-en": "female"
                        },
                        {
                            "val": "X",
                            i18n: i18n( 'activity-schema.surveySex_E.X' ),
                            "-de": "unbestimmt",
                            "-en": "undetermined"
                        }
                    ]
                },
                "SurveyAnamnesis_E": {
                    "default": "0",
                    "type": "String",
                    i18n: i18n( 'activity-schema.SurveyAnamnesis_E.i18n' ),
                    "-en": "Anamnese",
                    "-de": "Anamnese",
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.SurveyAnamnesis_E.' ),
                            "-de": "Bitte Anamneseart wählen",
                            "-en": "Bitte Anamneseart wählen"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.SurveyAnamnesis_E.0' ),
                            "-de": "Nein",
                            "-en": "Nein"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.SurveyAnamnesis_E.1' ),
                            "-de": "Eigenanamnese",
                            "-en": "Eigenanamnese"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.SurveyAnamnesis_E.2' ),
                            "-de": "Familien-Anamnese",
                            "-en": "Familien-Anamnese"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.SurveyAnamnesis_E.3' ),
                            "-de": "Eigen- & Familien-Anamnese",
                            "-en": "Eigen- & Familien-Anamnese"
                        }
                    ]
                },
                "LabRequestType_E": {
                    "default": "LABREQUESTTYPE",
                    "type": "String",

                    i18n: i18n( 'activity-schema.LabRequestType_E.i18n' ),
                    "-en": "Laborscheintyp",
                    "-de": "Laborscheintyp",
                    "list": [
                        {
                            "val": "LABREQUESTTYPE",
                            "-de": "Überweisungsschein für Laboratoriumsuntersuchungen als Auftragsleistung",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.LABREQUESTTYPE' ),
                            "-en": "Überweisungsschein für Laboratoriumsuntersuchungen als Auftragsleistung"
                        },
                        /*  MOJ-4911
                         {
                         "val": "LABREQUESTTYPE_L",
                         "-de": "Überweisungsschein für Laboratoriumsuntersuchungen als Auftragsleistung (L)",
                         i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.LABREQUESTTYPE_L' ),
                         "-en": "Überweisungsschein für Laboratoriumsuntersuchungen als Auftragsleistung (L)"
                         },
                         */
                        {
                            "val": "LABREQUESTTYPE_A",
                            "-de": "Anforderungsschein für Laboratoriumsuntersuchungen bei Laborgemeinschaften (A)",
                            i18n: i18n( 'activity-schema.ScheinSlipMedicalTreatment_E.LABREQUESTTYPE_A' ),
                            "-en": "Anforderungsschein für Laboratoriumsuntersuchungen bei Laborgemeinschaften (A)"
                        }
                    ]
                },
                "UntersArt_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.UntersArt_E.i18n' ),
                    "-en": "Untersuchungsart",
                    "-de": "Untersuchungsart",
                    "list": [
                        {
                            "val": "1",
                            "-de": "Ausführung von Auftragsleistungen",
                            i18n: i18n( 'activity-schema.UntersArt_E.auftragsleistungen.i18n' ),
                            "-en": "Ausführung von Auftragsleistungen"
                        },
                        {
                            "val": "2",
                            "-de": "Konsiliaruntersuchung",
                            i18n: i18n( 'activity-schema.UntersArt_E.konsiliaruntersuchung.i18n' ),
                            "-en": "Konsiliaruntersuchung"
                        },
                        {
                            "val": "3",
                            "-de": "Mit-/Weiterbehandlung",
                            i18n: i18n( 'activity-schema.UntersArt_E.mitWeiterBehandlung.i18n' ),
                            "-en": "Mit-/Weiterbehandlung"
                        }
                    ]
                },
                "ETSReferralUrgency_E": {
                    "type": "String",
                    "default": "ROUTINE",
                    i18n: i18n( 'activity-schema.ETSReferralUrgency_E.i18n' ),
                    "-en": "Urgency",
                    "-de": "Dringlichkeit",
                    "list": [
                        {
                            "val": "ROUTINE",
                            "-de": "Nichtdringlich",
                            i18n: i18n( 'activity-schema.ETSReferralUrgency_E.ROUTINE.i18n' ),
                            "-en": "routine"
                        },
                        {
                            "val": "URGENT",
                            "-de": "Dringlich",
                            i18n: i18n( 'activity-schema.ETSReferralUrgency_E.URGENT.i18n' ),
                            "-en": "urgent"
                        }
                    ]
                },
                "AuType_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.AuType_E.i18n' ),
                    "-en": "AU Type",
                    "-de": "AU Type",
                    "list": [
                        {
                            "val": "AU",
                            "-de": "AU",
                            "-de-ch": "AUF",
                            i18n: i18n( 'activity-schema.AuType_E.AU.i18n' ),
                            "-en": "AU"
                        },
                        {
                            "val": "AUBLANKO",
                            "-de": "AU blanko",
                            i18n: i18n( 'activity-schema.AuType_E.AUBLANKO.i18n' ),
                            "-en": "AU blanko"
                        },
                        {
                            "val": "AUPRIVAT",
                            "-de": "AU privat",
                            i18n: i18n( 'activity-schema.AuType_E.AUPRIVAT.i18n' ),
                            "-en": "AU privat"
                        }

                    ]
                },
                "ObservationTherapyStatus_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.i18n' ),
                    "-en": "Therapy Status",
                    "-de": "Therapiestatus",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "THERAPY_STARTED",
                            "-de": "Therapiestart",
                            i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.THERAPY_STARTED' ),
                            "-en": "Therapy Started"
                        },
                        {
                            "val": "THERAPY_CHECKED",
                            "-de": "Therapiecheck",
                            i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.THERAPY_CHECKED' ),
                            "-en": "Therapy Checked"
                        },
                        {
                            "val": "THERAPY_ABORTED",
                            "-de": "Therapieabbruch",
                            i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.THERAPY_ABORTED' ),
                            "-en": "Therapy Aborted"
                        },
                        {
                            "val": "THERAPY_ENDED",
                            "-de": "Therapieende",
                            i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.THERAPY_ENDED' ),
                            "-en": "Therapy Ended"
                        }
                    ]
                },
                "ObservationValuation_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.ObservationValuation_E.i18n' ),
                    "-en": "Valuation",
                    "-de": "Bewertung",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "UNCHANGED",
                            "-de": "Unverändert",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.UNCHANGED' ),
                            "-en": "Unchanged"
                        },
                        {
                            "val": "IMPROVED",
                            "-de": "Verbessert",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.IMPROVED' ),
                            "-en": "Improved"
                        },
                        {
                            "val": "DETERIORATED",
                            "-de": "Verschlechtert",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.DETERIORATED' ),
                            "-en": "Deteriorated"
                        },
                        {
                            "val": "CURED",
                            "-de": "Geheilt",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.CURED' ),
                            "-en": "Cured"
                        },
                        {
                            "val": "COMPLICATION",
                            "-de": "Komplikation",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.COMPLICATION' ),
                            "-en": "Complication"
                        },
                        {
                            "val": "UNKNOWN",
                            "-de": "Unbekannt",
                            i18n: i18n( 'activity-schema.ObservationValuation_E.UNKNOWN' ),
                            "-en": "Unknown"
                        }
                    ]
                },
                "Invoice_T": {
                    "invoiceNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.invoiceNo.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Invoice Number",
                        "-de": "Rechnunsnummern"
                    },
                    "autoGenerated": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Invoice_T.autoGenerated.i18n' ),
                        "-en": "autoGenerated",
                        "-de": "autoGenerated"
                    },
                    "ruleStatus": {
                        "complex": "eq",
                        "type": "RuleStatus_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Invoice_T.ruleStatus.i18n' ),
                        "-en": "Validation Status",
                        "-de": "Prüfstatus"
                    },
                    "ruleErrors": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Invoice_T.ruleErrors.i18n' ),
                        "-en": "ruleErrors",
                        "-de": "ruleErrors"
                    },
                    "receipts": {
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Invoice_T.receipts.i18n' ),
                        "-en": "Receipts",
                        "-de": "Quittungen"
                    },
                    "baseFromSchein":{
                        "complex": "ext",
                        "type": "BillingTrackSchein_T",
                        "lib": types
                    },
                    //  sum of all RECEIPT activities referenced in receipts array
                    //  will also include CREDITNOTE and activities, effectively a different kind of receipt
                    //  is set to total when invoice is marked as PAID, regardless
                    "totalReceipts": {
                        "default": 0.00,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Invoice_T.totalReceipts.i18n' ),
                        "-en": "Amount paid",
                        "-de": "Summe gezahlt"
                    },
                    //  sum of charges from all WARNING activities referenced in receipts array
                    "totalPenalties": {
                        "default": 0.00,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Invoice_T.totalPenalties.i18n' ),
                        "-en": "Total late fees",
                        "-de": "Summe Mahnkosten"
                    },
                    //  total of invoice less totalReceipts
                    //  is set to 0 when invoice is marked as PAID
                    "totalReceiptsOutstanding": {
                        "default": 0.00,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Invoice_T.totalReceiptsOutstanding.i18n' ),
                        "-en": "Outstanding Amount",
                        "-de": "Restbetrag"
                    },
                    "linkedEmployees": {
                        "complex": "inc",
                        "type": "LinkedEmployee_T",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.RECEIPT_EMPLOYEE' ),
                        "-en": "Receipt Employee",
                        "-de": "Quittung Arzt"
                    },
                    "linkedTimestamps": {
                        "complex": "inc",
                        "type": "LinkedTimestamp_T",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_DATE' ),
                        "-en": "Date of payment",
                        "-de": "Datum bezahlt"
                    },
                    "invoiceDate": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_DATE' ),
                        "apiv": { v: 2, queryParam: true },
                        "-en": "Last change",
                        "-de": "letzte Änderung"
                    },
                    "invoiceBilledDate": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_BILLED_DATE' ),
                        "apiv": { v: 2, queryParam: true },
                        "-en": "invoiceBilledDate",
                        "-de": "invoiceBilledDate"
                    },
                    "reminderDate": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.REMINDERDATE' ),
                        "apiv": {v: 2}
                    },
                    "warning1Date": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.WARNING1DATE' ),
                        "apiv": {v: 2}
                    },
                    "warning2Date": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.WARNING2DATE' ),
                        "apiv": {v: 2}
                    },
                    "billingAddress": {
                        "type": "String",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.BILLINGADDRESS' ),
                        "apiv": {v: 2}
                    },
                    "continuousIcds": {
                        "default": [],
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Schein_T.continuousIcds.i18n' ),
                        "-en": "Chronic diagnoses",
                        "-de": "Dauerdiagnosen"
                    },
                    "linkedContents": {
                        "complex": "inc",
                        "type": "LinkedContent_T",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_CONTENT' ),
                        "-en": "Payment description",
                        "-de": "Notiz bezahlt"
                    },
                    "insuranceName": {
                        "default": '',
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.insuranceName.i18n' ),
                        "-en": "Insurance Company Name",
                        "-de": "Kasse"
                    },
                    "referenceNo": {
                        "type": "String"
                    },
                    "scheinNotes": {
                        "type": "String",
                        i18n:  i18n( 'activity-schema.Schein_T.scheinNotes.i18n' ),
                        "-en": i18n( 'activity-schema.Schein_T.scheinNotes.i18n' ),
                        "-de": i18n( 'activity-schema.Schein_T.scheinNotes.i18n' )
                    }
                },
                "RuleStatus_E": {
                    "default": "NOT_VALIDATED",
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": "NOT_VALIDATED",
                            "-de": "ungeprüft",
                            i18n: i18n( 'activity-schema.RuleStatus_E.NOT_VALIDATED' ),
                            "-en": "unchecked"
                        }, {
                            "val": "VALID",
                            "-de": "gültig",
                            i18n: i18n( 'activity-schema.RuleStatus_E.VALID' ),
                            "-en": "valid"
                        }, {
                            "val": "INVALID",
                            "-de": "ungültig",
                            i18n: i18n( 'activity-schema.RuleStatus_E.INVALID' ),
                            "-en": "invalid"
                        }
                    ]
                },
                "StockDispense_T": {
                   dispensedItems: {
                       "complex": "inc",
                       "type": "DispensedItem_T",
                        i18n: 'Dispensed items',
                       "-en": "Dispensed items",
                       "-de": "Kostenträger",
                       "lib": types
                   }
                },
                "DispensedItem_T": {
                    "stockItemId": {
                        "type": "ObjectId",
                        i18n: i18n( 'activity-schema.StockDispense_T.stockItemId.i18n' ),
                        "-en": "Stock item",
                        "-de": "Artikel"
                    },
                    "stockLocationId": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.StockDispense_T.stockLocationId.i18n' ),
                        "-en": "Stock location",
                        "-de": "Lagerort"
                    },
                    "phPZN": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.StockDispense_T.phPZN.i18n' ),
                        "-en": "PZN code",
                        "-de": "PZN Code"
                    },
                    "reason": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phReason.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phReason.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phReason.i18n' )
                    },
                    "description": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'InStockMojit.instock_schema.InStock_T.description' ),
                        "-en": "Description",
                        "-de": "Beschreibung"
                    }
                },
                "Medication_T": {
                    "phPZN": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phPZN.i18n' ),
                        "-en": "PZN code",
                        "-de": "PZN Code"
                    },
                    "phCompany": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phCompany.i18n' ),
                        "-en": "Manufactory",
                        "-de": "Hersteller"
                    },
                    "phForm": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phForm.i18n' ),
                        "-en": "Format",
                        "-de": "Darreichungsform"
                    },
                    "phPackSize": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phPackSize.i18n' ),
                        "-en": "Package size",
                        "-de": "Packungsgröße"
                    },
                    "phPackQuantity": {
                        "default": 1,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.phPackQuantity.i18n' ),
                        "-en": "Quantity of Packages",
                        "-de": "Anzahl an Packungen"
                    },
                    "phPriceSale": {
                        "default": null,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.phPriceSale.i18n' ),
                        "-en": "Sale price",
                        "-de": "AVP"
                    },
                    "phRefundAmount": {
                        "default": null,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.phRefundAmount.i18n' ),
                        "-en": "Refund amount",
                        "-de": "Erstattungsbetrag"
                    },
                    "phPriceRecommended": {
                        "default": null,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.phPriceRecommended.i18n' ),
                        "-en": "Recommended price",
                        "-de": "UVP"
                    },
                    "phPatPay": {
                        "default": null,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.phPatPay.i18n' ),
                        "-en": "Supplement",
                        "-de": "Zuzahlung"
                    },
                    "phPatPayHint": {
                        "default": '',
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phPatPayHint.i18n' ),
                        "-en": "Supplement Hint",
                        "-de": "Zuzahlung Hinweis"
                    },
                    "phFixedPay": {
                        "default": null,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.phFixedPay.i18n' ),
                        "-en": "Fixed payment",
                        "-de": "Festbetrag"
                    },
                    "phIngr": {
                        "complex": "inc",
                        "type": "PhIngr_T",
                        "lib": types,
                        "default": [],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phIngr.i18n' ),
                        "-en": "Ingredient list",
                        "-de": "Wirkstoffe"
                    },
                    "phAtc": {
                        "default": [],
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phAtc.i18n' ),
                        "-en": "ATC code list",
                        "-de": "ATC code list"
                    },
                    "phOnly": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phOnly.i18n' ),
                        "-en": "Pharmacy only",
                        "-de": "Apothekenpflicht"
                    },
                    "phTer": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phTer.i18n' ),
                        "-en": "Teratogenic drugs",
                        "-de": "Teratogenes Arzneimittel"
                    },
                    "phTrans": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phTrans.i18n' ),
                        "-en": "Transfusion set",
                        "-de": "Transfusionsgesetz"
                    },
                    "phImport": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phImport.i18n' ),
                        "-en": "Reimport",
                        "-de": "Reimport"
                    },
                    "phNegative": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phNegative.i18n' ),
                        "-en": "In negative list",
                        "-de": "Negativliste"
                    },
                    "phLifeStyle": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phLifeStyle.i18n' ),
                        "-en": "Life style drugs",
                        "-de": "Lifestyle Arzneimittel"
                    },
                    "phLifeStyleCond": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phLifeStyleCond.i18n' ),
                        "-en": "Conditional life style drugs",
                        "-de": "bedingtes Lifestyle Arzneimittel"
                    },
                    "phAMR": {
                        "default": [],
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Medication_T.phAMR.i18n' ),
                        "-en": "AMR appendices",
                        "-de": "AMR appendices"
                    },
                    "phGBA": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phGBA.i18n' ),
                        "-en": "G-BA therapy hint",
                        "-de": "G-BA Therapiehinweis"
                    },
                    "phGBATherapyHintName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phGBATherapyHint.i18n' ),
                        "-en": "G-BA therapy hint",
                        "-de": "G-BA Therapiehinweis"
                    },
                    "phDisAgr": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phDisAgr.i18n' ),
                        "-en": "Discount agreement",
                        "-de": "Rabattvertrag"
                    },
                    "phDisAgrAlt": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phDisAgrAlt.i18n' ),
                        "-en": "Alternative discount agreement",
                        "-de": "Alternative mit Rabattvertrag"
                    },
                    "phMed": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phMed.i18n' ),
                        "-en": "Medical product",
                        "-de": "Medizinprodukt"
                    },
                    "phPrescMed": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phPrescMed.i18n' ),
                        "-en": "prescription medical product",
                        "-de": "verordnungsfähiges Medizinprodukt"
                    },
                    "phBTM": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phBTM.i18n' ),
                        "-en": "BTM",
                        "-de": "BTM"
                    },
                    "phRecipeOnly": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phRecipeOnly.i18n' ),
                        "-en": "Recipe only",
                        "-de": "Verschreibungspflicht"
                    },
                    "phNLabel": {
                        "default": '',
                        "validate": "kbv.Medication_T_phNLabel",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phNLabel.i18n' ),
                        "-en": "N-labeling",
                        "-de": "N-Kennzeichnung"
                    },
                    "phOTC": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phOTC.i18n' ),
                        "-en": "OTC",
                        "-de": "OTC"
                    },
                    "phOTX": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phOTX.i18n' ),
                        "-en": "OTX",
                        "-de": "OTX"
                    },
                    "phARV": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phARV.i18n' ),
                        "-en": "ARV",
                        "-de": "ARV"
                    },
                    "phARVContent": {
                        complex: "inc",
                        type: "PhARVContent_T",
                        lib: types,
                        i18n: i18n( 'activity-schema.PhARVContent_T.i18n' ),
                        "-en": "ARV",
                        "-de": "ARV"
                    },
                    "phAMRContent": {
                        complex: "inc",
                        type: "PhAMRContent_T",
                        lib: types,
                        i18n: i18n( 'activity-schema.PhAMRContent_T.i18n' ),
                        "-en": "AMR",
                        "-de": "AMR"
                    },
                    "phCheaperPkg": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phCheaperPkg.i18n' ),
                        "-en": "cheaper packages available",
                        "-de": "preisgünstigere Packungen vorhanden"
                    },
                    "phContinuousMed": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Medication_T.phContinuousMed.i18n' ),
                        "-en": "continuous medication",
                        "-de": "Dauermedikament",
                        "validate": "Medication_T_phContinuousMed"
                    },
                    "phContinuousMedDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Medication_T.phContinuousMedDate.i18n' ),
                        "-en": "continuous medication",
                        "-de": "Dauermedikament",
                        "validate": "Medication_T_phContinuousMedDate"
                    },
                    "phContinuousMedStart": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Medication_T.phContinuousMedStart.i18n' ),
                        "-en": "continuous medication",
                        "-de": "Dauermedikament"
                    },
                    "phContinuousMedEnd": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Medication_T.phContinuousMedEnd.i18n' ),
                        "-en": "continuous medication",
                        "-de": "Dauermedikament"
                    },
                    "phSampleMed": { // [MOJ-11908] samples are those given to the patient by the doctor, which he got from pharmaceutical representatives
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Medication_T.phSampleMed.i18n' ),
                        "-en": "sample medication",
                        "-de": "Mustermedikament"
                    },
                    "hasVat": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.hasVat.i18n' ),
                        "-en": 'hasVat',
                        "-de": 'hasVat.'
                    },
                    "vat": {
                        "default": 0,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Medication_T.vat.i18n' ),
                        "-en": 'VAT',
                        "-de": 'Ust.'
                    },
                    "dosis": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'InCaseMojit.casefile_detail.label.DOSIS' ),
                        "-en": i18n( 'InCaseMojit.casefile_detail.label.DOSIS' ),
                        "-de": i18n( 'InCaseMojit.casefile_detail.label.DOSIS' )
                    },
                    "phDosisMorning": {
                        "default": "0",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phDosisMorning.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phDosisMorning.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phDosisMorning.i18n' )
                    },
                    "phDosisAfternoon": {
                        "default": "0",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phDosisAfternoon.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phDosisAfternoon.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phDosisAfternoon.i18n' )
                    },
                    "phDosisEvening": {
                        "default": "0",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phDosisEvening.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phDosisEvening.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phDosisEvening.i18n' )
                    },
                    "phDosisNight": {
                        "default": "0",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.phDosisNight.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phDosisNight.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phDosisNight.i18n' )
                    },
                    "phDosisType": {
                        "complex": "eq",
                        "apiv": { v: 2, queryParam: false },
                        "type": "PhDosisType_E",
                        "lib": types
                    },
                    "phAsNeededMedication": {
                        "type": "Boolean",
                        "default": false,
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Medication_T.phAsNeededMedication.i18n' )
                    },
                    "phUnit": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Medication_T_phUnit",
                        i18n: i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phUnit.i18n' )
                    },
                    "phNote": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Medication_T_phNote",
                        i18n: i18n( 'activity-schema.Medication_T.phNote.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phNote.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phNote.i18n' )
                    },
                    "phReason": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.Medication_T_phReason",
                        i18n: i18n( 'activity-schema.Medication_T.phReason.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phReason.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phReason.i18n' )
                    },
                    "phSelfMedication": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phSelfMedication.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phSelfMedication.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phSelfMedication.i18n' )
                    },
                    "phSalesStatus": {
                        "complex": "eq",
                        "type": "PhSalesStatus_E",
                        "apiv": {v: 2, queryParam: false},
                        i18n: i18n( 'activity-schema.Medication_T.PhSalesStatus.i18n' ),
                        "lib": types
                    },
                    "phNormSize": {
                        "type": "PhNormSize_E",
                        "apiv": {v: 2, queryParam: false},
                        i18n: i18n( 'activity-schema.Medication_T.phNormSize.i18n' ),
                        "complex": "eq",
                        "lib": types
                    },
                    "phHeader": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phHeader.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phHeader.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phHeader.i18n' )
                    },
                    "isPrescribed": {
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.isPrescribed.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.isPrescribed.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.isPrescribed.i18n' )
                    },
                    "restRequestId": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Prescription_T.restRequestId.i18n' ),
                        "-en": "restRequestId",
                        "-de": "restRequestId"
                    },
                    "isDispensed": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.Medication_T.isDispensed.i18n' ),
                        "-en": "Is dispensed",
                        "-de": "Abgegeben"
                    },
                    "isArrived": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'activity-schema.Medication_T.isArrived.i18n' ),
                        "-en": "is ordered",
                        "-de": "ist bestellt"
                    },
                    "orderId": {
                        "type": "ObjectId",
                        "default": null,
                        i18n: i18n( 'activity-schema.Medication_T.orderId.i18n' ),
                        "-en": "is ordered",
                        "-de": "ist bestellt"
                    },
                    "phFormCode": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phFormCode.i18n' ),
                        "-en": "Format IFA Code",
                        "-de": "Darreichungsform IFA-Code"
                    },
                    "phDosisUnitCode": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.phDosisUnitCode.i18n' ),
                        "-en": "Dosis Form IFA Code",
                        "-de": "Dosiereinheit IFA-Code"
                    },
                    "medication_CH": {
                        complex: "ext",
                        type: "Medication_CH_T",
                        lib: types
                    },
                    "explanations": {
                        "default": '',
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_T.explanations.i18n' )
                    },
                    "adherence": {
                        "default": false,
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.adherence.i18n' )
                    },
                    "source": {
                        "default": '',
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.source.i18n' )
                    },
                    "noLongerValid": {
                        default:  false,
                        type: "Boolean",
                        i18n: i18n(  'activity-schema.Medication_T.noLongerValid.i18n' )
                    },
                    "sourceType": {
                        "type": "MedicationSourceType_E",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Medication_T.sourceType.i18n' ),
                        "complex": "eq",
                        "lib": types
                    },
                    "phContraceptive": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Medication_T.phContraceptive.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phContraceptive.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phContraceptive.i18n' )
                    },
                    "s_extra": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.s_extra.i18n' ),
                        "-en": "inStock Extras",
                        "-de": "inStock Extras"
                    }

                },
                "Medication_CH_T": {
                    "phGTIN": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Medication_CH_T.phGTIN.i18n' ),
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        "-en": "GTIN code",
                        "-de": "GTIN Code"
                    },
                    "insuranceDescription": {
                        "type": "String",
                        "-en": "Insurance Code",
                        "default": "",
                        "-de": "Krankenkassencode",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_CH_T.insuranceCode.i18n' )
                    },
                    "insuranceCode": {
                        "type": "String",
                        "-en": "Insurance Code",
                        "default": "",
                        "-de": "Krankenkassencode",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_CH_T.insuranceCode.i18n' )
                    },
                    "paidByInsurance": {
                        "type": "Boolean",
                        "-en": "Paid by Insurance",
                        "-de": "Verischerung bezahlt",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_CH_T.paidByInsurance.i18n' )
                    },
                    "supplyCategory": {
                        "type": "String",
                        "-en": "SwissMedic supply category",
                        "-de": "SwissMedic Abgabekategorie",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_CH_T.supplyCategory.i18n' )
                    },
                    "prdNo": {
                        "type": "String",
                        "-en": "Product number",
                        "-de": "Produktnummer",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_T.prdNo.i18n' )
                    },
                    'phUnitDescription': {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-en": "Einheit",
                        "-de": "Unit"
                    },
                    "phForeignUnit": {
                        "default": "",
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phUnit.i18n' )
                    },
                    'units': {
                        "default": [],
                        "type": "any",
                        "apiv": { v: 2, queryParam: false, countryMode: ["CH"] },
                        i18n: i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_T.phUnit.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_T.phUnit.i18n' )
                    },
                    'isDivisible': {
                        type: "Boolean",
                        i18n: i18n( 'activity-schema.Medication_CH_T.isDivisible.i18n' ),
                        "-en": i18n( 'activity-schema.Medication_CH_T.isDivisible.i18n' ),
                        "-de": i18n( 'activity-schema.Medication_CH_T.isDivisible.i18n' )
                    },
                    "divisibleCount": {
                        type: "Number",
                        i18n: i18n( 'InStockMojit.instock_schema.InStock_T.divisibleCount' ),
                        required: false,
                        "-en": "Divisible count",
                        "-de": "Kleinste Abgabemenge"
                    }
                },
                "PhIngr_T": {
                    "code": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.PhIngr_T.code.i18n' ),
                        "-en": "Ingredient id",
                        "-de": "Ingredient id"
                    },
                    "name": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.PhIngr_T.name.i18n' ),
                        "validate": "kbv.PhIngr_T_name",
                        "-en": "Ingredient name",
                        "-de": "Ingredient name"
                    },
                    "shortName": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.PhIngr_T.shortName.i18n' ),
                        "-en": "Ingredient name (short)",
                        "-de": "Ingredient name (short)"
                    },
                    "strength": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.PhIngr_T.strength.i18n' ),
                        "-en": "Ingredient name",
                        "-de": "Ingredient name"
                    }
                },
                "PhARVContent_T": {
                    "title": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhARVContent_T.title.i18n' ),
                        "-en": "Title",
                        "-de": "Title"
                    },
                    "hint": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhARVContent_T.hint.i18n' ),
                        "-en": "Hint",
                        "-de": "Hinweis"
                    },
                    "datesInfo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhARVContent_T.datesInfo.i18n' ),
                        "-en": "Validity",
                        "-de": "Gültigkeit"
                    },
                    "hasAlternatives": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.PhARVContent_T.hasAlternatives.i18n' ),
                        "-en": "Has alternatives",
                        "-de": "Hat Alternativen"
                    }
                },
                "PhAMRContent_T": {
                    "title": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhAMRContent_T.title.i18n' ),
                        "-en": "Title",
                        "-de": "Title"
                    },
                    "text": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhAMRContent_T.text.i18n' ),
                        "-en": "Text",
                        "-de": "Text"
                    },
                    "regulationTypeCode": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhAMRContent_T.regulationTypeCode.i18n' ),
                        "-en": "regulationTypeCode",
                        "-de": "regulationTypeCode"
                    },
                    "limitation": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhAMRContent_T.limitation.i18n' ),
                        "-en": "limitation",
                        "-de": "limitation"
                    },
                    "fileName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.PhAMRContent_T.fileName.i18n' ),
                        "-en": "filename",
                        "-de": "Dateiname"
                    }
                },
                "PhDosisType_E": {
                    "type": "string",
                    "apiv": { v: 2, queryParam: false },
                    "default": phDosisTypes.SCHEDULE,
                    i18n: i18n( 'activity-schema.Medication_T.phDosisType.i18n' ),
                    "-en": i18n( 'activity-schema.Medication_T.phDosisType.i18n' ),
                    "-de": i18n( 'activity-schema.Medication_T.phDosisType.i18n' ),
                    "list": createSchemaPhDosisTypeList()
                },
                "PhSalesStatus_E": {
                    // Maps values from MMI phSaleStatus and MedIndex SALECD into a unified value.
                    // Values from MMI acted as a base. Two values are added from MedIndex Catalog.
                    // These are PREVIEW (Medindex: SALECD - R) and PROVISIONAL (Medindex SALECD - P).
                    // The CH-translation of OFFMARKET, ONMARKET equate the MedIndex wording.
                    "type": "String",
                    "default": "UNKNOWN",
                    i18n: i18n( 'activity-schema.Medication_T.PhSalesStatus.i18n' ),
                    "-en": i18n( 'activity-schema.Medication_T.PhSalesStatus.i18n' ),
                    "-de": i18n( 'activity-schema.Medication_T.PhSalesStatus.i18n' ),
                    "list": [
                        {
                            "val": "UNKNOWN", // DEFAULT NO MMI CODE
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.UNKNOWN.i18n' ),
                            "-en": "unknown",
                            "-de": "Unbekannt"
                        }, {
                            "val": "DISCONTINUE", // MMI CODE: D
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.DISCONTINUE.i18n' ),
                            "-en": "discontinue",
                            "-de": "Wegfall"
                        },
                        {
                            "val": "OFFMARKET", // MMI CODE: F // in Medindex SALECD - H
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.OFFMARKET.i18n' ),
                            "-en": "offmarket",
                            "-de": "Außer Vertrieb"
                        },
                        {
                            "val": "ONMARKET", // MMI CODE: N // Medindex SALECD - N
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.ONMARKET.i18n' ),
                            "-en": "onmarket",
                            "-de": "Im Vertrieb"
                        },
                        {
                            "val": "RECALL", // MMI CODE: R
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.RECALL.i18n' ),
                            "-en": "recall",
                            "-de": "Rückruf"
                        },
                        {
                            "val": "OFFTAKE", // MMI CODE: Z
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.OFFTAKE.i18n' ),
                            "-en": "offtake",
                            "-de": "Zurückgezogen"
                        },
                        {
                            "val": "PROVISIONAL", // Medindex SALECD - P
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.PROVISIONAL.i18n' ),
                            "-en": "provisional",
                            "-de": "Provisorisch"
                        },
                        {
                            "val": "PREVIEW", // Medindex SALECD - R
                            i18n: i18n( 'activity-schema.PhSalesStatus_E.PREVIEW.i18n' ),
                            "-en": "not yet distributed Preview",
                            "-de": "noch nicht im Handel"
                        }
                    ]
                },
                "PhNormSize_E": {
                    "type": "String",
                    "default": "UNKNOWN",
                    i18n: i18n( 'activity-schema.Medication_T.phNormSize.i18n' ),
                    "-en": i18n( 'activity-schema.Medication_T.phNormSize.i18n' ),
                    "-de": i18n( 'activity-schema.Medication_T.phNormSize.i18n' ),
                    "list": [
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.PhNormSize_E.UNKNOWN' ),
                            "-en": "Unknown",
                            "-de": "Unbekannt"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.PhNormSize_E.0' ),
                            "-en": "No therapy-appropriate package size",
                            "-de": "Keine therapiegerechte Packungsgröße"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.PhNormSize_E.1' ),
                            "-en": "N1",
                            "-de": "N1"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.PhNormSize_E.2' ),
                            "-en": "N2",
                            "-de": "N2"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.PhNormSize_E.3' ),
                            "-en": "N3",
                            "-de": "N3"
                        },
                        {
                            "val": "A",
                            i18n: i18n( 'activity-schema.PhNormSize_E.A' ),
                            "-en": "Institute pack",
                            "-de": "Anstaltspackung"
                        },
                        {
                            "val": "K",
                            i18n: i18n( 'activity-schema.PhNormSize_E.K' ),
                            "-en": "Hospital pack",
                            "-de": "Klinikpackung"
                        },
                        {
                            "val": "N",
                            i18n: i18n( 'activity-schema.PhNormSize_E.N' ),
                            "-en": "Not affected",
                            "-de": "Nicht betroffen"
                        }
                    ]
                },
                "MedicationSourceType_E": {
                    "type": "String",
                    "default": "",
                    i18n: i18n( 'activity-schema.Medication_T.sourceType.i18n' ),
                    "-en": i18n( 'activity-schema.Medication_T.sourceType.i18n' ),
                    "-de": i18n( 'activity-schema.Medication_T.sourceType.i18n' ),
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.MedicationSourceType_E.NONE' )
                        },
                        {
                            "val": "MEDICATIONPLAN",
                            i18n: i18n( 'activity-schema.MedicationSourceType_E.MEDICATIONPLAN' )
                        },
                        {
                            "val": "BROWNBAG",
                            i18n: i18n( 'activity-schema.MedicationSourceType_E.BROWNBAG' )
                        },
                        {
                            "val": "DOCLETTER",
                            i18n: i18n( 'activity-schema.MedicationSourceType_E.DOCLETTER' )
                        },
                        {
                            "val": "DISCHARGELETTER",
                            i18n: i18n( 'activity-schema.MedicationSourceType_E.DISCHARGELETTER' )
                        },
                        {
                            "val": "PATIENTSTATEMENT",
                            i18n: i18n( 'activity-schema.MedicationSourceType_E.PATIENTSTATEMENT' )
                        }
                    ]
                },
                "UvGoaeType_E": {
                    "type": "string",
                    i18n: i18n( 'activity-schema.UvGoaeType_E.i18n' ),
                    "list": [
                        {
                            "val": "bg_ahb",
                            i18n: i18n( 'activity-schema.UvGoaeType_E.bg_ahb' ),
                            "-en": "Allgemeine Heilbehandlung",
                            "-de": "Allgemeine Heilbehandlung"
                        },
                        {
                            "val": "bg_bhb",
                            i18n: i18n( 'activity-schema.UvGoaeType_E.bg_bhb' ),
                            "-en": "Besondere Heilbehandlung",
                            "-de": "Besondere Heilbehandlung"
                        }
                    ]
                },
                "CostType_E": {
                    default: "",
                    "type": "string",
                    i18n: i18n( 'activity-schema.Treatment_T.costType.i18n' ),
                    "list": [
                        {
                            "val": "",
                            i18n: i18n( 'activity-schema.CostType_E.KEINE.i18n' ),
                            "-en": "keine",
                            "-de": "keine"
                        },
                        {
                            "val": "MATERIAL",
                            i18n: i18n( 'activity-schema.CostType_E.MATERIAL.i18n' ),
                            "-en": "Material",
                            "-de": "Materialkosten"
                        },
                        {
                            "val": "POST",
                            i18n: i18n( 'activity-schema.CostType_E.POST.i18n' ),
                            "-en": "Post",
                            "-de": "Porto"
                        },
                        {
                            "val": "MEDICATION",
                            i18n: i18n( 'activity-schema.CostType_E.MEDICATION.i18n' ),
                            "-en": "Medication",
                            "-de": "Medikamente"
                        },
                        {
                            "val": "DOCTORFEE",
                            i18n: i18n( 'activity-schema.CostType_E.DOCTORFEE.i18n' ),
                            "-en": "Doctorfee",
                            "-de": "Honorar"
                        }
                    ]
                },
                "GnrAdditionalInfo_E": {
                    "default": "NONE",
                    "type": ["String"],
                    i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.i18n' ),
                    "list": [
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.NONE.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.NONE.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.NONE.i18n' )
                        },
                        {
                            "val": "5006",
                            trackPath: 'daySeparation',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5006.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5006.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5006.i18n' )
                        },
                        {
                            "val": "5035",
                            trackPath: 'fk5035Set.fk5035',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5035.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5035.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5035.i18n' )
                        },
                        {
                            "val": "5036",
                            trackPath: 'fk5036Set.fk5036',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5036.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5036.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5036.i18n' )
                        },
                        {
                            "val": "5034",
                            trackPath: 'fk5034',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5034.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5034.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5034.i18n' )
                        },
                        {
                            "val": "5020",
                            trackPath: 'fk5020Set.fk5020',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5020.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5020.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5020.i18n' )
                        },
                        {
                            "val": "5021",
                            trackPath: 'fk5020Set.fk5021',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5021.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5021.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5021.i18n' )
                        },
                        {
                            "val": "5040",
                            trackPath: 'fk5040',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5040.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5040.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5040.i18n' )
                        },
                        {
                            "val": "5026",
                            trackPath: 'fk5026',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5026.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5026.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5026.i18n' )
                        },
                        {
                            "val": "5042",
                            trackPath: 'fk5042Set.fk5042',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5042.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5042.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5042.i18n' )
                        },
                        {
                            "val": "5043",
                            trackPath: 'fk5042Set.fk5043',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5043.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5043.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5043.i18n' )
                        },
                        {
                            "val": "5009",
                            trackPath: 'explanations',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5009.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5009.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5009.i18n' )
                        },
                        {
                            "val": "5070",
                            trackPath: 'omimCodes.fk5070',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5070.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5070.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5070.i18n' )
                        },
                        {
                            "val": "5002",
                            trackPath: 'fk5002',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5002.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5002.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5002.i18n' )
                        },
                        {
                            "val": "5015",
                            trackPath: 'fk5015',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5015.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5015.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5015.i18n' )
                        },
                        {
                            "val": "5016",
                            trackPath: 'fk5016',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5016.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5016.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5016.i18n' )
                        },
                        {
                            "val": "5071",
                            trackPath: 'omimCodes.fk5071',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5071.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5071.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5071.i18n' )
                        },
                        {
                            "val": "5011",
                            trackPath: 'fk5011Set.fk5011',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5011.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5011.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5011.i18n' )
                        },
                        {
                            "val": "5012",
                            trackPath: 'fk5012Set.fk5012',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5012.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5012.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5012.i18n' )
                        },
                        {
                            "val": "5025",
                            trackPath: 'fk5025',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5025.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5025.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5025.i18n' )
                        },
                        {
                            "val": "5003",
                            trackPath: 'tsvDoctorNo',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5003.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5003.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5003.i18n' )
                        },
                        {
                            "val": "5010",
                            trackPath: 'fk5010BatchNumber',
                            i18n: i18n( 'activity-schema.GnrAdditionalInfo_E.5010.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfo_E.5010.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfo_E.5010.i18n' )
                        }
                    ]
                },
                "GnrAdditionalInfoType_E": {
                    'default': "AUSWAHL",
                    "type": "String",
                    i18n: i18n( 'activity-schema.GnrAdditionalInfoType_E.i18n' ),
                    "list": [
                        {
                            "val": "AUSWAHL",
                            i18n: i18n( 'activity-schema.GnrAdditionalInfoType_E.AUSWAHL.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfoType_E.AUSWAHL.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfoType_E.AUSWAHL.i18n' )
                        },
                        {
                            "val": "SEQUENZ",
                            i18n: i18n( 'activity-schema.GnrAdditionalInfoType_E.SEQUENZ.i18n' ),
                            "-en": i18n( 'activity-schema.GnrAdditionalInfoType_E.SEQUENZ.i18n' ),
                            "-de": i18n( 'activity-schema.GnrAdditionalInfoType_E.SEQUENZ.i18n' )
                        }
                    ]
                },
                "GebuehType_E": {
                    "type": "string",
                    i18n: i18n( 'activity-schema.Treatment_T.gebuehType.i18n' ),
                    "list": [
                        {
                            "val": "pkv1",
                            i18n: i18n( 'activity-schema.GebuehType_E.pkv1' ),
                            "-en": "PKV 1",
                            "-de": "PKV 1"
                        },
                        {
                            "val": "pkv2",
                            i18n: i18n( 'activity-schema.GebuehType_E.pkv2' ),
                            "-en": "PKV 2",
                            "-de": "PKV 2"
                        },
                        {
                            "val": "beihilfe",
                            i18n: i18n( 'activity-schema.GebuehType_E.beihilfe' ),
                            "-en": "Beihilfe",
                            "-de": "Beihilfe"
                        },
                        {
                            "val": "postb",
                            i18n: i18n( 'activity-schema.GebuehType_E.postb' ),
                            "-en": "Post B.",
                            "-de": "Post B."
                        },
                        {
                            "val": "gesetzlich",
                            i18n: i18n( 'activity-schema.GebuehType_E.gesetzlich' ),
                            "-en": "gesetzlich",
                            "-de": "gesetzlich"
                        },
                        {
                            "val": "gesetzlichkl",
                            i18n: i18n( 'activity-schema.GebuehType_E.gesetzlichkl' ),
                            "-en": "gesetzlichkl",
                            "-de": "gesetzlichkl"
                        }
                    ]
                },
                "OphthalmologyTonometry_T": {
                    "otNRead": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNRead.i18n' ),
                        "-en": 'last read on',
                        "-de": 'zuletzt gelesen am'
                    },
                    "otNR1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNR1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR1.label' )
                    },
                    "otNR2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNR2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR2.label' )
                    },
                    "otNR3": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNR3.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR3.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR3.label' )
                    },
                    "otNR4": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNR4.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR4.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNR4.label' )
                    },
                    "otNCCTR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNCCTR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNCCTR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNCCTR.label' )
                    },
                    "otNFacR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNFacR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNFacR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNFacR.label' )
                    },
                    "otNL1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNL1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL1.label' )
                    },
                    "otNL2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNL2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL2.label' )
                    },
                    "otNL3": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNL3.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL3.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL3.label' )
                    },
                    "otNL4": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNL4.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL4.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNL4.label' )
                    },
                    "otNCCTL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNCCTL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNCCTL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNCCTL.label' )
                    },
                    "otNFacL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otNFacL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otNFacL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otNFacL.label' )
                    },
                    "otPRead": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPRead.i18n' ),
                        "-en": 'last read on',
                        "-de": 'zuletzt gelesen am'
                    },
                    "otPR1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPR1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR1.label' )
                    },
                    "otPR2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPR2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR2.label' )
                    },
                    "otPR3": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPR3.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR3.label' ), // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR3.label' ) // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                    },
                    "otPR4": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPR4.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR4.label' ), // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPR4.label' ) // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                    },
                    "otPL1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPL1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL1.label' )
                    },
                    "otPL2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPL2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL2.label' )
                    },
                    "otPL3": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPL3.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL3.label' ), // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL3.label' ) // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                    },
                    "otPL4": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otPL4.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL4.label' ), // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otPL4.label' ) // (zur Erklärung: OPA=Oculare Pulsation Amplitude)
                    },
                    "otGRead": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otGRead.i18n' ),
                        "-en": 'last read on',
                        "-de": 'zuletzt gelesen am'
                    },
                    "otGR1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otGR1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otGR1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otGR1.label' )
                    },
                    "otGR2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otGR2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otGR2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otGR2.label' )
                    },
                    "otGL1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otGL1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otGL1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otGL1.label' )
                    },
                    "otGL2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otGL2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otGL2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otGL2.label' )
                    },
                    "otIRead": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otIRead.i18n' ),
                        "-en": 'last read on',
                        "-de": 'zuletzt gelesen am'
                    },
                    "otIR1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otIR1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otIR1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otIR1.label' )
                    },
                    "otIR2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otIR2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otIR2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otIR2.label' )
                    },
                    "otIL1": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otIL1.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otIL1.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otIL1.label' )
                    },
                    "otIL2": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otIL2.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyTonometry_T.otIL2.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyTonometry_T.otIL2.label' )
                    },
                    "otAppliedSet": {
                        "complex": "inc",
                        "type": "OtAppliedSet_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.OphthalmologyTonometry_T.otAppliedSet.i18n' ),
                        "-en": "Applied",
                        "-de": "Verabreicht"
                    }
                },
                "OtAppliedSet_T": {
                    "otAppliedAtL": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OtAppliedSet_T.otAppliedAtL.i18n' ),
                        "-en": 'When',
                        "-de": 'Wann'
                    },
                    "otAppliedAtR": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OtAppliedSet_T.otAppliedAtR.i18n' ),
                        "-en": 'When',
                        "-de": 'Wann'
                    },
                    "otAppliedContentL": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.OtAppliedSet_T.otAppliedContentL.i18n' ),
                        "-en": "Medication",
                        "-de": "Medikament"
                    },
                    "otAppliedContentR": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.OtAppliedSet_T.otAppliedContentR.i18n' ),
                        "-en": "Medication",
                        "-de": "Medikament"
                    }
                },
                "OphthalmologyRefraction_T": {
                    "orType": {
                        "complex": "eq",
                        "type": "orType_E",
                        "lib": types
                    },
                    "orRead": {
                        "type": "Date",
                        "default": null,
                        "validate": "kbv.Ophthalmology_read",
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orRead.i18n' ),
                        "-en": 'last read on',
                        "-de": 'zuletzt gelesen am'
                    },
                    "orSphL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orSphL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orSphL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orSphL.label' )
                    },
                    "orSphR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orSphR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orSphR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orSphR.label' )
                    },
                    "orCylL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orCylL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orCylL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orCylL.label' )
                    },
                    "orCylR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orCylR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orCylR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orCylR.label' )
                    },
                    "orAxsL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsL.label' )
                    },
                    "orAxsR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsR.label' )
                    },
                    "orAddL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orAddL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orAddL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orAddL.label' )
                    },
                    "orAddR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orAddR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orAddR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orAddR.label' )
                    },
                    "orPsmL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orPsmL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orPsmL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orPsmL.label' )
                    },
                    "orPsmR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orPsmR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orPsmR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orPsmR.label' )
                    },
                    "orBasL": {
                        "complex": "eq",
                        "type": "orBas_E",
                        "lib": types
                    },
                    "orBasR": {
                        "complex": "eq",
                        "type": "orBas_E",
                        "lib": types
                    },
                    "orAdd2L": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orAdd2L.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orAdd2L.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orAdd2L.label' )
                    },
                    "orAdd2R": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orAdd2R.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orAdd2R.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orAdd2R.label' )
                    },
                    "orVisAcuTyp": {
                        "complex": "eq",
                        "type": "orVisAcuTyp_E",
                        "lib": types
                    },
                    "orFarL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orFarL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orFarL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orFarL.label' )
                    },
                    "orFarR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orFarR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orFarR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orFarR.label' )
                    },
                    "orFarB": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orFarB.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orFarB.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orFarB.label' )
                    },
                    "orNearL": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orNearL.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orNearL.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orNearL.label' )
                    },
                    "orNearR": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orNearR.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orNearR.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orNearR.label' )
                    },
                    "orNearB": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orNearB.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orNearB.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orNearB.label' )
                    },
                    "orPD": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orPD.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orPD.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orPD.label' )
                    },
                    "orHSA": {
                        "type": "Number",
                        "default": null,
                        i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orHSA.label' ),
                        "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orHSA.label' ),
                        "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orHSA.label' )
                    }
                },
                "orType_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orType.label' ),
                    "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orType.label' ),
                    "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orType.label' ),
                    "list": [
                        {
                            "val": "",
                            "-de": "k.A.",// keine Angabe
                            i18n: i18n( 'activity-schema.orType_E.' ),
                            "-en": "N.S."// not specified
                        },
                        {
                            "val": "REF",
                            "-de": "REF",// (manuell)
                            i18n: i18n( 'activity-schema.orType_E.REF' ),
                            "-en": "REF"
                        },
                        {
                            "val": "REF_IN_CYCLO",
                            "-de": "REF in Cyclo",// (manuell und weitgetropft)
                            i18n: i18n( 'activity-schema.orType_E.REF_IN_CYCLO' ),
                            "-en": "REF in Cyclo"
                        },
                        {
                            "val": "LM",
                            "-de": "LM",// (Lensmeter)
                            i18n: i18n( 'activity-schema.orType_E.LM' ),
                            "-en": "LM"
                        },
                        {
                            "val": "AR",
                            "-de": "AR",// (Autorefraktor)
                            i18n: i18n( 'activity-schema.orType_E.AR' ),
                            "-en": "AR"
                        },
                        {
                            "val": "OR",
                            "-de": "OR",
                            i18n: i18n( 'activity-schema.orType_E.OR' ),
                            "-en": "OR"
                        },
                        {
                            "val": "SB",
                            "-de": "SB",
                            i18n: i18n( 'activity-schema.orType_E.SB' ),
                            "-en": "SB"
                        },
                        {
                            "val": "SBM",
                            "-de": "SBM",
                            i18n: i18n( 'activity-schema.orType_E.SBM' ),
                            "-en": "SBM"
                        },
                        {
                            "val": "PH",
                            "-de": "PH",
                            i18n: i18n( 'activity-schema.orType_E.PH' ),
                            "-en": "PH"
                        },
                        {
                            "val": "OPX",
                            "-de": "OPX",
                            i18n: i18n( 'activity-schema.orType_E.OPX' ),
                            "-en": "OPX"
                        },
                        {
                            "val": "SKI_IN_MYD",
                            "-de": "SKI IN MYD",
                            i18n: i18n( 'activity-schema.orType_E.SKI_IN_MYD' ),
                            "-en": "SKI IN MYD"
                        },
                        {
                            "val": "SKI_IN_CYCLO",
                            "-de": "SKI IN CYCLO",
                            i18n: i18n( 'activity-schema.orType_E.SKI_IN_CYCLO' ),
                            "-en": "SKI IN CYCLO"
                        },
                        {
                            "val": "SKI_IN_MYO",
                            "-de": "SKI IN MYO.",
                            i18n: i18n( 'activity-schema.orType_E.SKI_IN_MYO' ),
                            "-en": "SKI IN MYO."
                        }
                    ]
                },
                "orBas_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.orBas_E.i18n' ),
                    "-en": 'Base',
                    "-de": 'Basis',
                    "list": [
                        {
                            "val": "",
                            "-de": "k.A.",// keine Angabe
                            i18n: i18n( 'activity-schema.orBas_E.' ),
                            "-en": "N.S."// not specified
                        },
                        {
                            "val": "INSIDE",
                            "-de": "innen",
                            i18n: i18n( 'activity-schema.orBas_E.INSIDE' ),
                            "-en": "Inside"
                        },
                        {
                            "val": "OUTSIDE",
                            "-de": "außen",
                            i18n: i18n( 'activity-schema.orBas_E.OUTSIDE' ),
                            "-en": "Outside"
                        },
                        {
                            "val": "ABOVE",
                            "-de": "oben",
                            i18n: i18n( 'activity-schema.orBas_E.ABOVE' ),
                            "-en": "Above"
                        },
                        {
                            "val": "BELOW",
                            "-de": "unten",
                            i18n: i18n( 'activity-schema.orBas_E.BELOW' ),
                            "-en": "Below"
                        }
                    ]
                },
                "orVisAcuTyp_E": {
                    "default": "",
                    "type": "String",
                    i18n: i18n( 'activity-schema.OphthalmologyRefraction_T.orVisAcuTyp.label' ),
                    "-en": i18n( 'activity-schema.OphthalmologyRefraction_T.orVisAcuTyp.label' ),
                    "-de": i18n( 'activity-schema.OphthalmologyRefraction_T.orVisAcuTyp.label' ),
                    "list": [
                        {
                            "val": "",
                            "-de": "k.A.",// keine Angabe
                            i18n: i18n( 'activity-schema.orVisAcuTyp_E.' ),
                            "-en": "N.S."// not specified
                        },
                        {
                            "val": "SC",
                            "-de": "sc",// sin correctione, Visus ohne Korrektion
                            i18n: i18n( 'activity-schema.orVisAcuTyp_E.SC' ),
                            "-en": "sc"
                        },
                        {
                            "val": "OG",
                            "-de": "m.e.Br.",// mit eigener Brille
                            i18n: i18n( 'activity-schema.orVisAcuTyp_E.OG' ),
                            "-en": "o.g." // own glasses
                        },
                        {
                            "val": "WCL",
                            "-de": "cKL",// mit Kontaktlinse
                            i18n: i18n( 'activity-schema.orVisAcuTyp_E.WCL' ),
                            "-en": "wCL" // with contact lens
                        }
                    ]
                },
                "Utility_T": {
                    "utDiagnosisName": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utDiagnosisName.i18n' ),
                        "-en": "utDiagnosisName",
                        "-de": "HM Diagnose Text"
                    },
                    "utRemedy1Name": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1Name.i18n' ),
                        "-en": "utRemedy1",
                        "-de": "HM Verordnung 1"
                    },
                    "utRemedy1Item": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1Item.i18n' ),
                        "-en": "utRemedy1Item",
                        "-de": "HM Verordnung Position 1"
                    },
                    "utRemedy1ItemPrice": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1ItemPrice.i18n' ),
                        "-en": "utRemedy1ItemPrice",
                        "-de": "HM Verordnung Position 1 Preis"
                    },
                    "utRemedy1Explanation": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1Explanation.i18n' ),
                        "-en": "utRemedy1Explanation",
                        "-de": "HM Verordnung 1 Erklärung"
                    },
                    "utRemedy1Seasons": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1Seasons.i18n' ),
                        "-en": "utRemedy1Seasons",
                        "-de": "HM Sitzungen 1"
                    },
                    "utRemedy1ParentsSeasons": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1ParentsSeasons.i18n' ),
                        "-en": "utRemedy1ParentsSeasons",
                        "-de": "utRemedy1ParentsSeasons"
                    },
                    "utRemedy1PerWeek": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        "validate": "numRange",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy1PerWeek.i18n' ),
                        "-en": "utRemedy1Seasons",
                        "-de": "HM Frequenz 1"
                    },
                    "utRemedy2Name": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2Name.i18n' ),
                        "-en": "utRemedy2",
                        "-de": "HM Verordnung 2"
                    },
                    "utRemedy2Item": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2Item.i18n' ),
                        "-en": "utRemedy2Item",
                        "-de": "HM Verordnung Position 2"
                    },
                    "utRemedy2ItemPrice": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2ItemPrice.i18n' ),
                        "-en": "utRemedy2ItemPrice",
                        "-de": "HM Verordnung Position 2 Preis"
                    },
                    "utRemedy2Explanation": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2Explanation.i18n' ),
                        "-en": "utRemedy2Explanation",
                        "-de": "HM Verordnung 2 Erklärung"
                    },
                    "utRemedy2Seasons": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2Seasons.i18n' ),
                        "-en": "utRemedy2Seasons",
                        "-de": "HM Sitzungen 2"
                    },
                    "utRemedy2ParentsSeasons": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2ParentsSeasons.i18n' ),
                        "-en": "utRemedy2ParentsSeasons",
                        "-de": "utRemedy2ParentsSeasons"
                    },
                    "utRemedy2PerWeek": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRemedy2PerWeek.i18n' ),
                        "-en": "utRemedy2Seasons",
                        "-de": "HM Frequenz 2"
                    },
                    "utVocalTherapy": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utVocalTherapy.i18n' ),
                        "-en": "utVocalTherapy",
                        "-de": "HM Stimmtherapie"
                    },
                    "utSpeakTherapy": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utSpeakTherapy.i18n' ),
                        "-en": "utSpeakTherapy",
                        "-de": "HM Sprechtherapie"
                    },
                    "utSpeechTherapy": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utSpeechTherapy.i18n' ),
                        "-en": "utSpeechTherapy",
                        "-de": "HM Sprachtherapie"
                    },
                    "utPrescriptionType": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utPrescriptionType.i18n' ),
                        "-en": "utFirstOrFollowing",
                        "-de": "utPrescriptionType"
                    },
                    "utNoNormalCase": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utNoNormalCase.i18n' ),
                        "-en": "utNoNormalCase",
                        "-de": "HM Kein Regelfall"
                    },
                    "utHomeVisit": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utHomeVisit.i18n' ),
                        "-en": "utHomeVisit",
                        "-de": "HM Hausbesuch"
                    },
                    "utTherapyReport": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utTherapyReport.i18n' ),
                        "-en": "utTherapyReport",
                        "-de": "HM Ist Bericht"
                    },
                    "utGroupTherapy": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utGroupTherapy.i18n' ),
                        "-en": "utGroupTherapy",
                        "-de": "HM Ist Gruppentherapie"
                    },
                    "utDurationOfSeason": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Utility_T.utDurationOfSeason.i18n' ),
                        "-en": "utDurationOfSeason",
                        "-de": "HM Dauer"
                    },
                    "utLatestStartOfTreatment": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Utility_T.utLatestStartOfTreatment.i18n' ),
                        "-en": "utLatestStartOfTreatment",
                        "-de": "HM Behandlungsstart"
                    },
                    "utMedicalJustification": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utMedicalJustification.i18n' ),
                        "-en": "utMedicalJustification",
                        "-de": "HM Begründung"
                    },
                    "utTherapyGoals": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utTherapyGoals.i18n' ),
                        "-en": "utTherapyGoals",
                        "-de": "HM Ziele"
                    },
                    "utTherapyGoalsList": {
                        "apiv": { v: 2, queryParam: false },
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Utility_T.utTherapyGoals.i18n' ),
                        "-en": "utTherapyGoals",
                        "-de": "HM Ziele"
                    },
                    "utUnfall": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utUnfall.i18n' ),
                        "-en": "Unfall",
                        "-de": "Unfall"
                    },
                    "utBvg": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utBvg.i18n' ),
                        "-en": "BVG",
                        "-de": "BVG"
                    },
                    "utNeuroFinding": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utNeuroFinding.i18n' ),
                        "-en": "HM Neurologische, pädiatrische Besonderheiten",
                        "-de": "HM Neurologische, pädiatrische Besonderheiten"
                    },
                    "utAudioDiagDate": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Utility_T.utAudioDiagDate.i18n' ),
                        "-en": "HM Tonaudiodiagramm vom",
                        "-de": "HM Tonaudiodiagramm vom"
                    },
                    "utAudioDiagReact": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utAudioDiagReact.i18n' ),
                        "-en": "HM Freifeldbefunde ermittelt durch Reaktion",
                        "-de": "HM Freifeldbefunde ermittelt durch Reaktion"
                    },
                    "utAudioDiagCond": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utAudioDiagCond.i18n' ),
                        "-en": "HM Freifeldbefunde ermittelt durch Konditionierung",
                        "-de": "HM Freifeldbefunde ermittelt durch Konditionierung"
                    },
                    "utAudioDiagOwn": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utAudioDiagOwn.i18n' ),
                        "-en": "HM Freifeldbefunde ermittelt durch eigene Angaben",
                        "-de": "HM Freifeldbefunde ermittelt durch eigene Angaben"
                    },
                    "utLupenlaryngoskopie": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utLupenlaryngoskopie.i18n' ),
                        "-en": "HM Lupenlaryngoskopie",
                        "-de": "HM Lupenlaryngoskopie"
                    },
                    "utLupenstroboskopieRight": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utLupenstroboskopieRight.i18n' ),
                        "-en": "HM Lupenstroboskopie Rechts",
                        "-de": "HM Lupenstroboskopie Rechts"
                    },
                    "utLupenstroboskopieLeft": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utLupenstroboskopieLeft.i18n' ),
                        "-en": "HM Lupenstroboskopie Links",
                        "-de": "HM Lupenstroboskopie Links"
                    },
                    "utAmplitudeRight": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utAmplitudeRight.i18n' ),
                        "-en": "HM Amplitude Rechts",
                        "-de": "HM Amplitude Rechts"
                    },
                    "utAmplitudeLeft": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utAmplitudeLeft.i18n' ),
                        "-en": "HM Amplitude Links",
                        "-de": "HM Amplitude Links"
                    },
                    "utRandkantenverschiebungRight": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRandkantenverschiebungRight.i18n' ),
                        "-en": "HM Randkantenverschiebung Rechts",
                        "-de": "HM Randkantenverschiebung Rechts"
                    },
                    "utRandkantenverschiebungLeft": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utRandkantenverschiebungLeft.i18n' ),
                        "-en": "HM Randkantenverschiebung Links",
                        "-de": "HM Randkantenverschiebung Links"
                    },
                    "utRegular": {
                        "complex": "eq",
                        "type": "UtRegular_E",
                        "lib": types
                    },
                    "utGlottisschluss": {
                        "complex": "eq",
                        "type": "UtGlottisschluss_E",
                        "lib": types
                    },
                    "utEarDrumFindingRight": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utEarDrumFindingRight.i18n' ),
                        "-en": "HM Trommelfellbefund Rechts",
                        "-de": "HM Trommelfellbefund Rechts"
                    },
                    "utEarDrumFindingLeft": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utEarDrumFindingLeft.i18n' ),
                        "-en": "HM Trommelfellbefund Links",
                        "-de": "HM Trommelfellbefund Links"
                    }
                    // HM Indikation = content field.
                    // HM Schluessel = code field.
                },
                "UtRegular_E": {
                    "type": "Boolean",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": true,
                            i18n: i18n( 'activity-schema.UtRegular_E.YES.i18n' )
                        },
                        {
                            "val": false,
                            i18n: i18n( 'activity-schema.UtRegular_E.NO.i18n' )
                        }
                    ]
                },
                "UtGlottisschluss_E": {
                    "type": "Boolean",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": true,
                            i18n: i18n( 'activity-schema.UtGlottisschluss_E.YES.i18n' )
                        },
                        {
                            "val": false,
                            i18n: i18n( 'activity-schema.UtGlottisschluss_E.NO.i18n' )
                        }
                    ]
                },
                "KBVUtility_T": {
                    "utIndicationCode": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utIndicationCode.i18n' )
                    },
                    "utIcdCode": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utIcdCode.i18n' )
                    },
                    "utIcdText": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utIcdText.i18n' )
                    },
                    "utIcdRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utIcdRef.i18n' )
                    },
                    "utSecondIcdCode": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utSecondIcdCode.i18n' )
                    },
                    "utSecondIcdText": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utSecondIcdText.i18n' )
                    },
                    "utSecondIcdRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utSecondIcdRef.i18n' )
                    },
                    "utAgreement": {
                        "complex": "eq",
                        "default": "NONE",
                        "type": "KBVUtilityAgreement_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "utAgreementApprovedTill": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Date",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utAgreementApprovedTill.i18n' )
                    },
                    "utAgreementApprovedForInsurance": {
                        "complex": "inc",
                        "type": "InsuranceStatus_T",
                        "lib": "person",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utAgreementApprovedForInsurance.i18n' ),
                        "-en": "Versicherung",
                        "-de": "Versicherung"
                    },
                    "utAgreementApprovedText": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utAgreementApprovedText.i18n' )
                    },
                    "utAgreementApprovedCode": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utAgreementApprovedCode.i18n' )
                    },
                    "utAgreementApprovedCodeUseDiagnosisGroup": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utAgreementApprovedCodeUseDiagnosisGroup.i18n' )
                    },
                    "utRemedy1List": {
                        "complex": "inc",
                        "apiv": { v: 2, queryParam: false },
                        "type": "UtRemedyEntry_T",
                        "lib": types,
                        // ": "kbv.KBVUTILITY_utRemedy1List",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utRemedy1List.i18n' ),
                        "-en": "Heilmittel 1",
                        "-de": "Heilmittel 1"
                    },
                    "utRemedy2List": {
                        "complex": "inc",
                        "apiv": { v: 2, queryParam: false },
                        "type": "UtRemedyEntry_T",
                        "lib": types,
                        // ": "kbv.KBVUTILITY_utRemedy2List",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utRemedy1List.i18n' ),
                        "-en": "Heilmittel 2",
                        "-de": "Heilmittel 2"
                    },
                    "utAcuteEvent": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utAcuteEvent.i18n' )
                    },
                    "restTicketNumber": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.KBVUTILITY_restTicketNumber",
                        i18n: i18n( 'activity-schema.KBVUtility_T.restTicketNumber.i18n' )
                    }
                },
                "UtRemedyEntry_T": {
                    "name": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.name.i18n' )
                    },
                    "type": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.type.i18n' )
                    },
                    "groupTherapyAble": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.groupTherapyAble.i18n' )
                    },
                    "seasons": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.seasons.i18n' )
                    },
                    "price": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.price.i18n' )
                    }
                },
                "KBVUtilityAgreement_E": {
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": "NONE",
                            "-de": "Keine",
                            i18n: i18n( 'activity-schema.KBVUtilityAgreement_E.NONE' ),
                            "-en": "Keine"
                        },
                        {
                            "val": "LHM",
                            "-de": "Langfristiger Heilmittelbedarf",
                            i18n: i18n( 'activity-schema.KBVUtilityAgreement_E.LHM' ),
                            "-en": "Langfristiger Heilmittelbedarf"
                        }, {
                            "val": "BVB",
                            "-de": "Besondere Verordnungsbedarfe",
                            i18n: i18n( 'activity-schema.KBVUtilityAgreement_E.BVB' ),
                            "-en": "Besondere Verordnungsbedarfe"
                        }
                    ]
                },
                "KBVUtility2Base_T": {
                    "ut2Chapter": {
                        required: true,
                        "complex": "eq",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2Chapter.i18n' ),
                        "type": "KBVUtility2Chapter_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "utIcdCode": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.utIcdCode.i18n' )
                    },
                    "utIcdText": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.utIcdText.i18n' )
                    },
                    "utIcdRef": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.KBVUtility2_T.utIcdRef.i18n' )
                    },
                    "utSecondIcdCode": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.utSecondIcdCode.i18n' )
                    },
                    "utSecondIcdText": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.utSecondIcdText.i18n' )
                    },
                    "utSecondIcdRef": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.KBVUtility2_T.utSecondIcdRef.i18n' )
                    },
                    "ut2DiagnosisGroupCode": {
                        required: true,
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2DiagnosisGroupCode.i18n' )
                    },
                    "ut2DiagnosisGroupName": {
                        required: true,
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2DiagnosisGroupName.i18n' )
                    },
                    "ut2Remedy1List": {
                        "complex": "inc",
                        "apiv": { v: 2, queryParam: false },
                        "type": "Ut2RemedyEntry_T",
                        "lib": types,
                        "validate": "kbv.KBVUTILITY2__T_ut2RemedyLists",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utRemedy1List.i18n' ),
                        "-en": "Heilmittel",
                        "-de": "Heilmittel"
                    },
                    "ut2Remedy2List": {
                        "complex": "inc",
                        "apiv": { v: 2, queryParam: false },
                        "type": "Ut2RemedyEntry_T",
                        "lib": types,
                        "validate": "kbv.KBVUTILITY2__T_ut2RemedyLists",
                        i18n: i18n( 'activity-schema.KBVUtility_T.utRemedy1List.i18n' ),
                        "-en": "Ergänzendes Heilmittel",
                        "-de": "Ergänzendes Heilmittel"
                    }

                },
                "KBVUtility2Approval_T": {
                    "approvalValidTo": {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.KBVUtility2Approval_T_approvalValidTo",
                        i18n: i18n( 'activity-schema.KBVUtility2Approval_T.approvalValidTo.i18n' )
                    },
                    "unlimitedApproval": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.KBVUtility2Approval_T_approvalValidTo",
                        i18n: i18n( 'activity-schema.KBVUtility2Approval_T.unlimitedApproval.i18n' )
                    },
                    "insuranceId": {
                        "type": "String",
                        required: true,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.KBVUtility2Approval_T.insuranceId.i18n' )
                    }
                },
                "KBVUtility2_T": {
                    "ut2TreatmentRelevantDiagnosisText": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2TreatmentRelevantDiagnosisText.i18n' )
                    },
                    "ut2AgreementType": {
                        "default": null,
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2AgreementCode.i18n' ),
                        "type": "String",
                        "apiv": { v: 2, queryParam: false }
                    },
                    "ut2Agreement": {
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2Agreement.i18n' ),
                        "complex": "inc",
                        "type": "KBVUtility2Agreement_T",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "ut2ApprovalRefs": {
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2ApprovalRefs.i18n' )
                    },
                    "ut2PatientSpecificConductionSymptoms": {
                        "apiv": { v: 2, queryParam: false },
                        "default": false,
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2PatientSpecificConductionSymptoms.i18n' )
                    },
                    "ut2PatientSpecificConductionSymptomsFreeText": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        "validate": "kbv.KBVUTILITY2_ut2PatientSpecificConductionSymptomsFreeText",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2PatientSpecificConductionSymptomsFreeText.i18n' )
                    },
                    "ut2ConductionSymptoms": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "KBVUtility2ConductionSymptom_T",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.conductionSymptoms.i18n' ),
                        "complex": "inc",
                        "lib": types
                    },
                    "ut2BlankRegulation": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2BlankRegulation.i18n' )
                    },
                    "ut2BlankRegulationIgnored": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2BlankRegulationIgnored.i18n' )
                    },
                    "ut2BlankRegulationNeedsConfirmationAfterCopy": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2BlankRegulationNeedsConfirmationAfterCopy.i18n' )
                    },
                    "ut2PrescriptionCaseId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2PrescriptionCaseId.i18n' )
                    },
                    "ut2PrescriptionCaseUnitsSum": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2PrescriptionCaseUnitsSum.i18n' )
                    },
                    "ut2PrescriptionCaseMassageUnitsSum": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2PrescriptionCaseMassageUnitsSum.i18n' )
                    },
                    "ut2PrescriptionCaseStandardizedCombinationUnitsSum": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2PrescriptionCaseStandardizedCombinationUnitsSum.i18n' )
                    },
                    "ut2TherapyFrequencyMin": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        "validate": "kbv.KBVUTILITY2_ut2TherapyFrequencyMin",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2TherapyFrequencyMin.i18n' ),
                        "-en": "Therapy frequency min",
                        "-de": "Therapiefrequenz Min"
                    },
                    "ut2TherapyFrequencyMax": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        "validate": "kbv.KBVUTILITY2_ut2TherapyFrequencyMax",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2TherapyFrequencyMax.i18n' ),
                        "-en": "Therapy frequency max",
                        "-de": "Therapiefrequenz Max"
                    },
                    "ut2TherapyFrequencyType": {
                        "apiv": { v: 2, queryParam: false },
                        "complex": "eq",
                        "type": "Ut2TherapyFrequencyType_E",
                        "validate": "kbv.KBVUTILITY2_ut2TherapyFrequencyType",
                        "lib": types,
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2TherapyFrequencyType.i18n' ),
                        "-en": "Therapy frequency type",
                        "-de": "Therapiefrequenz Typ"
                    },
                    "ut2UrgentNeedForAction": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.KBVUtility2_T.ut2UrgentNeedForAction.i18n' ),
                        "-en": "Urgent need for action",
                        "-de": "Dringlicher Handlungsbedarf"
                    },
                    "utUnfall": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utUnfall.i18n' ),
                        "-en": "Unfall",
                        "-de": "Unfall"
                    },
                    "utBvg": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utBvg.i18n' ),
                        "-en": "BVG",
                        "-de": "BVG"
                    },
                    "utHomeVisit": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utHomeVisit.i18n' ),
                        "-en": "utHomeVisit",
                        "-de": "HM Hausbesuch"
                    },
                    "utTherapyReport": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Utility_T.utTherapyReport.i18n' ),
                        "-en": "utTherapyReport",
                        "-de": "HM Ist Bericht"
                    },
                    "paidFreeStatus": {
                        "complex": "eq",
                        "type": "PaidFreeStatus_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.PaidFreeStatus_E.i18n' ),
                        "-en": "Charges",
                        "-de": "Gebühren"
                    },
                    "utTherapyGoals": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.Utility_T.utTherapyGoals.i18n' ),
                        "-en": "utTherapyGoals",
                        "-de": "HM Ziele"
                    }
                },
                "KBVUtility2Agreement_T": {
                    "type": {
                        "complex": "eq",
                        "default": "NONE",
                        "type": "KBVUtilityAgreement_E",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types
                    },
                    "advice": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2Agreement_T.advice.i18n' ),
                        "-en": "Advice",
                        "-de": "Hinweis"
                    },
                    "acuteEventDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.KBVUtility2Agreement_T.acuteEventDate.i18n' )
                    },
                    "acuteEvent": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.KBVUtility2Agreement_T.acuteEvent.i18n' )
                    }
                },
                "KBVUtility2Chapter_E": {
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    i18n: i18n( 'activity-schema.KBVUtility2_T.ut2Chapter.i18n' ),
                    "list": [
                        {
                            "val": "PHYSIO",
                            "-de": "I. Maßnahmen der Physiotherapie",
                            i18n: i18n( 'activity-schema.KBVUtility2Chapter_E.PHYSIO' ),
                            "-en": "I. Maßnahmen der Physiotherapie"
                        },
                        {
                            "val": "PODO",
                            "-de": "II. Maßnahmen der Podologischen Therapie",
                            i18n: i18n( 'activity-schema.KBVUtility2Chapter_E.PODO' ),
                            "-en": "II. Maßnahmen der Podologischen Therapie"
                        },
                        {
                            "val": "LOGO",
                            "-de": "III. Maßnahmen der Stimm-, Sprech-, Sprach- und Schlucktherapie",
                            i18n: i18n( 'activity-schema.KBVUtility2Chapter_E.LOGO' ),
                            "-en": "III. Maßnahmen der Stimm-, Sprech-, Sprach- und Schlucktherapie"
                        },
                        {
                            "val": "ERGO",
                            "-de": "IV. Maßnahmen der Ergotherapie",
                            i18n: i18n( 'activity-schema.KBVUtility2Chapter_E.ERGO' ),
                            "-en": "IV. Maßnahmen der Ergotherapie"
                        },
                        {
                            "val": "ET",
                            "-de": "V. Maßnahmen der Ernährungstherapie",
                            i18n: i18n( 'activity-schema.KBVUtility2Chapter_E.ET' ),
                            "-en": "V. Maßnahmen der Ernährungstherapie"
                        }
                    ]
                },
                "KBVUtility2ConductionSymptom_T": {
                    "code": {
                        required: true,
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2ConductionSymptom_T.code.i18n' )
                    },
                    "name": {
                        required: true,
                        "apiv": { v: 2, queryParam: false },
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVUtility2ConductionSymptom_T.name.i18n' )
                    }
                },
                "Ut2RemedyEntry_T": {
                    "name": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.name.i18n' )
                    },
                    "type": {
                        "complex": "eq",
                        "type": "Ut2RemedyEntryType_E",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.type.i18n' )
                    },
                    "text": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Ut2RemedyEntry_T.text.i18n' )
                    },
                    "units": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.Ut2RemedyEntry_T.units.i18n' )
                    },
                    "price": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.price.i18n' )
                    },
                    "requiredConductionSymptom": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.requiredConductionSymptom.i18n' )
                    },
                    "massage": {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.UtRemedyEntry_T.massage.i18n' )
                    }
                },
                "Ut2RemedyEntryType_E": {
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": "PRIMARY_REMEDY",
                            "-de": "Vorrangiges Heilmittel",
                            i18n: i18n( 'activity-schema.Ut2RemedyEntryType_E.PRIMARY_REMEDY' ),
                            "-en": "Primary remedy"
                        },
                        {
                            "val": "COMPLEMENTARY_REMEDY",
                            "-de": "Ergänzendes Heilmittel",
                            i18n: i18n( 'activity-schema.Ut2RemedyEntryType_E.COMPLEMENTARY_REMEDY' ),
                            "-en": "Complementary remedy"
                        },
                        {
                            "val": "STANDARDIZED_COMBINATIONS_OF_REMEDIES",
                            "-de": "Standardisierte Heilmittelkombinationen",
                            i18n: i18n( 'activity-schema.Ut2RemedyEntryType_E.COMPLEMENTARY_REMEDY' ),
                            "-en": "Standardized combinations of remedies"
                        }
                    ]
                },
                "Ut2TherapyFrequencyType_E": {
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": "UNITS_PER_DAY",
                            "-de": "Einheiten pro Tag",
                            i18n: i18n( 'activity-schema.Ut2TherapyFrequencyType_E.UNITS_PER_DAY' ),
                            "-en": "Units per day"
                        },
                        {
                            "val": "UNITS_PER_WEEK",
                            "-de": "Einheiten pro Woche",
                            i18n: i18n( 'activity-schema.Ut2TherapyFrequencyType_E.UNITS_PER_WEEK' ),
                            "-en": "Units per week"
                        },
                        {
                            "val": "WEEKS_BETWEEN_UNITS",
                            "-de": "Wochen zwischen zwei Einheiten",
                            i18n: i18n( 'activity-schema.Ut2TherapyFrequencyType_E.WEEKS_BETWEEN_UNITS' ),
                            "-en": "Units between two units"
                        }
                    ]
                },
                "Teleconsult_T": {
                    "teleConsultNote": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.teleConsultNote.i18n' ),
                        "-en": "teleConsultNote",
                        "-de": "Inhalt"
                    },
                    "start": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Teleconsult_T.start.i18n' ),
                        "-en": "Start",
                        "-de": "HM Beginn Text"
                    },
                    "end": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Teleconsult_T.end.i18n' ),
                        "-en": "End",
                        "-de": "Ende"
                    },
                    "participants": {
                        "complex": "inc",
                        "type": "TeleconsultParticipant_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Teleconsult_T.participants.i18n' ),
                        "-en": "Participants",
                        "-de": "Teilnehmer"
                    }
                },
                "TeleconsultParticipant_T": {
                    "identityId": {
                        "type": "string",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.identityId.i18n' ),
                        "-en": "identityId",
                        "-de": "identityId"
                    },
                    "title": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.title.i18n' ),
                        "-en": "Title",
                        "-de": "Titel"
                    },
                    "firstname": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.firstname.i18n' ),
                        "-en": "Firstname",
                        "-de": "Vorname"
                    },
                    "lastname": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.lastname.i18n' ),
                        "-en": "Lastname",
                        "-de": "Nachname"
                    },
                    "locationName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.locationName.i18n' ),
                        "-en": "Institute",
                        "-de": "Eintrichtung"
                    },
                    "isInitiator": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.isInitiator.i18n' ),
                        "-en": "Initiator",
                        "-de": "Initiator"
                    },
                    "customerNo": { //deprecated
                        "type": "String",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.customerNo.i18n' ),
                        "-en": "customerNo",
                        "-de": "customerNo"
                    },
                    "dcCustomerNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.TeleconsultParticipant_T.customerNo.i18n' ),
                        "-en": "customerNo",
                        "-de": "customerNo"
                    }
                },
                "TreatmentType_E": {
                    "type": "String",
                    "apiv": { v: 2, queryParam: false },
                    "list": [
                        {
                            "val": "AMBULANT",
                            "-de": "ambulant",
                            i18n: i18n( 'activity-schema.TreatmentType_E.AMBULANT' ),
                            "-en": "ambulant"
                        }, {
                            "val": "STATIONARY",
                            "-de": "stationär",
                            i18n: i18n( 'activity-schema.TreatmentType_E.STATIONARY' ),
                            "-en": "stationary"
                        }
                    ]
                },
                "TreatmentType_CH_E": {
                    "type": "String",
                    "default": "AMBULATORY",
                    i18n: i18n( 'activity-schema.Treatment_CH_T.treatmentTypeCh.i18n' ),
                    "list": [
                        {
                            "val": "AMBULATORY",
                            i18n: i18n( 'activity-schema.TreatmentType_CH_E.AMBULATORY' )
                        }, {
                            "val": "STATIONARY",
                            i18n: i18n( 'activity-schema.TreatmentType_CH_E.STATIONARY' )
                        }
                    ]
                },
                "Side_CH_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.Treatment_CH_T.side.i18n' ),
                    "list": [
                        {
                            "val": "LEFT",
                            i18n: i18n( 'activity-schema.Side_CH_E.LEFT' )
                        }, {
                            "val": "RIGHT",
                            i18n: i18n( 'activity-schema.Side_CH_E.RIGHT' )
                        }
                    ]
                },
                "Assistive_T": {
                    "assDescription": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Assistive_T.assDescription.i18n' ),
                        "validate": "Assistive_T_assDescription",
                        "-en": "Description",
                        "-de": "Bezeichnung"
                    },
                    "assManufacturer": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Assistive_T.assManufacturer.i18n' ),
                        "-en": "Manufacturer",
                        "-de": "Hersteller"
                    },
                    "assCharacteristics": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Assistive_T.assCharacteristics.i18n' ),
                        "-en": "Characteristics",
                        "-de": "Merkmale"
                    },
                    "assDateAdded": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Assistive_T.assDateAdded.i18n' ),
                        "-en": "Date of Creation",
                        "-de": "Aufnahmedatum"
                    },
                    "assDateChanged": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Assistive_T.assDateChanged.i18n' ),
                        "-en": "Date of Change",
                        "-de": "Änderungsdatum"
                    },
                    "assDose": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Assistive_T.assDose.i18n' ),
                        "-en": "Dose",
                        "-de": "Dosis"
                    },
                    "assPrescPeriod": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Assistive_T.assPrescPeriod.i18n' ),
                        "-en": "Prescription Period",
                        "-de": "Verordnungszeitraum"
                    },
                    "assId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Assistive_T.assId.i18n' ),
                        "-en": "id",
                        "-de": "Positionsnr."
                    },
                    "assManArticleId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Assistive_T.assManArticleId.i18n' ),
                        "-en": "Article Number",
                        "-de": "Artikelnummer."
                    },
                    "assPrice": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Assistive_T.price.i18n' ),
                        "-en": "price",
                        "-de": "Kosten"
                    },
                    "assVat": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Assistive_T.vat.i18n' ),
                        "-en": 'VAT',
                        "-de": 'Ust.'
                    }

                },
                "Finding_T": {
                    "studyId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Finding_T.studyId.i18n' ),
                        "-en": "studyId",
                        "-de": "Zugangsnummer"
                    },
                    "g_extra": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Finding_T.g_extra.i18n' ),
                        "-en": "user-definedExtras",
                        "-de": "benutzerdefinierteExtras"
                    }
                },
                "Receipt_T": {
                    "amount": {
                        "type": "Number",
                        "validate": "decNumberNegative",
                        i18n: i18n( 'activity-schema.IncashItem_T.amount.i18n' ),
                        "-en": "Amount",
                        "-de": "Betrag"
                    },
                    "receiptNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Receipt_T.receiptNo.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Receipt Number",
                        "-de": "Quittungsnummern"
                    },
                    "paymentMethod": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Receipt_T.paymentMethod.i18n' ),
                        "apiv": { v: 2, queryParam: true },
                        "-en": "Payment method",
                        "-de": "Zahlungsmethode"
                    },
                    "invoiceNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Receipt_T.invoiceNo.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Invoice Number",
                        "-de": "Rechnungsnummern"
                    },
                    "invoiceText": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Receipt_T.invoiceText.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Invoice Content",
                        "-de": "Rechnungsbeschreibung"
                    },
                    "cashbook": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.IncashItem_T.cashbook.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Cash book",
                        "-de": "Kassenbuch"
                    },
                    "cashbookId": {
                        "type": "String",
                        "validate": "cashbookId",
                        i18n: i18n( 'activity-schema.IncashItem_T.cashbookId.i18n' ),
                        "-en": 'cashbookId',
                        "-de": 'cashbookId'
                    },
                    "incashNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.IncashItem_T.incashNo.i18n' ),
                        "-en": "incashNo",
                        "-de": "incashNo"
                    }
                },
                "Measurement_T": {
                    "d_extra": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Measurement_T.d_extra.i18n' ),
                        "-en": "device data",
                        "-de": "Gerätedaten"
                    },
                    "vendorId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Measurement_T.vendorId.i18n' ),
                        "-en": "Vendor Id",
                        "-de": "Hersteller Id"
                    },
                    "eventMessage": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Measurement_T.eventMessage.i18n' ),
                        "-en": "Event message",
                        "-de": "Ereignis Nachricht",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Measurement_T.eventMessage.i18n' )
                        }
                    },
                    "eventDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Measurement_T.eventDate.i18n' ),
                        "-en": "Event Date",
                        "-de": "Ereignis Datum"
                    },
                    "specialDOQUVIDE": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.Measurement_T.specialDOQUVIDE.i18n' ),
                        "-en": "Special DOQUVIDE event",
                        "-de": "Besonderes DOQUVIDE Ereignis",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Measurement_T.specialDOQUVIDE.i18n' ),
                            simpleType: true
                        }
                    }

                },
                "Cave_T": {
                    "severity": {
                        "complex": "eq",
                        "type": "Severity_E",
                        "lib": "severity",
                        "default": "LOW"
                    }
                },
                "Surgery_T": {
                    "fk5023": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5023",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5023.i18n' ),
                        "-en": "GO-Numbers-Additional",
                        "-de": "GO-Nummern-Zusatz",
                        "rule-engine": {}
                    },
                    "fk5024": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5024",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5024.i18n' ),
                        "-en": "GNR additional indicator for post-inpatient services provided",
                        "-de": "GNR-Zusatzkennzeichen für poststationär erbrachte Leistungen",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Treatment_T.fk5024.rule-i18n' )
                        }
                    },
                    "fk5025": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Treatment_T_fk5025",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5025.i18n' ),
                        "-en": "Recorded",
                        "-de": "Aufnahmedatum",
                        "rule-engine": {}
                    },
                    "fk5026": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Treatment_T_fk5026",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5026.i18n' ),
                        "-en": "Discharge date",
                        "-de": "Entlassdatum",
                        "rule-engine": {}
                    },
                    "fk5034": {
                        "default": "",
                        "type": "Date",
                        "validate": "kbv.Treatment_T_fk5034",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5034.i18n' ),
                        "-en": "OP-date",
                        "-de": "OP-Datum",
                        "rule-engine": {}
                    },
                    "fk5035Set": {
                        "complex": "inc",
                        "type": "Fk5035_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5035Set.i18n' ),
                        "-en": "OP-Key Documentation",
                        "-de": "OP-Schlüssel Dokumentation",
                        "rule-engine": {
                            i18n: i18n( 'activity-schema.Fk5035_T.fk5035.i18n' )
                        }
                    },
                    "fk5036Set": {
                        "complex": "inc",
                        "type": "Fk5036_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.Treatment_T.fk5036Set.i18n' ),
                        "-en": "GNR as a justification",
                        "-de": "GNR als Begründung",
                        "rule-engine": {
                            "type": "String"
                        }
                    },
                    "fk5037": {
                        "default": "",
                        "type": "String",
                        "validate": "kbv.Treatment_T_fk5037",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5037.i18n' ),
                        "-en": "Total cut-suture time",
                        "-de": "Gesamt Schnitt-Naht-Zeit",
                        "rule-engine": {}
                    },
                    "fk5038": {
                        "default": "",
                        "type": "String",
                        i18n: i18n( 'activity-schema.Treatment_T.fk5038.i18n' ),
                        "-en": "Complication",
                        "-de": "Komplikation",
                        "rule-engine": {}
                    },
                    "linkedTreatments": {
                        complex: "inc",
                        type: "LinkedTreatment_T",
                        i18n: i18n( 'activity-schema.Surgery_T.linkedTreatments.i18n' ),
                        lib: types
                    }
                },
                "LinkedTreatment_T": {
                    "_id": { // This prevents the not needed '_id; field from being created, to avoid confusion with the 'activityId' field.
                        "type": false
                    },
                    "activityId": {
                        "type": "String",
                        "default": "",
                        "apiv": { v: 2, queryParam: true }
                    },
                    "code": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Catalog_T.code.i18n' )
                    },
                    "opsCodes": {
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.Activity_T.opsCodes.i18n' )
                    },
                    "quantity": {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        "validate": "kbv.LinkedTreatment_T_quantity"
                        // i18n: i18n( 'activity-schema.Activity_T.explanations.i18n' )
                    },
                    "userContent": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Activity_T.userContent.i18n' )
                    },
                    "explanations": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false, countryMode: ["D"] },
                        i18n: i18n( 'activity-schema.Activity_T.explanations.i18n' )
                    },
                    "catalogRef": {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false }
                    }
                },
                "Gravidogramm_T": {
                    "fetuses": {
                        "type": "Number",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.fetuses.i18n' ),
                        "-en": "Number of Feuses",
                        "-de": "Föten"
                    },
                    "initialWeight": {
                        "type": "Number",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.initialWeight.i18n' ),
                        "-en": "Initial weight",
                        "-de": "Ausgangsgewicht"
                    },
                    "pelvicMeasurementSP25": {
                        "type": "Number",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.pelvicMeasurementSP25.i18n' ),
                        "-en": "Pelvic Measurement Sp 25",
                        "-de": "Beckenmaße Sp 25"
                    },
                    "pelvicMeasurementCR28": {
                        "type": "Number",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.pelvicMeasurementCR28.i18n' ),
                        "-en": "Pelvic Measurement Cr 28",
                        "-de": "Beckenmaße Cr 28"
                    },
                    "pelvicMeasurementTR31": {
                        "type": "Number",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.pelvicMeasurementTR31.i18n' ),
                        "-en": "Pelvic Measurement Tr 31",
                        "-de": "Beckenmaße Tr 31"
                    },
                    "pelvicMeasurementC20": {
                        "type": "Number",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.pelvicMeasurementC20.i18n' ),
                        "-en": "Pelvic Measurement C20",
                        "-de": "Beckenmaße C 20"
                    },
                    "rubellaTiter": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.rubellaTiter.i18n' ),
                        "-en": "Rubella titer",
                        "-de": "Rötelntiter"
                    },
                    "antibody1": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.antibody1.i18n' ),
                        "-en": "Antibody 1",
                        "-de": "Antikorper 1"
                    },
                    "antibody2": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.antibody2.i18n' ),
                        "-en": "Antibody 2",
                        "-de": "Antikorper 2"
                    },
                    "HBsAg": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.HBsAg.i18n' ),
                        "-en": "HBsAg (Hep B)",
                        "-de": "HBsAg"
                    },
                    "syphillis": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.syphillis.i18n' ),
                        "-en": "Syphillis",
                        "-de": "Lues"
                    },
                    "toxoplasmosis": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.toxoplasmosis.i18n' ),
                        "-en": "Toxoplasmosis",
                        "-de": "Toxoplasmose"
                    },
                    "HIV": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.HIV.i18n' ),
                        "-en": "HIV",
                        "-de": "HIV"
                    },
                    "chlamidia": {
                        "type": "Boolean",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.chlamidia.i18n' ),
                        "-en": "Chlamidia",
                        "-de": "Chlamydien"
                    },
                    "glucoseTolerance": {
                        "type": "String",
                        "i18n": i18n( 'activity-schema.Gravidogramm_T.glucoseTolerance.i18n' ),
                        "-en": "Glucose tolerance test",
                        "-de": "Glukosetoleranztest"
                    }
                },
                "IngredientPlan_T": {
                    "medicationPlanCarrierSegments": {
                        "type": ["String"],
                        "apiv": {v: 2, queryParam: false},
                        i18n: i18n( 'activity-schema.IngredientPlan_T.medicationPlanCarrierSegments.i18n' )
                    },
                    medData: {
                        "complex": "inc",
                        "type": "MedDataItem_T",
                        "apiv": {v: 2, queryParam: false},
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.medData.i18n' )
                    }
                },
                "MedData_T": {
                    medData: {
                        "complex": "inc",
                        "type": "MedDataItem_T",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.medData.i18n' ),
                        "-en": "Medical data",
                        "-de": "Medizindaten"
                    },
                    "labEntries": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.labEntries.i18n' ),
                        "-en": "Simplified Lab Data",
                        "-de": "Labordaten"
                    },
                    medDataType: {
                        "type": "String",
                        "description": "Allows the request to filter by medData type",
                        "apiv": { v: 2, queryParam: true },
                        i18n: i18n( 'activity-schema.MedData_T.type.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.type.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.type.i18n' )
                    }
                },
                "GravidogrammProcess_T": {
                    medData: {
                        "complex": "inc",
                        "type": "MedDataItem_T",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.medData.i18n' ),
                        "-en": "Checkup Medical data",
                        "-de": "Medizindaten"
                    }
                },
                "CheckupPlan_T": {
                    examinations: {
                        "complex": "inc",
                        "type": "CheckupPlanItem_T",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types,
                        i18n: i18n( 'activity-schema.CheckupPlan_T.examination.i18n' ),
                        "-en": "CheckUp plan",
                        "-de": "Prüfplan"
                    }
                },
                "PercentileCurve_T": {
                    medData: {
                        "complex": "inc",
                        "type": "MedDataItem_T",
                        "apiv": { v: 2, queryParam: false },
                        "lib": types,
                        i18n: i18n( 'activity-schema.Activity_T.medData.i18n' ),
                        "-en": "Percentile curve data",
                        "-de": "Perzentilenkurven"
                    },
                    "labEntries": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.labEntries.i18n' ),
                        "-en": "Simplified Lab Data",
                        "-de": "Labordaten"
                    }
                },
                "MedDataItem_T": {
                    category: {
                        "type": "String",
                        "required": false,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.category.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.category.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.category.i18n' )
                    },
                    type: {
                        "type": "String",
                        "required": true,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.type.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.type.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.type.i18n' )
                    },
                    value: {
                        "type": "Number",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.value.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.value.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.value.i18n' )
                    },
                    textValue: {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.textValue.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.textValue.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.textValue.i18n' )
                    },
                    dateValue: {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.dateValue.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.dateValue.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.dateValue.i18n' )
                    },
                    boolValue: {
                        "type": "Boolean",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.boolValue.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.boolValue.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.boolValue.i18n' )
                    },
                    unit: {
                        "type": "String",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.unit.i18n' ),
                        "-en": i18n( 'activity-schema.MedData_T.unit.i18n' ),
                        "-de": i18n( 'activity-schema.MedData_T.unit.i18n' )
                    },
                    sampleNormalValueText: {
                        "type": ["String"],
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.sampleNormalValueText.i18n' )
                    },
                    additionalData: {
                        "type": "object",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.additionalData.i18n' )
                    },
                    cchKey: {
                        "type": "Number",
                        i18n: "cchKey"
                    },
                    /**
                     * If this flag is set to true, adding a medDataItem of this type will NOT automatically create a new tag.
                     */
                    noTagCreation: {
                        "type": "Boolean",
                        "required": false,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.MedData_T.noTagCreation.i18n' )
                    }
                },

                //  Entries in the schedule for pediatric checkups
                "CheckupPlanItem_T": {
                    stage: {
                        "type": "String",
                        "required": true,
                        i18n: i18n( 'activity-schema.CheckupPlanItem_T.stage.i18n' ),
                        "-en": i18n( 'activity-schema.CheckupPlanItem_T.stage.i18n' ),
                        "-de": i18n( 'activity-schema.CheckupPlanItem_T.stage.i18n' )
                    },
                    plannedFrom: {
                        "type": "Date",
                        "validate": "date",
                        i18n: i18n( 'activity-schema.CheckupPlanItem_T.plannedFrom.i18n' ),
                        "-en": i18n( 'activity-schema.CheckupPlanItem_T.plannedFrom.i18n' ),
                        "-de": i18n( 'activity-schema.CheckupPlanItem_T.plannedFrom.i18n' )
                    },
                    plannedTo: {
                        "type": "Date",
                        "validate": "date",
                        i18n: i18n( 'activity-schema.CheckupPlanItem_T.plannedTo.i18n' ),
                        "-en": i18n( 'activity-schema.CheckupPlanItem_T.plannedTo.i18n' ),
                        "-de": i18n( 'activity-schema.CheckupPlanItem_T.plannedTo.i18n' )
                    },
                    toleranceFrom: {
                        "type": "Date",
                        "validate": "date",
                        i18n: i18n( 'activity-schema.CheckupPlanItem_T.toleranceFrom.i18n' ),
                        "-en": i18n( 'activity-schema.CheckupPlanItem_T.toleranceFrom.i18n' ),
                        "-de": i18n( 'activity-schema.CheckupPlanItem_T.toleranceFrom.i18n' )
                    },
                    toleranceTo: {
                        "type": "Date",
                        "validate": "date",
                        i18n: i18n( 'activity-schema.CheckupPlanItem_T.toleranceTo.i18n' ),
                        "-en": i18n( 'activity-schema.CheckupPlanItem_T.toleranceTo.i18n' ),
                        "-de": i18n( 'activity-schema.CheckupPlanItem_T.toleranceTo.i18n' )
                    },
                    completed: {
                        "type": "Date",
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'activity-schema.CheckupPlanItem_T.completed.i18n' ),
                        "-en": i18n( 'activity-schema.CheckupPlanItem_T.completed.i18n' ),
                        "-de": i18n( 'activity-schema.CheckupPlanItem_T.completed.i18n' )
                    }
                },

                "InvoiceRefPVS_T": {
                    "total": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.price.i18n' ),
                        "-en": "price",
                        "-de": "Kosten"
                    },
                    "pvslogId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.pvslogId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.pvslogId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.pvslogId.i18n' )
                    },
                    "invoiceentryId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' )
                    }
                },

                "InvoiceRefGKV_T": {
                    "total": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.price.i18n' ),
                        "-en": "price",
                        "-de": "Kosten"
                    },
                    "kbvlogId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.kbvlogId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.kbvlogId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.kbvlogId.i18n' )
                    },
                    "invoiceentryId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceentryId.i18n' )
                    }
                },

                "InvoiceRef_T": {
                    "total": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.price.i18n' ),
                        "-en": "price",
                        "-de": "Kosten"
                    },
                    "price": {
                        "apiv": { v: 2, queryParam: false },
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Price_T.price.i18n' ),
                        "-en": "price",
                        "-de": "Kosten"
                    },
                    "receipts": {
                        "type": ["String"],
                        i18n: i18n( 'activity-schema.Invoice_T.receipts.i18n' ),
                        "-en": "Receipts",
                        "-de": "Quittungen"
                    },
                    "totalReceiptsOutstanding": {
                        "default": 0.00,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Invoice_T.totalReceiptsOutstanding.i18n' ),
                        "-en": "Outstanding Amount",
                        "-de": "Restbetrag"
                    },
                    "totalReceipts": {
                        "default": 0.00,
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Invoice_T.totalReceipts.i18n' ),
                        "-en": "Amount paid",
                        "-de": "Summe gezahlt"
                    },
                    "invoiceNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.invoiceNo.i18n' ),
                        "apiv": { v: 2, queryParam: false },
                        "-en": "Invoice Number",
                        "-de": "Rechnunsnummern"
                    },
                    "invoiceRefNo": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceRefNo.i18n' ),
                        "-en": "invoiceRefNo",
                        "-de": "invoiceRefNo"
                    },
                    "linkedEmployees": {
                        "complex": "inc",
                        "type": "LinkedEmployee_T",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.RECEIPT_EMPLOYEE' ),
                        "-en": "Receipt Employee",
                        "-de": "Quittung Arzt"
                    },
                    "linkedTimestamps": {
                        "complex": "inc",
                        "type": "LinkedTimestamp_T",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_DATE' ),
                        "-en": "Date of payment",
                        "-de": "Datum bezahlt"
                    },
                    "invoiceDate": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_DATE' ),
                        "-en": "Last change",
                        "-de": "letzte Änderung"
                    },
                    "invoiceBilledDate": {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_BILLED_DATE' ),
                        "-en": "invoiceBilledDate",
                        "-de": "invoiceBilledDate"
                    },
                    "linkedContents": {
                        "complex": "inc",
                        "type": "LinkedContent_T",
                        "lib": types,
                        "apiv": { v: 2, queryParam: false },
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_CONTENT' ),
                        "-en": "Payment description",
                        "-de": "Notiz bezahlt"
                    },
                    "kvglogId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.kvglogId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.kvglogId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.kvglogId.i18n' )
                    },
                    "invoiceLogId" : {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceLogId.i18n' )
                    },
                    "invoiceLogType" : {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' ),
                        "-en": i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' ),
                        "-de": i18n( 'activity-schema.Activity_T.invoiceLogType.i18n' )
                    },
                    "scheinNotes": {
                        "type": "String",
                        i18n:  i18n( 'activity-schema.Schein_T.scheinNotes.i18n' ),
                        "-en": i18n( 'activity-schema.Schein_T.scheinNotes.i18n' ),
                        "-de": i18n( 'activity-schema.Schein_T.scheinNotes.i18n' )
                    },
                    "medidataRejected": {
                        "type": "Boolean",
                        i18n:  i18n( 'activity-schema.InvoiceRef_T.medidataRejected.i18n' ),
                        "-en": "Rejected by Medidata",
                        "-de": "Medidata Abgelehnt"
                    }
                },

                "LinkedContent_T": {
                    receiptId: {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.receiptId.i18n' ),
                        "-en": "receiptId",
                        "-de": "receiptId"
                    },
                    content: {
                        "type": "String",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_CONTENT' ),
                        "-en": "Payment description",
                        "-de": "Notiz bezahlt"
                    },
                    caseFolderId: {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.caseFolderId.i18n' ),
                        "-en": "caseFolderId",
                        "-de": "caseFolderId"
                    },
                    patientId: {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.patientId.i18n' ),
                        "-en": "patientId",
                        "-de": "patientId"
                    },
                    actType: {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.actType.i18n' ),
                        "-en": "actType",
                        "-de": "actType"
                    },
                    amount: {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.Receipt.amount.i18n' ),
                        "-en": "Amount",
                        "-de": "Betrag"
                    }
                },
                "LinkedTimestamp_T": {
                    receiptId: {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.receiptId.i18n' ),
                        "-en": "receiptId",
                        "-de": "receiptId"
                    },
                    timestamp: {
                        "type": "Date",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_DATE' ),
                        "-en": "Date of payment",
                        "-de": "Datum bezahlt"
                    }
                },
                "LinkedEmployee_T": {
                    receiptId: {
                        "type": "String",
                        i18n: i18n( 'activity-schema.Invoice_T.receiptId.i18n' ),
                        "-en": "receiptId",
                        "-de": "receiptId"
                    },
                    linkedEmployee: {
                        "complex": "ext",
                        "type": "EmployeeShort_T",
                        "lib": "employee",
                        i18n: i18n( 'InvoiceMojit.cashbookJS.title.RECEIPT_EMPLOYEE' ),
                        "-en": "Receipt Employee",
                        "-de": "Quittung Arzt"
                    }
                }

            }
        );

        /** handle DMP **/
        (function() {
            var
                DmpRecommendedTrainings_E = {
                    NONE: {
                        "val": "NONE",
                        "-de": "Keine",
                        i18n: i18n( 'activity-schema.DmpRecommendedTrainings_E.NONE.i18n' ),
                        "-en": "None"
                    },
                    DIABETES: {
                        "val": "DIABETES",
                        "-de": "Diabetes-Schulung",
                        i18n: i18n( 'activity-schema.DmpRecommendedTrainings_E.DIABETES.i18n' ),
                        "-en": "Diabetes training"
                    },
                    HYPERTENSION: {
                        "val": "HYPERTENSION",
                        "-de": "Hypertonie-Schulung",
                        i18n: i18n( 'activity-schema.DmpRecommendedTrainings_E.HYPERTENSION.i18n' ),
                        "-en": "Hypertension training"
                    }
                },
                DmpAsthmaCopdRecommendedTrainings_E = {
                    NONE: {
                        "val": "NONE",
                        "-de": "Nein",
                        i18n: i18n( 'activity-schema.DmpCopdAsthmaRecommendedTrainings_E.NONE.i18n' ),
                        "-en": "None"
                    },
                    YES: {
                        "val": "YES",
                        "-de": "Ja",
                        i18n: i18n( 'activity-schema.DmpCopdAsthmaRecommendedTrainings_E.YES.i18n' ),
                        "-en": "Yes"
                    }
                },
                DmpConcomitantDisease_E = {
                    ARTERIAL_HYPERTENSION: {
                        "val": "ARTERIAL_HYPERTENSION",
                        "-de": "Arterielle Hypertonie",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.ARTERIAL_HYPERTENSION.i18n' ),
                        "-en": "Arterial Hypertension"
                    },
                    AVK: {
                        "val": "AVK",
                        "-de": "AVK",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.AVK.i18n' ),
                        "-en": "AVK"
                    },
                    BRONCHIAL_ASTHMA: {
                        "val": "BRONCHIAL_ASTHMA",
                        "-de": "Asthma bronchiale",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.BRONCHIAL_ASTHMA.i18n' ),
                        "-en": "bronchial asthma"
                    },
                    CHRONIC_HEART_FAILURE: {
                        "val": "CHRONIC_HEART_FAILURE",
                        "-de": "Chronische Herzinsuffizienz",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.CHRONIC_HEART_FAILURE.i18n' ),
                        "-en": "Chronic heart failure"
                    },
                    COPD: {
                        "val": "COPD",
                        "-de": "COPD",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.COPD.i18n' ),
                        "-en": "COPD"
                    },
                    DIABETES_MELLITUS: {
                        "val": "DIABETES_MELLITUS",
                        "-de": "Diabetes mellitus",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.DIABETES_MELLITUS.i18n' ),
                        "-en": "diabetes mellitus"
                    },
                    DYSLIPIDEMIA: {
                        "val": "DYSLIPIDEMIA",
                        "-de": "Fettstoffwechselstörung",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.DYSLIPIDEMIA.i18n' ),
                        "-en": "Dyslipidemia"
                    },
                    KHK: {
                        "val": "KHK",
                        "-de": "KHK",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.KHK.i18n' ),
                        "-en": "KHK"
                    },
                    NONE_OF_THESE_DISEASES: {
                        "val": "NONE_OF_THESE_DISEASES",
                        "-de": "Keine der genannten Erkrankungen",
                        i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.NONE_OF_THESE_DISEASES.i18n' ),
                        "-en": "None of these diseases"
                    }
                },
                lungSpecificMedicationValue = {
                    IF_NECESSARY: {
                        "val": "IF_NECESSARY",
                        "-de": "Bei Bedarf",
                        i18n: i18n( 'activity-schema.lungSpecificMedicationValue.IF_NECESSARY.i18n' ),
                        "-en": "If necessary"
                    },
                    CHRONIC_MEDICATION: {
                        "val": "CHRONIC_MEDICATION",
                        "-de": "Dauermedikation",
                        i18n: i18n( 'activity-schema.lungSpecificMedicationValue.CHRONIC_MEDICATION.i18n' ),
                        "-en": "chronic medication"
                    },
                    NONE: {
                        "val": "NONE",
                        "-de": "Keine",
                        i18n: i18n( 'activity-schema.lungSpecificMedicationValue.NONE.i18n' ),
                        "-en": "None"
                    },
                    CONTRAINDICATION: {
                        "val": "CONTRAINDICATION",
                        "-de": "Kontraindikation",
                        i18n: i18n( 'activity-schema.lungSpecificMedicationValue.CONTRAINDICATION.i18n' ),
                        "-en": "Contraindication"
                    }
                },
                getYesOrNoEnum = function() {
                    return {
                        "type": ["String"],
                        "apiv": {v: 2, queryParam: false},
                        "list": [
                            {
                                "val": "NO",
                                "-de": "Nein",
                                i18n: i18n( 'activity-schema.EHKS_BASE_T.NO.i18n' ),
                                "-en": "No"
                            },
                            {
                                "val": "YES",
                                "-de": "Ja",
                                i18n: i18n( 'activity-schema.EHKS_BASE_T.YES.i18n' ),
                                "-en": "Yes"
                            }
                        ]
                    };
                },
                asthmaFrequencyList = [
                    {
                        "val": "MORE_THAN_2_TIMES_WEEK",
                        "-de": "Häufiger als 2 mal wöchentlich",
                        i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_4_44_E.MORE_THAN_2_TIMES_WEEK.i18n' ),
                        "-en": "More often than 2 times a week"
                    },
                    {
                        "val": "2_TIMES_WEEK",
                        "-de": "2 mal wöchentlich",
                        i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_4_44_E.2_TIMES_WEEK.i18n' ),
                        "-en": "2 times per week"
                    },
                    {
                        "val": "1_TIMES_WEEK",
                        "-de": "1 mal wöchentlich",
                        i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_4_44_E.1_TIMES_WEEK.i18n' ),
                        "-en": "1 times per week"
                    },
                    {
                        "val": "LESS_THAN_1_TIMES_WEEK",
                        "-de": "< 1 mal wöchentlich",
                        i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_4_44_E.LESS_THAN_1_TIMES_WEEK.i18n' ),
                        "-en": "< 1 times per week"
                    },
                    {
                        "val": "NONE",
                        "-de": "Keine",
                        i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_4_44_E.NONE.i18n' ),
                        "-en": "None"
                    }
                ],
                yesOrNoList = [
                    {
                        "val": "NO",
                        "-de": "Nein",
                        i18n: i18n( 'activity-schema.DmpSmoker_E.NO.i18n' ),
                        "-en": "No"
                    },
                    {
                        "val": "YES",
                        "-de": "Ja",
                        i18n: i18n( 'activity-schema.DmpSmoker_E.YES.i18n' ),
                        "-en": "Yes"
                    }
                ];

            Y.mix( types, {
                "EDOC_BASE_T": { // eDoc: must be part of all eDocs (eDMP, eHKS)
                    "dmpErrors": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.Activity_T.dmpErrors.i18n' ),
                        "-en": "errors",
                        "-de": "Fehler"
                    },
                    "dmpDeliveryInfo": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpDeliveryInfo.i18n' ),
                        "-en": "dmpDeliveryInfo",
                        "-de": "dmpDeliveryInfo"
                    },
                    "dmpAddressee": {
                        "type": "any",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpAddressee.i18n' ),
                        "-en": "dmpAddressee",
                        "-de": "dmpAddressee"
                    },
                    "dmpDeliveryRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpDeliveryRef.i18n' ),
                        "-en": "dmpDeliveryRef",
                        "-de": "dmpDeliveryRef"
                    },
                    "dmpSentDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpSentDate.i18n' ),
                        "-en": "Sent on",
                        "-de": "Gesendet am"
                    },
                    "dmpFileId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpFileId.i18n' ),
                        "-en": "fileId",
                        "-de": "fileId"
                    }
                },
                "EHKS_BASE_T": { // eHKS "Allgeminer Datensatz"
                    "dmpSignatureDate": { // resamaples "Untersuchungsdatum/
                        "type": "Date",
                        i18n: i18n( 'activity-schema.EHKS_BASE_T.examDate.i18n' ),
                        "-en": "exam date",
                        "-de": "Untersuchungsdatum",
                        "validate": "pastOrPresentDate"
                    },
                    "dmpHeadDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpHeadDate.i18n' ),
                        "default": new Date( 9999, 12 ) // this must be set to make eHKS activities visible in eDocumenation overview
                    },
                    "dmpQuarter": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpQuarter.i18n' ),
                        "-en": "Quarter",
                        "-de": "Quartal"
                    },
                    "dmpYear": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpYear.i18n' ),
                        "-en": "Year",
                        "-de": "Jahr"
                    },
                    "hasAdditionalContract": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.hasAdditionalContract.i18n' ),
                        "-en": "Additional contract",
                        "-de": "Ergänzender Vertrag"
                    }
                },
                "EHKS_ND_T": { // eHKS "Nicht Dermatologen"
                    // "Verdachtsdiagnose (Mehrfachangaben möglich)"
                    "hksSuspectedDiagnosisND": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksSuspectedDiagnosisND.i18n' ),
                        "complex": "eq",
                        "type": "HksSuspectedDiagnosisND_E",
                        "validate": "kbv.HKS_hksSuspectedDiagnosis",
                        "lib": types
                    },
                    "hksMalignesMelanom": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksMalignesMelanom.i18n' ),
                        "complex": "eq",
                        "type": "HksMalignesMelanom_E",
                        "validate": "kbv.HKS_hksMalignesMelanom",
                        "lib": types
                    },
                    "hksBasalzellkarzinom": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksBasalzellkarzinom.i18n' ),
                        "complex": "eq",
                        "type": "HkshksBasalzellkarzinom_E",
                        "validate": "kbv.HKS_hksBasalzellkarzinom",
                        "lib": types
                    },
                    "hksSpinozelluläresKarzinom": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksSpinozelluläresKarzinom.i18n' ),
                        "complex": "eq",
                        "type": "HksSpinozelluläresKarzinom_E",
                        "validate": "kbv.HKS_hksSpinozelluläresKarzinom",
                        "lib": types
                    },
                    "hksOtherSkinCancer": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOtherSkinCancer.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherSkinCancer_E",
                        "validate": "kbv.HKS_hksOtherSkinCancer",
                        "lib": types
                    },
                    "hksOtherDermatologicalClarificationFindings": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOtherDermatologicalClarificationFindings.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherDermatologicalClarificationFindings_E",
                        "validate": "kbv.HKS_hksOtherDermatologicalClarificationFindings",
                        "lib": types
                    },
                    "hksScreeningParticipantIsReferredToDermatologistTransferred": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksScreeningParticipantIsReferredToDermatologistTransferred.i18n' ),
                        "complex": "eq",
                        "type": "HksScreeningParticipantIsReferredToDermatologistTransferred_T",
                        "validate": "kbv.HKS_hksScreeningParticipantIsReferredToDermatologistTransferred",
                        "lib": types
                    },
                    // "Gesundheitsuntersuchung"
                    "hksHealthExaminationAtSameTime": { // "Gleichzeitig Gesundheitsuntersuchung durchgeführt"
                        "i18n": i18n( 'activity-schema.Activity_T.hksHealthExaminationAtSameTime.i18n' ),
                        "complex": "eq",
                        "type": "HksHealthExaminationAtSameTime_E",
                        "validate": "kbv.HKS_hksHealthExaminationAtSameTime",
                        "lib": types
                    }
                },
                "EHKS_D_T": { // eHKS "Dermatologen"
                    // Überweisung im Rahmen des Hautkrebs-Screenings
                    "hksHasReferral": { // Patient kommt auf Überweisung im Rahmen des Hautkrebs-Screenings
                        "i18n": i18n( 'activity-schema.Activity_T.hksHasReferral.i18n' ),
                        "complex": "eq",
                        "type": "HksHasReferral_E",
                        "validate": "kbv.HKS_hksHasReferral",
                        "lib": types
                    },
                    "hksReferralPhysicianPerformedHKS": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksReferralPhysicianPerformedHKS.i18n' ),
                        "complex": "eq",
                        "type": "HksReferralPhysicianPerformedHKS_T",
                        "validate": "kbv.HKS_hksReferralPhysicianPerformedHKS",
                        "lib": types
                    },
                    // Angabe der Verdachtsdiagnose des überweisenden Arztes (Mehrfachangaben möglich)
                    "hksHasSuspectedDiag": { // Angabe über die Verdachtsdiagnose liegt vor
                        "i18n": i18n( 'activity-schema.Activity_T.hksHasSuspectedDiag.i18n' ),
                        "complex": "eq",
                        "type": "HksHasSuspectedDiag_E",
                        "validate": "kbv.EHKS_D_T_hksHasSuspectedDiag",
                        "lib": types
                    },
                    "hksMalignesMelanom": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksMalignesMelanom.i18n' ),
                        "complex": "eq",
                        "type": "HksMalignesMelanom_E",
                        "validate": "kbv.EHKS_D_T_hksMalignesMelanom",
                        "lib": types
                    },
                    "hksBasalzellkarzinom": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksBasalzellkarzinom.i18n' ),
                        "complex": "eq",
                        "type": "HkshksBasalzellkarzinom_E",
                        "validate": "kbv.EHKS_D_T_hksBasalzellkarzinom",
                        "lib": types
                    },
                    "hksSpinozelluläresKarzinom": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksSpinozelluläresKarzinom.i18n' ),
                        "complex": "eq",
                        "type": "HksSpinozelluläresKarzinom_E",
                        "validate": "kbv.EHKS_D_T_hksSpinozelluläresKarzinom",
                        "lib": types
                    },
                    "hksOtherSkinCancer": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOtherSkinCancer.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherSkinCancer_E",
                        "validate": "kbv.EHKS_D_T_hksOtherSkinCancer",
                        "lib": types
                    },
                    // Verdachtsdiagnose des Dermatologen (Mehrfachangaben möglich)
                    "hksSuspectedDiagnosisD": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksSuspectedDiagnosisD.i18n' ),
                        "complex": "eq",
                        "type": "HksSuspectedDiagnosisD_E",
                        "validate": "kbv.EHKS_D_T_hksSuspectedDiagnosisD",
                        "lib": types
                    },
                    "hksMalignesMelanomDermatologists": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksMalignesMelanomDermatologists.i18n' ),
                        "complex": "eq",
                        "type": "HksMalignesMelanom_E",
                        "validate": "kbv.EHKS_D_T_hksMalignesMelanomDermatologists",
                        "lib": types
                    },
                    "hksBasalzellkarzinomDermatologists": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksBasalzellkarzinomDermatologists.i18n' ),
                        "complex": "eq",
                        "type": "HkshksBasalzellkarzinom_E",
                        "validate": "kbv.EHKS_D_T_hksBasalzellkarzinomDermatologists",
                        "lib": types
                    },
                    "hksSpinozelluläresKarzinomDermatologists": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksSpinozelluläresKarzinomDermatologists.i18n' ),
                        "complex": "eq",
                        "type": "HksSpinozelluläresKarzinom_E",
                        "validate": "kbv.EHKS_D_T_hksSpinozelluläresKarzinomDermatologists",
                        "lib": types
                    },
                    "hksOtherSkinCancerD": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOtherSkinCancerD.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherSkinCancer_E",
                        "validate": "kbv.EHKS_D_T_hksOtherSkinCancerD",
                        "lib": types
                    },
                    "hksOthersWithBiopsyInNeedOfClarificationFindings": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOthersWithBiopsyInNeedOfClarificationFindings.i18n' ),
                        "complex": "eq",
                        "type": "HksOthersWithBiopsyInNeedOfClarificationFindings_E",
                        "validate": "kbv.EHKS_D_T_hksOthersWithBiopsyInNeedOfClarificationFindings",
                        "lib": types
                    },
                    // Biopsie/Exzision
                    "hksBiopsieOrExzision": { // Biopsie zu Verdachtsdiagnose gemäß 2.3 entnommen oder Exzision durchgeführt
                        "i18n": i18n( 'activity-schema.Activity_T.hksBiopsieOrExzision.i18n' ),
                        "complex": "eq",
                        "type": "HksBiopsieOrExzision_E",
                        "validate": "kbv.EHKS_D_T_hksBiopsieOrExzision",
                        "lib": types
                    },
                    "hksNumberOfBiopsiesTaken": {
                        "i18n": i18n( 'activity-schema.EHKS_D_T.hksNumberOfBiopsiesTaken.i18n' ),
                        "type": "Number",
                        "validate": "kbv.EHKS_D_T_hksNumberOfBiopsiesTaken",
                        "-en": i18n( 'activity-schema.EHKS_D_T.hksNumberOfBiopsiesTaken.i18n' ),
                        "-de": i18n( 'activity-schema.EHKS_D_T.hksNumberOfBiopsiesTaken.i18n' )
                    },
                    "hksOtherwiseInitiatedOrInitiatedTherapyOrDiagnostics": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOtherwiseInitiatedOrInitiatedTherapyOrDiagnostics.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherwiseInitiatedOrInitiatedTherapyOrDiagnostics_E",
                        "validate": "kbv.EHKS_D_T_hksOtherwiseInitiatedOrInitiatedTherapyOrDiagnostics",
                        "lib": types
                    },
                    "hksCurrentlyNoFurtherTherapyOrDiagnostics": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksCurrentlyNoFurtherTherapyOrDiagnostics.i18n' ),
                        "complex": "eq",
                        "type": "HksCurrentlyNoFurtherTherapyOrDiagnostics_E",
                        "validate": "kbv.EHKS_D_T_hksCurrentlyNoFurtherTherapyOrDiagnostics",
                        "lib": types
                    },
                    // Histopathologie (ist nur vorgesehen für die Verdachtsdiagnosen nach 2.3., Mehrfachangaben möglich)
                    "hksMalignesMelanomHistopathologie": { // Malignes Melanom(1)
                        "i18n": i18n( 'activity-schema.Activity_T.hksMalignesMelanomHistopathologie.i18n' ),
                        "complex": "eq",
                        "type": "HksMalignesMelanom_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No",
                        "lib": types
                    },
                    "hksMalignesMelanomClassification": { // Malignes Melanom(1) – Klassifikation
                        "i18n": i18n( 'activity-schema.Activity_T.hksMalignesMelanomHistopathologie.i18n' ),
                        "complex": "eq",
                        "type": "HksMalignesMelanomClassification_E",
                        "validate": "kbv.EHKS_D_T_hksMalignesMelanomClassification",
                        "lib": types
                    },
                    "hksMalignesMelanomTumorThickness": { // Malignes Melanom – Tumordicke (Breslow)(1)
                        "i18n": i18n( 'activity-schema.Activity_T.hksMalignesMelanomTumorThickness.i18n' ),
                        "complex": "eq",
                        "type": "HksMalignesMelanomTumorThickness_E",
                        "validate": "kbv.EHKS_D_T_hksMalignesMelanomTumorThickness", // TODO: check (XPM) if value is allowed if hksMalignesMelanomHistopathologie = NO
                        "lib": types
                    },
                    "hksBasalzellkarzinomHistopathologie": { // Basalzellkarzinom(1)
                        "i18n": i18n( 'activity-schema.Activity_T.hksBasalzellkarzinomHistopathologie.i18n' ),
                        "complex": "eq",
                        "type": "HkshksBasalzellkarzinom_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No",
                        "lib": types
                    },
                    "hksBasalzellkarzinomHorizontalTumorDiameterClinical": { // Basalzellkarzinom horizontaler Tumordurchmesser (klinisch)(1)
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.hksBasalzellkarzinomHorizontalTumorDiameterClinical.i18n' ),
                        "validate": "kbv.EHKS_D_T_hksBasalzellkarzinomHorizontalTumorDiameterClinical"
                    },
                    "hksBasalzellkarzinomVerticalTumorDiameterHistological": { // Basalzellkarzinom vertikaler Tumordurchmesser (histologisch)(1)
                        "type": "String",
                        i18n: i18n( 'activity-schema.Activity_T.hksBasalzellkarzinomVerticalTumorDiameterHistological.i18n' ),
                        "validate": "kbv.EHKS_D_T_hksBasalzellkarzinomVerticalTumorDiameterHistological" // TODO: check (XPM) if value is allowed if hksMalignesMelanomHistopathologie = NO
                    },
                    "hksSpinozelluläresKarzinomHistopathologie": { // Spinozelluläres Karzinom(1)
                        "i18n": i18n( 'activity-schema.Activity_T.hksSpinozelluläresKarzinomHistopathologie.i18n' ),
                        "complex": "eq",
                        "type": "HksSpinozelluläresKarzinom_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No",
                        "lib": types
                    },
                    "hksSpinozelluläresKarzinomClassification": { // Spinozelluläres Karzinom – Klassifikation(1)
                        "i18n": i18n( 'activity-schema.Activity_T.hksSpinozelluläresKarzinomClassification.i18n' ),
                        "complex": "eq",
                        "type": "HksSpinozelluläresKarzinomClassification_E",
                        "validate": "kbv.EHKS_D_T_hksSpinozelluläresKarzinomClassification",
                        "lib": types
                    },
                    "hksSpinozelluläresKarzinomGrading": { // Spinozelluläres Karzinom - Grading(1)
                        "i18n": i18n( 'activity-schema.Activity_T.hksSpinozelluläresKarzinomGrading.i18n' ),
                        "complex": "eq",
                        "type": "HksSpinozelluläresKarzinomGrading_E",
                        "validate": "kbv.EHKS_D_T_hksSpinozelluläresKarzinomGrading", // TODO: check (XPM) if value is allowed if hksMalignesMelanomHistopathologie = NO
                        "lib": types
                    },
                    "hksOtherSkinCancerHistopathologie": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksOtherSkinCancerHistopathologie.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherSkinCancerHistopathologie_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No_2_3_2",
                        "lib": types
                    },
                    "hksAtypicalNevusCellNevus": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksAtypicalNevusCellNevus.i18n' ),
                        "complex": "eq",
                        "type": "HksAtypicalNevusCellNevus_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No_2_3_2",
                        "lib": types
                    },
                    "hksJunctionalCompoundDermalAtypicalNevusCellNevus": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksJunctionalCompoundDermalAtypicalNevusCellNevus.i18n' ),
                        "complex": "eq",
                        "type": "HksJunctionalCompoundDermalAtypicalNevusCellNevus_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No_2_3_2",
                        "lib": types
                    },
                    "hksActinicKeratosis": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksActinicKeratosis.i18n' ),
                        "complex": "eq",
                        "type": "HksActinicKeratosis_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No_2_3_2",
                        "lib": types
                    },
                    "hksOtherSkinChangeNotRelevantHere": {
                        "i18n": i18n( 'activity-schema.Activity_T.hksCurrentlyNoFurtherTherapyOrDiagnostics.i18n' ),
                        "complex": "eq",
                        "type": "HksOtherSkinChangeNotRelevantHere_E",
                        "validate": "kbv.HKS_histopathologyFields_Yes_Or_No_2_3_2",
                        "lib": types
                    }
                },
                // EHKS_ND_T
                "HksSuspectedDiagnosisND_E": getYesOrNoEnum(),
                "HksMalignesMelanom_E": getYesOrNoEnum(),
                "HkshksBasalzellkarzinom_E": getYesOrNoEnum(),
                "HksSpinozelluläresKarzinom_E": getYesOrNoEnum(),
                "HksHealthExaminationAtSameTime_E": getYesOrNoEnum(),
                "HksOtherSkinCancer_E": getYesOrNoEnum(),
                "HksOthersWithBiopsyInNeedOfClarificationFindings_E": getYesOrNoEnum(),
                "HksOtherDermatologicalClarificationFindings_E": getYesOrNoEnum(),
                "HksScreeningParticipantIsReferredToDermatologistTransferred_T": getYesOrNoEnum(),
                "HksReferralPhysicianPerformedHKS_T": getYesOrNoEnum(),
                // EHKS_D_T
                "HksHasReferral_E": getYesOrNoEnum(),
                "HksHasSuspectedDiag_E": getYesOrNoEnum(),
                "HksBiopsieOrExzision_E": getYesOrNoEnum(),
                "HksNumberOfBiopsiesTaken_E": getYesOrNoEnum(),
                "HksOtherwiseInitiatedOrInitiatedTherapyOrDiagnostics_E": getYesOrNoEnum(),
                "HksCurrentlyNoFurtherTherapyOrDiagnostics_E": getYesOrNoEnum(),
                "HksOtherSkinCancerHistopathologie_E": getYesOrNoEnum(),
                "HksAtypicalNevusCellNevus_E": getYesOrNoEnum(),
                "HksJunctionalCompoundDermalAtypicalNevusCellNevus_E": getYesOrNoEnum(),
                "HksActinicKeratosis_E": getYesOrNoEnum(),
                "HksOtherSkinChangeNotRelevantHere_E": getYesOrNoEnum(),
                "HksMalignesMelanomClassification_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    "list": [
                        {
                            "val": "MELANOMA_IN_SITU",
                            "-de": "Melanoma in situ",
                            i18n: i18n( 'activity-schema.HksMalignesMelanomClassification_E.MELANOMA_IN_SITU.i18n' ),
                            "-en": "Melanoma in situ"
                        },
                        {
                            "val": "INVASIVES_MELANOM",
                            "-de": "Invasives Melanom",
                            i18n: i18n( 'activity-schema.HksMalignesMelanomClassification_E.INVASIVES_MELANOM.i18n' ),
                            "-en": "Invasives Melanom"
                        }
                    ]
                },
                "HksSuspectedDiagnosisD_E": getYesOrNoEnum(),
                "HksSpinozelluläresKarzinomClassification_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    "list": [
                        {
                            "val": "KARZINOMA_IN_SITU",
                            "-de": "Karzinoma in situ",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomClassification_E.KARZINOMA_IN_SITU.i18n' ),
                            "-en": "Karzinoma in situ"
                        },
                        {
                            "val": "INVASIVES_KARZINOM",
                            "-de": "Invasives Karzinom",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomClassification_E.INVASIVES_KARZINOM.i18n' ),
                            "-en": "Invasives Karzinom"
                        }
                    ]
                },
                "HksMalignesMelanomTumorThickness_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    "list": [
                        {
                            "val": "LESS_OR_EQUAL_1_MM",
                            "-de": "≤ 1 mm",
                            i18n: i18n( 'activity-schema.HksMalignesMelanomTumorThickness_E.LESS_OR_EQUAL_1_MM.i18n' ),
                            "-en": "≤ 1 mm"
                        },
                        {
                            "val": "BETWEEN_1_01_AND_2_MM",
                            "-de": "1,01-2 mm",
                            i18n: i18n( 'activity-schema.HksMalignesMelanomTumorThickness_E.BETWEEN_1_01_AND_2_MM.i18n' ),
                            "-en": "1,01-2 mm"
                        },
                        {
                            "val": "BETWEEN_2_01_AND_4_MM",
                            "-de": "2,01-4 mm",
                            i18n: i18n( 'activity-schema.HksMalignesMelanomTumorThickness_E.BETWEEN_2_01_AND_4_MM.i18n' ),
                            "-en": "2,01-4 mm"
                        },
                        {
                            "val": "GREATER_THEN_4_MM",
                            "-de": "> 4 mm",
                            i18n: i18n( 'activity-schema.HksMalignesMelanomTumorThickness_E.GREATER_THEN_4_MM.i18n' ),
                            "-en": "> 4 mm"
                        }
                    ]
                },
                "HksSpinozelluläresKarzinomGrading_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    "list": [
                        {
                            "val": "Gx",
                            "-de": "Gx",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomGrading_E.Gx.i18n' ),
                            "-en": "Gx"
                        },
                        {
                            "val": "G1",
                            "-de": "G1",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomGrading_E.G1.i18n' ),
                            "-en": "G1"
                        },
                        {
                            "val": "G2",
                            "-de": "G2",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomGrading_E.G2.i18n' ),
                            "-en": "G2"
                        },
                        {
                            "val": "G3",
                            "-de": "G3",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomGrading_E.G3.i18n' ),
                            "-en": "G3"
                        },
                        {
                            "val": "G4",
                            "-de": "G4",
                            i18n: i18n( 'activity-schema.HksSpinozelluläresKarzinomGrading_E.G4.i18n' ),
                            "-en": "G4"
                        }
                    ]
                },

                "DMP_BASE_T": {
                    "dmpHeadDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpHeadDate.i18n' ),
                        "-en": "head date",
                        "-de": "Kopfdatum",
                        "validate": "kbv.DMP_BASE_T_dmpHeadDate",
                        hint: 'Mithilfe von diesem Datumsfeld wird von Ihrem System angegeben, wann die aktuelle Dokumentation erstmalig gestartet wurde.'
                    },
                    "dmpSignatureDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpSignatureDate.i18n' ),
                        "-en": "date of creation",
                        "-de": "Erstelldatum",
                        "validate": "kbv.DMP_BASE_T_dmpSignatureDate",
                        "hint": "Mithilfe von diesem Datumsfeld wird angegeben, für welches Quartal die Dokumentation erstellt wurde, das Datum muss in dem entsprechenden Abrechnungsquartal liegen. Anhand dieses Datums wird von Ihrer Datenannahmestelle geprüft, ob die korrekten Parameter für die Dokumentation erfasst wurden.<br><br>Eine Angabe ist verpflichtend.<br>Hier ist das Datum der Erstellung der Dokumentation einzutragen. Es dient zur Feststellung, ob die Dokumentation im dafür geplanten Intervall ausgestellt wurde. Es kann durch Sie nach Abschluss der Dokumentation nicht mehr verändert werden."
                    },
                    "dmpScheinRef": {
                        "type": "String",
                        "validate": "kbv.DMP_BASE_T_dmpScheinRef",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpScheinRef.i18n' ),
                        "-en": "Schein",
                        "-de": "Schein"
                    },
                    "dmpQuarter": {
                        "validate": "kbv.DMP_BASE_dmpQuarter",
                        "type": "Number",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpQuarter.i18n' ),
                        "-en": "Quarter",
                        "-de": "Quartal"
                    },
                    "dmpYear": {
                        "validate": "kbv.DMP_BASE_dmpYear",
                        "type": "Number",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpYear.i18n' ),
                        "-en": "Year",
                        "-de": "Jahr"
                    },
                    "dmpDocVersion": {
                        "type": "Number",
                        "default": 1,
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpDocVersion.i18n' ),
                        "-en": "DMP-Dokumentation Version",
                        "-de": "DMP Documentation Version"
                    },
                    "dmpType": {
                        "complex": "eq",
                        "type": "DmpType_E",
                        "lib": types
                    },
                    "dmpCreatedInRepresentation": {
                        "type": "Boolean",
                        "hintLevel": "OPTIONAL",
                        "hint": "Sollten Sie die Dokumentation in Vertretung (z. B. Urlaubsvertretung) für den eigentlich vom Versicherten gewählten koordinierenden Arzt ausstellen, geben Sie dies bitte hier an.",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpCreatedInRepresentation.i18n' ),
                        "-en": "Documentation created in representation",
                        "-de": "Dokumentation in Vertretung erstellt"
                    },
                    "dmpPhsicianChanged": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpPhsicianChanged.i18n' ),
                        "-en": "Physician Changed",
                        "-de": "Arztwechsel"
                    },
                    "dmpModuleHeartInsufficiency": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpModuleHeartInsufficiency.i18n' ),
                        "-en": "Module Heart insufficiency",
                        "-de": "Modul Herzinsuffizienz"
                    },
                    "dmpSmoker": {
                        "complex": "eq",
                        "type": "DmpSmoker_E",
                        "lib": types
                    },
                    "dmpGender": {
                        "complex": "eq",
                        "type": "DmpGender_E",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpGender.i18n' ),
                        "lib": "person",
                        "-en": "Gender",
                        "default": "",
                        "-de": "Geschlecht"
                    },
                    "dmpHeight": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpHeight.i18n' ),
                        "-en": "height",
                        "-de": "Körpergröße",
                        "hint": "Eine Angabe ist verpflichtend.</br>Geben Sie bitte die Körpergröße in Metern mit zwei Stellen hinter dem Komma an. Ist die Körpergröße, z.B. auf Grund einer Amputation, nicht zu erheben, ist eine „0“ einzutragen.",
                        "validate": "kbv.DM_T_dmpHeight"
                    },
                    "dmpWeight": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpWeight.i18n' ),
                        "-en": "weight",
                        "-de": "Körpergewicht",
                        "hint": "Die Angabe ist verpflichtend und erfolgt in Kilogramm. Ist das Körpergewicht, z.B. auf Grund einer Amputation, nicht zu erheben, ist eine „0“ einzutragen.",
                        "validate": "kbv.DMP_BASE_dmpWeight"
                    },
                    "dmpBloodPressureSystolic": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpBloodPressureSystolic.i18n' ),
                        "hint": "Bei Kindern und Jugendlichen unter 18 Jahren, die an einem DMP zu Asthma bronchiale teilnehmen, ist die Angabe optional. Bei allen Teilnehmern über 18 Jahren, die an einem DMP Asthma sowie allen Teilnehmern an mindestens einem der übrigen DMP ist eine Angabe verpflichtend.<br>Geben Sie hier bitte den aktuellen systolischen und diastolischen Blutdruckwert in mmHg an. Bei starken Schwankungen mehrfach erhobener Werte geben Sie bitte den Mittelwert an.",
                        "-en": "blooed pressure systolic",
                        "-de": "Blutdruck systolisch"
                    },
                    "dmpBloodPressureDiastolic": {
                        "type": "Number",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpBloodPressureDiastolic.i18n' ),
                        "hint": "Bei Kindern und Jugendlichen unter 18 Jahren, die an einem DMP zu Asthma bronchiale teilnehmen, ist die Angabe optional. Bei allen Teilnehmern über 18 Jahren, die an einem DMP Asthma sowie allen Teilnehmern an mindestens einem der übrigen DMP ist eine Angabe verpflichtend.<br>Geben Sie hier bitte den aktuellen systolischen und diastolischen Blutdruckwert in mmHg an. Bei starken Schwankungen mehrfach erhobener Werte geben Sie bitte den Mittelwert an.",
                        "-en": "blooed pressure diastolic",
                        "-de": "Blutdruck diastolisch"
                    },
                    "dmpConcomitantDisease": {
                        "complex": "eq",
                        "type": "DmpConcomitantDisease_E",
                        "validate": "kbv.DMP_BASE_T_dmpConcomitantDisease",
                        "lib": types
                    },
                    "dmpPatientWantsInfos": {
                        "complex": "eq",
                        "type": "DmpPatientWantsInfos_E",
                        "lib": types
                    },
                    "dmpDocumentationInterval": {
                        "complex": "eq",
                        "type": "DmpDocumentationInterval_E",
                        "validate": "kbv.DMP_BASE_T_dmpDocumentationInterval",
                        "lib": types
                    },
                    "dmpAntiplatelet": {
                        "complex": "eq",
                        "type": "DmpAntiplatelet_E",
                        "validate": "kbv.DMP_BASE_T_dmpAntiplatelet",
                        "lib": types
                    },
                    "dmpBetaBlocker": {
                        "complex": "eq",
                        "type": "DmpBetaBlocker_E",
                        "validate": "kbv.DMP_BASE_T_dmpBetaBlocker",
                        "lib": types
                    },
                    "dmpACE": {
                        "complex": "eq",
                        "type": "DmpACE_E",
                        "validate": "kbv.DMP_BASE_T_dmpACE",
                        "lib": types
                    },
                    "dmpHMG": {
                        "complex": "eq",
                        "type": "DmpHMG_E",
                        "validate": "kbv.DMP_BASE_T_dmpHMG",
                        "lib": types
                    },
                    "dmpCheckedInhalationTechnique": {
                        "complex": "eq",
                        "type": "DmpCheckedInhalationTechnique_E",
                        "validate": "kbv.DMP_BASE_T_dmpCheckedInhalationTechnique",
                        "lib": types
                    },
                    "dmpPerceivedDiabetesTraining": {
                        "complex": "eq",
                        "type": "DmpPerceivedTraining_E",
                        "validate": "kbv.DMP_BASE_T_dmpPerceivedDiabetesTraining",
                        "lib": types
                    },
                    "dmpPerceivedHypertensionTraining": {
                        "complex": "eq",
                        "type": "DmpPerceivedTraining_E",
                        "validate": "kbv.DMP_BASE_T_dmpPerceivedHypertensionTraining",
                        "lib": types
                    },
                    "dmpPrintStatus": {
                        "complex": "eq",
                        "type": "DmpPrintStatus_E",
                        "lib": types
                    },
                    "dmpNeedsMergeAcknowledgment": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpNeedsMergeAcknowledgment.i18n' ),
                        "-en": "dmpNeedsMergeAcknowledgment",
                        "-de": "dmpNeedsMergeAcknowledgment"
                    },
                    "dmpDocSetId": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DMP_BASE_T.dmpDocSetId.i18n' ),
                        "-en": "dmpDocSetId",
                        "-de": "dmpDocSetId"
                    }
                },
                "DmpType_E": {
                    "type": "String",
                    "hint": "Um die notwendigen Dokumentationsparameter aufzurufen, müssen Sie den jeweiligen Dokumentationstyp (z. B. Erst- oder Folgedokumentation) für die jeweils ausgewählte Indikation angeben. Dabei ist es möglich, die unterschiedlichen Dokumentationstypen diagnosebezogen zu kombinieren. So können Sie z. B. gleichzeitig eine Erstdokumentation für das DMP KHK und eine Folgedokumentation zu Diabetes mellitus Typ 2 erstellen.",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpType_E.i18n' ),
                    "-en": "Documentation type",
                    "-de": "Dokumentationstyp",
                    "default": "FIRST",
                    "list": [
                        {
                            "val": "FIRST",
                            "-de": "Erst-Dokumentation",
                            i18n: i18n( 'activity-schema.DmpType_E.FIRST.i18n' ),
                            "-en": "First documentation"
                        },
                        {
                            "val": "FOLLOWING",
                            "-de": "Folge-Dokumentation",
                            i18n: i18n( 'activity-schema.DmpType_E.FOLLOWING.i18n' ),
                            "-en": "Following documentation"
                        },
                        {
                            "val": "PNP",
                            "-de": "Postoperative Erstdokumentation nach präoperativer Einschreibung",
                            i18n: i18n( 'activity-schema.DmpType_E.PNP.i18n' ),
                            "-en": "Postoperative first documentation after preoperative registration"
                        }
                    ]
                },
                "DmpPrintStatus_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPrintStatus_E.i18n' ),
                    "-en": "Print Status",
                    "-de": "Druckstatus",
                    "default": "NOT_PRINTED",
                    "list": [
                        {
                            "val": "PRINTED",
                            "-de": "Gedruckt",
                            i18n: i18n( 'activity-schema.DmpPrintStatus_E.PRINTED.i18n' ),
                            "-en": "Printed"
                        },
                        {
                            "val": "NOT_PRINTED",
                            "-de": "Nicht gedruckt",
                            i18n: i18n( 'activity-schema.DmpPrintStatus_E.NOT_PRINTED.i18n' ),
                            "-en": "Not printed"
                        }
                    ]
                },
                "DM1_T": {
                    "dmpHadHospitalStayHbA1c": {
                        "type": "Number",
                        "validate": "kbv.DM1_T_dmpHadHospitalStayHbA1c",
                        i18n: i18n( 'activity-schema.DM1_T.dmpHadHospitalStayHbA1c.i18n' ),
                        "hint": "Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Folgedokumentation bei Diabetes mellitus Typ 1</strong> möglich und ist hier verpflichtend.<br>Geben Sie bitte die Anzahl aller vollstationären Aufenthalte an, die seit der letzten Dokumentation auf Grund eines Nichterreichens des angestrebten HbA1c-Wertes notwendig wurden. Sollte seit der letzten Dokumentation keine solche Behandlung notwendig gewesen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Hospital stays for not achieving HbA1c since the last documentation",
                        "-de": "Stationäre Aufenthalte wegen Nichterreichens des HbA1c-Wertes seit der letzten Dokumentation"
                    }
                },
                "DM2_T": {
                    "dmpInsulin": {
                        "complex": "eq",
                        "type": "DmpInsulin_E",
                        "validate": "kbv.DM2_T_dmpInsulin",
                        "lib": types
                    },
                    "dmpGlibenclamide": {
                        "complex": "eq",
                        "type": "DmpGlibenclamide_E",
                        "validate": "kbv.DM2_T_dmpGlibenclamide",
                        "lib": types
                    },
                    "dmpMetformin": {
                        "complex": "eq",
                        "type": "DmpMetformin_E",
                        "validate": "kbv.DM2_T_dmpMetformin",
                        "lib": types
                    },
                    "dmpOtherOralAntiDiabetic": {
                        "complex": "eq",
                        "type": "DmpOtherOralAntiDiabetic_E",
                        "validate": "kbv.DM2_T_dmpOtherOralAntiDiabetic",
                        "lib": types
                    }
                },
                "DM_T": {
                    "dmpPulsStatus": {
                        "complex": "eq",
                        "type": "DmpPulsStatus_E",
                        "lib": types
                    },
                    "dmpSensitivityTesting": {
                        "complex": "eq",
                        "type": "DmpSensitivityTesting_E",
                        "lib": types
                    },
                    "dmpFootStatusText": {
                        "complex": "eq",
                        "type": "DmpFootStatusText_E",
                        "lib": types
                    },
                    "dmpFootStatusWagnerValue": {
                        "complex": "eq",
                        "type": "DmpFootStatusWagnerValue_E",
                        "lib": types
                    },
                    "dmpFootStatusArmstrongValue": {
                        "complex": "eq",
                        "type": "DmpFootStatusArmstrongValue_E",
                        "lib": types
                    },
                    "dmpFurtherRiskUlcus": {
                        "complex": "eq",
                        "type": "DmpFurtherRiskUlcus_E",
                        "validate": "kbv.DM_T_dmpFurtherRiskUlcus",
                        "lib": types
                    },
                    "dmpUlkus": {
                        "complex": "eq",
                        "validate": "kbv.DM_T_dmpUlkus",
                        "type": "DmpUlkus_E",
                        "lib": types
                    },
                    "dmpWoundInfection": {
                        "complex": "eq",
                        "validate": "kbv.DM_T_dmpWoundInfection",
                        "type": "DmpWoundInfection_E",
                        "lib": types
                    },
                    "dmpHbA1cValue": {
                        "hint": "Eine Angabe ist verpflichtend.</br>Bitte geben Sie hier den Echtwert, also den laut Labor bei Ihrem Patienten gemessenen Wert an. Sofern Sie eine Werteangabe als Prozentangabe haben, geben Sie diesen Wert mit einer Stelle hinter dem Komma an. Wenn Sie eine Werteangabe in mmol/mol vorliegen haben, geben Sie den Wert bitte im Feld „mmol/mol“ ohne Nachkommastelle an.",
                        "type": "Number",
                        "validate": "kbv.DM_T_dmpHbA1cValue",
                        i18n: i18n( 'activity-schema.DM_T.dmpHbA1cValue.i18n' ),
                        "-en": "HbA1c",
                        "-de": "HbA1c"
                    },
                    "dmpHbA1cUnit": {
                        "complex": "eq",
                        "type": "DmpHbA1cUnit_E",
                        "validate": "kbv.DM_T_dmpHbA1cUnit",
                        "lib": types,
                        i18n: i18n( 'activity-schema.DM_T.dmpHbA1cUnit.i18n' )
                    },
                    "dmpPathoUrinAlbAus": {
                        "complex": "eq",
                        "type": "DmpPathoUrinAlbAus_E",
                        "validate": "kbv.DM_T_dmpPathoUrinAlbAus",
                        "lib": types,
                        i18n: i18n( 'activity-schema.DM_T.DmpPathoUrinAlbAus_E.i18n' )
                    },
                    "dmpSequelae": {
                        "complex": "eq",
                        "type": "DmpSequelae_E",
                        "lib": types
                    },
                    "dmpEvents": {
                        "complex": "eq",
                        "type": "DmpEvents_E",
                        "validate": "kbv.DM_T_dmpEvents",
                        "lib": types
                    },
                    "dmpEGFR": {
                        "type": "Number",
                        "validate": "kbv.DM_T_dmpEGFR",
                        i18n: i18n( 'activity-schema.DM_T.dmpEGFR.i18n' ),
                        "-en": "eGFR in ml/min/1,73m2KOF",
                        "-de": "eGFR in ml/min/1,73m2KOF",
                        "hint": "Eine Angabe ist verpflichtend.</br>Sofern Sie die eGFR bestimmt haben, geben Sie den Wert bitte ohne Nachkommastelle an. Sollten Sie die eGFR nicht bestimmt haben, ist hier zur Vollständigkeit eine Angabe bei „nicht bestimmt“ zu machen."
                    },
                    "dmpEGFRNotDetermined": {
                        "type": "Boolean",
                        "validate": "kbv.DM_T_dmpEGFRNotDetermined",
                        i18n: i18n( 'activity-schema.DM_T.dmpEGFRNotDetermined.i18n' ),
                        "-en": "eGFR not determined",
                        "-de": "eGFR nicht bestimmt"
                    },
                    "dmpInjectionSites": {
                        "complex": "eq",
                        "type": "DmpInjectionSites_E",
                        "lib": types
                    },
                    "dmpIntervalFutureFootInspections": {
                        "complex": "eq",
                        "type": "DmpIntervalFutureFootInspections_E",
                        "validate": "kbv.DM_T_dmpIntervalFutureFootInspections",
                        "lib": types
                    },
                    "dmpHadHypoglycaemic": {
                        "type": "Number",
                        "validate": "kbv.DM_T_dmpHadHypoglycaemic",
                        i18n: i18n( 'activity-schema.DM_T.dmpHadHypoglycaemic.i18n' ),
                        "hint": "Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und hier verpflichtend.<br>Geben Sie bitte die Anzahl von Hypoglykämien seit der letzten Dokumentation an. Eine schwere Hypoglykämie ist bei Erwachsenen durch die Notwendigkeit der Fremdhilfe, z.B. durch intravenöse Gabe von Glukose oder eine parenterale Gabe von Glukagon definiert. Bei Kindern ist eine schwere Hypoglykämie durch Bewusstlosigkeit und/oder Krampfanfall bzw. der Notwendigkeit der Fremdhilfe, um dies zu vermeiden definiert.<br>Sollte seit der letzten Dokumentation kein solches Ereignis vorgekommen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Severe hypoglycaemic episodes since the last documentation",
                        "-de": "Schwere Hypoglykämien seit der letzten Dokumentation"
                    },
                    "dmpHadStationaryTreatment": {
                        "type": "Number",
                        "validate": "kbv.DM_T_dmpHadStationaryTreatment",
                        i18n: i18n( 'activity-schema.DM_T.dmpHadStationaryTreatment.i18n' ),
                        "hint": "Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und ist hier verpflichtend<br>Geben Sie bitte die Anzahl aller vollstationären Aufenthalte an, die seit der letzten Dokumentation auf Grund eines Diabetes mellitus (Typ 1 oder Typ 2) notwendig wurden. Sollte seit der letzten Dokumentation keine solche Behandlung notwendig gewesen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Stationary Urgent treatment for diabetes mellitus since the last documentation",
                        "-de": "Stationäre notfallmäßige Behandlung wegen Diabetes mellitus seit der letzten Dokumentation"
                    },
                    "dmpTHIA": {
                        "complex": "eq",
                        "type": "DmpTHIA_E",
                        "validate": "kbv.DM_T_dmpTHIA",
                        "lib": types
                    },
                    "dmpRecommendedDmTrainings": {
                        "complex": "eq",
                        "type": "DmpRecommendedDmTrainings_E",
                        "validate": "kbv.DM_T_dmpRecommendedDmTrainings",
                        "lib": types
                    },
                    "dmpDmTrainingsBeforeSubscription": {
                        "complex": "eq",
                        "type": "DmpDmTrainingsBeforeSubscription_E",
                        "validate": "kbv.DM_T_dmpDmTrainingsBeforeSubscription",
                        "lib": types
                    },
                    "dmpHbA1cTargetValue": {
                        "complex": "eq",
                        "type": "DmpHbA1cTargetValue_E",
                        "validate": "kbv.DM_T_dmpHbA1cTargetValue",
                        "lib": types
                    },
                    "dmpTreatmentAtDiabeticFootInstitution": {
                        "complex": "eq",
                        "type": "DmpTreatmentAtDiabeticFootInstitution_E",
                        "validate": "kbv.DM_T_dmpTreatmentAtDiabeticFootInstitution",
                        "lib": types
                    },
                    "dmpDiabetesRelatedHospitalization": {
                        "complex": "eq",
                        "type": "DmpDiabetesRelatedHospitalization_E",
                        "validate": "kbv.DM_T_dmpDiabetesRelatedHospitalization",
                        "lib": types
                    },
                    "dmpOpthRetinalExam": {
                        "complex": "eq",
                        "type": "DmpOpthRetinalExam_E",
                        "validate": "kbv.DM_T_dmpOpthRetinalExam",
                        "lib": types
                    }
                },
                "BK_T": {
                    "dmpShowOptionalFields": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.DmpShowOptionalFields.i18n' ),
                        "hint": "Indem Sie dieses Feld ankreuzen, können sie auch optionale Felder ausfüllen."
                    },
                    "dmpRegistrationFor": {
                        "complex": "eq",
                        "type": "DmpRegistrationFor_E",
                        i18n: i18n( 'activity-schema.DmpRegistrationFor.i18n' ),
                        "validate": "kbv.BK_T_dmpRegistrationFor",
                        "lib": types
                    },
                    "dmpInitialManifestationOfPrimaryTumor": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpInitialManifestationOfPrimaryTumor.i18n' ),
                        "validate": "kbv.BK_T_dmpInitialManifestationOfPrimaryTumor",
                        "hint": "Erfolgt die Einschreibung auf Grund eines Primärtumors ist das taggenaue Datum der histologischen Sicherung anzugeben. In diesem Fall ist der Verbleib der Versicherten im Programm zunächst zeitlich auf 10 Jahre nach histologischer Sicherung begrenzt.<br><br> Bei einer gleichzeitigen Angabe zur histologischen Sicherung eines Primärtumors und eines kontralateralen Brustkrebses darf das Datum der histologischen Sicherung eines Primärtumors nicht nach dem Datum der histologischen Sicherung des kontralateralen Brustkrebses liegen. <br><br> Bei einer gleichzeitigen Angabe zur histologischen Sicherung eines lokoregionären Rezidivs und eines Primärtumors darf das Datum der histologischen Sicherung eines Primärtumors nicht nach dem Datum der histologischen Sicherung des lokoregionären Rezidivs."
                    },
                    "dmpManifestationOfContralateralBreastCancer": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpManifestationOfContralateralBreastCancer.i18n' ),
                        "validate": "kbv.BK_T_dmpManifestationOfContralateralBreastCancer",
                        "hint": "Erfolgt die Einschreibung auf Grund eines kontralateralen Brustkrebses ist das taggenaue Datum der histologischen Sicherung anzugeben. In diesem Fall ist der Verbleib der Versicherten im Programm zunächst zeitlich auf 10 Jahre nach histologischer Sicherung begrenzt.<br><br> Bei einer gleichzeitigen Angabe zur histologischen Sicherung eines Primärtumors und eines kontralateralen Brustkrebses darf das Datum der histologischen Sicherung eines Primärtumors nicht nach dem Datum der histologischen Sicherung des kontralateralen Brustkrebses liegen. <br><br> Tritt ein kontralateraler Brustkrebs während der Teilnahme am strukturiertem Behandlungsprogramm auf, ist ein Verbleiben im Programm für weitere 10 Jahre ab dem Zeitpunkt des histologischen Nachweises möglich."
                    },
                    "dmpLocoregionalRecurrence": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpLocoregionalRecurrence.i18n' ),
                        "validate": "kbv.BK_T_dmpLocoregionalRecurrence",
                        "hint": "Erfolgt die Einschreibung auf Grund eines lokoregionären Rezidivs ist das taggenaue Datum der histologischen Sicherung anzugeben. In diesem Fall ist der Verbleib der Versicherten im Programm zunächst zeitlich auf 10 Jahre nach histologischer Sicherung begrenzt.<br><br> Bei einer gleichzeitigen Angabe zur histologischen Sicherung eines lokoregionären Rezidivs und eines Primärtumors darf das Datum der histologischen Sicherung eines Primärtumors nicht nach dem Datum der histologischen Sicherung des lokoregionären Rezidivs. <br><br> Tritt ein lokoregionäres Rezidiv während der Teilnahme am strukturiertem Behandlungsprogramm auf, ist ein Verbleiben im Programm für weitere 10 Jahre ab dem Zeitpunkt des histologischen Nachweises möglich."
                    },
                    "dmpFirstConfirmationOfRemoteMetastases": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpFirstConfirmationOfRemoteMetastases.i18n' ),
                        "validate": "kbv.BK_T_dmpFirstConfirmationOfRemoteMetastases",
                        "hint": "Die Angabe zum Vorliegen von Fernmetastasen führt immer zur Einschreibung der Patientin in das Programm. Neben dem Datum der Sicherung der Fernmetastasen ist zusätzlich auch mindestens das Datum der histologischen Sicherung der Erstmanifestation oder des kontralateralen Brustkrebses bzw. des lokoregionären Rezidivs anzugeben. Sollte Ihnen das genaue Datum der Erstmanifestation bzw. des kontralateralen Brustkrebses oder des lokoregionären Rezidivs nicht bekannt sein, können Sie ersatzweise auch nur das Jahr der histologischen Sicherung im Format 00.00.JJJJ angeben. <br><br> Patientinnen mit Fernmetastasierung können dauerhaft am Programm teilnehmen."
                    },
                    "dmpAffectedBreast": {
                        "complex": "eq",
                        "type": "DmpAffectedBreast_E",
                        "validate": "kbv.BK_T_dmpAffectedBreast",
                        "lib": types
                    },
                    "dmpCurrentTreatmentStatus": {
                        "complex": "eq",
                        "type": "DmpCurrentTreatmentStatus_E",
                        "validate": "kbv.BK_T_dmpCurrentTreatmentStatus",
                        "lib": types
                    },
                    "dmpPerformedSurgicalTherapy": {
                        "complex": "eq",
                        "type": "DmpPerformedSurgicalTherapy_E",
                        "validate": "kbv.BK_T_dmpPerformedSurgicalTherapy",
                        "lib": types
                    },
                    "dmpPerformedSurgicalTherapy_4_23": {
                        "complex": "eq",
                        "type": "DmpPerformedSurgicalTherapy_4_23_E",
                        "validate": "kbv.BK_T_dmpPerformedSurgicalTherapy_4_23",
                        "lib": types
                    },
                    "dmpPreoperativeNeoadjuvantTherapy": {
                        "complex": "eq",
                        "type": "DmpPreoperativeNeoadjuvantTherapy_E",
                        "validate": "kbv.BK_T_dmpPreoperativeNeoadjuvantTherapy",
                        "lib": types
                    },
                    "dmpTnmClassification_4_23": {
                        "complex": "eq",
                        "type": "DmpTnmClassification_4_23_E",
                        "validate": "kbv.BK_T_dmpTnmClassification_4_23",
                        "lib": types
                    },
                    "dmpPT": {
                        "complex": "eq",
                        "type": "DmpPT_E",
                        "validate": "kbv.BK_T_dmpPT",
                        "lib": types
                    },
                    "dmpPT_4_23": {
                        "complex": "eq",
                        "type": "DmpPT_4_23_E",
                        "validate": "kbv.BK_T_dmpPT_4_23",
                        "lib": types
                    },
                    "dmpPN": {
                        "complex": "eq",
                        "type": "DmpPN_E",
                        "validate": "kbv.BK_T_dmpPN",
                        "lib": types
                    },
                    "dmpPN_4_23": {
                        "complex": "eq",
                        "type": "DmpPN_4_23_E",
                        "validate": "kbv.BK_T_dmpPN_4_23",
                        "lib": types
                    },
                    "dmpM": {
                        "complex": "eq",
                        "type": "DmpM_E",
                        "validate": "kbv.BK_T_dmpM",
                        "lib": types
                    },
                    "dmpM_4_23": {
                        "complex": "eq",
                        "type": "DmpM_4_23_E",
                        "validate": "kbv.BK_T_dmpM_4_23",
                        "lib": types
                    },
                    "dmpGrading": {
                        "complex": "eq",
                        "type": "DmpGrading_E",
                        "validate": "kbv.BK_T_dmpGrading",
                        "lib": types
                    },
                    "dmpResection": {
                        "complex": "eq",
                        "type": "DmpResection_E",
                        "validate": "kbv.BK_T_dmpResection",
                        "lib": types
                    },
                    "dmpImmunohistochemicalHormoneReceptor": {
                        "complex": "eq",
                        "type": "DmpImmunohistochemicalHormoneReceptor_E",
                        "validate": "kbv.BK_T_dmpImmunohistochemicalHormoneReceptor",
                        "lib": types
                    },
                    "dmpImmunohistochemicalHormoneReceptor_4_23": {
                        "complex": "eq",
                        "type": "DmpImmunohistochemicalHormoneReceptor_4_23_E",
                        "validate": "kbv.BK_T_dmpImmunohistochemicalHormoneReceptor_4_23",
                        "lib": types
                    },
                    "dmpCurrentAdjuvantEndocrineTherapy_4_23": {
                        "complex": "eq",
                        "type": "DmpCurrentAdjuvantEndocrineTherapy_4_23_E",
                        "validate": "kbv.BK_T_dmpCurrentAdjuvantEndocrineTherapy_4_23",
                        "lib": types
                    },
                    "dmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23": {
                        "complex": "eq",
                        "type": "DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E",
                        "validate": "kbv.BK_T_dmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23",
                        "lib": types
                    },
                    "dmpContinuationOfCurrentEndocrineTherapy_4_23": {
                        "complex": "eq",
                        "type": "DmpContinuationOfCurrentEndocrineTherapy_4_23_E",
                        "validate": "kbv.BK_T_dmpContinuationOfCurrentEndocrineTherapy_4_23",
                        "lib": types
                    },
                    "dmpDxaFindings_4_23": {
                        "complex": "eq",
                        "type": "DmpDxaFindings_4_23_E",
                        "validate": "kbv.BK_T_dmpDxaFindings_4_23",
                        "lib": types
                    },
                    "dmpHER2Neu": {
                        "complex": "eq",
                        "type": "DmpHER2Neu_E",
                        "validate": "kbv.BK_T_dmpHER2Neu",
                        "lib": types
                    },
                    "dmpRadiotherapy": {
                        "complex": "eq",
                        "type": "DmpRadiotherapy_E",
                        "validate": "kbv.BK_T_dmpRadiotherapy",
                        "lib": types
                    },
                    "dmpChemotherapy": {
                        "complex": "eq",
                        "type": "DmpChemotherapy_E",
                        "validate": "kbv.BK_T_dmpChemotherapy",
                        "lib": types
                    },
                    "dmpEndocrineTherapy": {
                        "complex": "eq",
                        "type": "DmpEndocrineTherapy_E",
                        "validate": "kbv.BK_T_dmpEndocrineTherapy",
                        "lib": types
                    },
                    "dmpAntibodyTherapy": {
                        "complex": "eq",
                        "type": "DmpAntibodyTherapy_E",
                        "validate": "kbv.BK_T_dmpAntibodyTherapy",
                        "lib": types
                    },
                    "dmpOngoingOrCompletedTherapy_locoregionalRecurrence": {
                        "complex": "eq",
                        "type": "DmpOngoingOrCompletedTherapy_locoregionalRecurrence_E",
                        "validate": "kbv.BK_T_dmpOngoingOrCompletedTherapy_locoregionalRecurrence",
                        "lib": types
                    },
                    "dmpLocalisation": {
                        "complex": "eq",
                        "type": "DmpLocalisation_E",
                        "validate": "kbv.BK_T_dmpLocalisation",
                        "lib": types
                    },
                    "dmpLocalisation_4_23": {
                        "complex": "eq",
                        "type": "DmpLocalisation_4_23_E",
                        "validate": "kbv.BK_T_dmpLocalisation_4_23",
                        "lib": types
                    },
                    "dmpOngoingOrCompletedTherapy_remoteMetastases": {
                        "complex": "eq",
                        "type": "DmpOngoingOrCompletedTherapy_remoteMetastases_E",
                        "validate": "kbv.BK_T_dmpOngoingOrCompletedTherapy_remoteMetastases",
                        "lib": types
                    },
                    "dmpBisphosphonateTherapy": {
                        "complex": "eq",
                        "type": "DmpBisphosphonateTherapy_E",
                        "validate": "kbv.BK_T_dmpBisphosphonateTherapy",
                        "lib": types
                    },
                    "dmpDenosumab_4_23": {
                        "complex": "eq",
                        "type": "DmpDenosumab_4_23_E",
                        "validate": "kbv.BK_T_dmpDenosumab_4_23",
                        "lib": types
                    },
                    "dmpRegularPhysicalTrainingRecommended_4_23": {
                        "complex": "eq",
                        "type": "DmpRegularPhysicalTrainingRecommended_4_23_E",
                        "validate": "kbv.BK_T_dmpRegularPhysicalTrainingRecommended_4_23",
                        "lib": types
                    },
                    "dmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23": {
                        "complex": "eq",
                        "type": "DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E",
                        "validate": "kbv.BK_T_dmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23",
                        "lib": types
                    },
                    "dmpLymphedemaPresent": {
                        "complex": "eq",
                        "type": "DmpLymphedemaPresent_E",
                        "validate": "kbv.BK_T_dmpLymphedemaPresent",
                        "lib": types
                    },
                    "dmpSymptomaticLymphedema_4_23": {
                        "complex": "eq",
                        "type": "DmpSymptomaticLymphedema_4_23_E",
                        "validate": "kbv.BK_T_dmpSymptomaticLymphedema_4_23",
                        "lib": types
                    },
                    "dmpPlannedDateForNextDocumentation": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpPlannedDateForNextDocumentation.i18n' ),
                        "validate": "kbv.BK_T_dmpPlannedDateForNextDocumentation",
                        "hintLevel": "OPTIONAL",
                        "hint": "Als geplantes Datum der nächsten Dokumentation gilt der Termin, der im Rahmen der regelmäßigen Dokumentation mit der Patientin vereinbart wird. Er sollte sich am Termin der Nachsorgeuntersuchung orientieren, die in der Regel halbjährlich erfolgen sollte, aber nicht später als zum Ende des übernächsten Quartals liegen darf. Sollten Sie diesen Termin bereits zum Zeitpunkt der Dokumentationserstellung festlegen, können Sie das entsprechende Datum hier eintragen."
                    },
                    "dmpCurrentTreatmentStatus_following": {
                        "complex": "eq",
                        "type": "DmpCurrentTreatmentStatus_following_E",
                        "validate": "kbv.BK_T_dmpCurrentTreatmentStatus_following",
                        "lib": types
                    },
                    "dmpTherapyOfLocoregionalRecurrence": {
                        "complex": "eq",
                        "type": "DmpTherapyOfLocoregionalRecurrence_E",
                        "validate": "kbv.BK_T_dmpTherapyOfLocoregionalRecurrence",
                        "lib": types
                    },
                    "dmpTherapyOfRemoteMetastases": {
                        "complex": "eq",
                        "type": "DmpTherapyOfRemoteMetastases_E",
                        "validate": "kbv.BK_T_dmpTherapyOfRemoteMetastases",
                        "lib": types
                    },
                    "dmpBisphosphonateTherapy_following": {
                        "complex": "eq",
                        "type": "DmpBisphosphonateTherapy_following_E",
                        "validate": "kbv.dmpBisphosphonateTherapy_following",
                        "lib": types
                    },
                    "dmpManifestationOfLocoregionalRecurrence_following_date": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpManifestationOfLocoregionalRecurrence_following_date.i18n' ),
                        "validate": "kbv.BK_T_dmpManifestationOfLocoregionalRecurrence_following_date",
                        "hint": "Es handelt sich um das Datum des hitologischen Nachweises.<br><br> Sollte bei Ihrer Patientin im Programmverlauf seit der letzten Dokumentation ein lokoregionäres Rezidiv aufgetreten sein, geben Sie bitte das Datum der histologischen Sicherung an. Es ist dabei eine Angabe des taggenauen Datums erforderlich. <br><br> Sollte seit der letzten Dokumentation kein lokoregionäres Rezidiv histologisch gesichert worden sein, geben Sie bitte „Nein“ an."
                    },
                    "dmpManifestationOfLocoregionalRecurrence_following_text": {
                        "complex": "eq",
                        "type": "DmpManifestationOfLocoregionalRecurrence_following_text_E",
                        "validate": "kbv.BK_T_dmpManifestationOfLocoregionalRecurrence_following_text",
                        "lib": types
                    },
                    "dmpManifestationOfContralateralBreastCancer_following_date": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpManifestationOfContralateralBreastCancer_following_date.i18n' ),
                        "validate": "kbv.BK_T_dmpManifestationOfContralateralBreastCancer_following_date",
                        "hint": "Es handelt sich um das Datum des hitologischen Nachweises.<br><br> Sollte bei Ihrer Patientin im Programmverlauf seit der letzten Dokumentation ein kontralateraler Brustkrebs aufgetreten sein, geben Sie bitte das Datum der histologischen Sicherung an. Es ist dabei die Angabe des taggenauen Datums erforderlich.<br><br> Sollte seit der letzten Dokumentation kein kontralateraler Brustkrebs histologisch gesichert worden sein, geben Sie bitte „Nein“ an."
                    },
                    "dmpManifestationOfContralateralBreastCancer_following_text": {
                        "complex": "eq",
                        "type": "DmpManifestationOfContralateralBreastCancer_following_text_E",
                        "validate": "kbv.BK_T_dmpManifestationOfContralateralBreastCancer_following_text",
                        "lib": types
                    },
                    "dmpManifestationOfRemoteMetastases_following_date": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_date.i18n' ),
                        "validate": "kbv.BK_T_dmpManifestationOfRemoteMetastases_following_date",
                        "hint": "Es handelt sich um das Datum der Diagnosesicherung.<br><br>Sollten bei Ihrer Patientin im Programmverlauf seit der letzten Dokumentation Fernmetastasen aufgetreten sein, geben Sie bitte das Datum an, an dem die Diagnose gesichert wurde. Es ist dabei eine Angabe des taggenauen Datums erforderlich.Geben Sie bitte weiterhin die Lokalisation der Fernmetastasen an.<br><br>Sollten seit der letzten Dokumentation keine Fernmetastasen aufgetreten sein, geben Sie bitte „Nein“ an."
                    },
                    "dmpManifestationOfRemoteMetastases_following_text": {
                        "complex": "eq",
                        "type": "DmpManifestationOfRemoteMetastases_following_text_E",
                        "validate": "kbv.BK_T_dmpManifestationOfRemoteMetastases_following_text",
                        "lib": types
                    },
                    "dmpManifestationOfRemoteMetastases_following_text_4_23": {
                        "complex": "eq",
                        "type": "DmpManifestationOfRemoteMetastases_following_text_4_23_E",
                        "validate": "kbv.BK_T_dmpManifestationOfRemoteMetastases_following_text_4_23",
                        "lib": types
                    },
                    "dmpBiopticConfirmationOfVisceralMetastases_4_23": {
                        "complex": "eq",
                        "type": "DmpBiopticConfirmationOfVisceralMetastases_4_23",
                        "validate": "kbv.BK_T_dmpBiopticConfirmationOfVisceralMetastases_4_23",
                        "lib": types
                    },
                    "dmpLymphedema_following": {
                        "complex": "eq",
                        "type": "DmpLymphedema_following_E",
                        "validate": "kbv.BK_T_dmpLymphedema_following",
                        "lib": types
                    }
                },
                "HGV_T": {
                    "dmpAge": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpAge.i18n' ),
                        "default": "CHILD"
                    },
                    "dmpExaminationDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpExaminationDate.i18n' ),
                        "hint": "Pflichtfeld",
                        "validate": "kbv.HGV_T_dmpExaminationDate"
                    },
                    "dmpHearingAidFirstMedication": {
                        "complex": "eq",
                        "type": "DmpHearingAidFirstMedication_E",
                        i18n: i18n( 'activity-schema.DmpHearingAidFirstMedication.i18n' ),
                        "validate": "kbv.HGV_T_dmpHearingAidFirstMedication",
                        "lib": types
                    },
                    "dmpFirstMedicationDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpFirstMedicationDate.i18n' )
                    },
                    "dmpHearingAidType": {
                        "complex": "eq",
                        "type": "DmpHearingAidType_E",
                        "lib": types
                    },
                    "dmpHearingAidTypeOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpHearingAidTypeOther.i18n' )
                    },
                    "dmpSpeechDevelopmentDisturbance": {
                        "complex": "eq",
                        "type": "DmpSpeechDevelopmentDisturbance_E",
                        "validate": "kbv.HGV_T_dmpSpeechDevelopmentDisturbance",
                        "lib": types
                    },
                    "dmpSpeechDevelopmentDisturbanceOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpSpeechDevelopmentDisturbanceOther.i18n' )
                    },
                    "dmpCentralAuditoryDefectExcluded": {
                        "complex": "eq",
                        "type": "DmpCentralAuditoryDefectExcluded_E",
                        "lib": types
                    },
                    "dmpSpeakingTestPossible": {
                        "complex": "eq",
                        "type": "DmpSpeakingTestPossible_E",
                        "validate": "kbv.HGV_T_dmpSpeakingTestPossible",
                        "lib": types
                    },
                    "dmpSpeechComprehensionDB": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpSpeechComprehensionDB.i18n' ),
                        "validate": "kbv.HGV_T_dmpSpeechComprehensionDB",
                        "hint": "Freiburger Einsilber / Freiburger Zahlen\n" +
                                "dBopt - Der Punkt des besten Hörverstehens des\n" +
                                "Patienten.\n" +
                                "Eingabe bitte ohne Nachkommastellen."
                    },
                    "dmpSpeechComprehensionEZ": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpSpeechComprehensionEZ.i18n' ),
                        "validate": "kbv.HGV_T_dmpSpeechComprehensionEZ",
                        "hint": "Freiburger Einsilber / Freiburger Zahlen\n" +
                                "Bitte entnehmen Sie die Werte aus dem Audiogramm."
                    },
                    "dmpSpeechComprehensionSVS": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpSpeechComprehensionSVS.i18n' ),
                        "validate": "kbv.HGV_T_dmpSpeechComprehensionSVS",
                        "hint": "Sprachverständlichkeitsschwelle (Göttinger Satztest,\n" +
                                "Oldenburger Satztest)\n" +
                                "Bitte tragen Sie den Hörverlust in dB ein."
                    },
                    "dmpSpeechComprehensionMaterial": {
                        "complex": "eq",
                        "type": "dmpSpeechComprehensionMaterial_E",
                        "validate": "kbv.HGV_T_dmpSpeechComprehensionMaterial",
                        "lib": types,
                        "hint": "Sprachverständnistest"
                    },
                    "dmpSpeechComprehensionMaterialOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterialOther.i18n' )
                    },
                    "dmpNoiseReceptionAmblyacousia": {
                        "complex": "eq",
                        "type": "dmpNoiseReceptionAmblyacousia_E",
                        "validate": "kbv.HGV_T_dmpNoiseReceptionAmblyacousia",
                        "lib": types
                    },
                    "dmpNoiseFlowAmblyacousia": {
                        "complex": "eq",
                        "type": "dmpNoiseFlowAmblyacousia_E",
                        "validate": "kbv.HGV_T_dmpNoiseFlowAmblyacousia",
                        "lib": types
                    },
                    "dmpCombinedAmblyacousia": {
                        "complex": "eq",
                        "type": "dmpCombinedAmblyacousia_E",
                        "validate": "kbv.HGV_T_dmpCombinedAmblyacousia",
                        "lib": types
                    },
                    "dmpAmblyacousiaSeverityLeft": {
                        "complex": "eq",
                        "type": "dmpAmblyacousiaSeverity_E",
                        "validate": "kbv.HGV_T_dmpAmblyacousiaSeverityLeft",
                        "lib": types
                    },
                    "dmpAmblyacousiaSeverityRight": {
                        "complex": "eq",
                        "type": "dmpAmblyacousiaSeverity_E",
                        "validate": "kbv.HGV_T_dmpAmblyacousiaSeverityRight",
                        "lib": types
                    },
                    "dmpAmblyacousiaSeverityChildLeft": {
                        "complex": "eq",
                        "type": "dmpAmblyacousiaSeverityChild_E",
                        "validate": "kbv.HGV_T_dmpAmblyacousiaSeverityChildLeft",
                        "lib": types
                    },
                    "dmpAmblyacousiaSeverityChildRight": {
                        "complex": "eq",
                        "type": "dmpAmblyacousiaSeverityChild_E",
                        "validate": "kbv.HGV_T_dmpAmblyacousiaSeverityChildRight",
                        "lib": types
                    },
                    "dmpAmblyacousiaSeverityWHO": {
                        "complex": "eq",
                        "type": "dmpAmblyacousiaSeverityWHO_E",
                        "lib": types
                    },
                    "dmpFurtherDiagnosis": {
                        "complex": "eq",
                        "type": "dmpFurtherDiagnosis_E",
                        "lib": types
                    },
                    "dmpFurtherDiagnosisOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpFurtherDiagnosisOther.i18n' )
                    },
                    "dmpAirLine": {
                        "complex": "eq",
                        "type": "dmpAirLine_E",
                        "lib": types
                    },
                    "dmpAirLineOther": { // TODO DO
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpAirLineOther.i18n' )
                    },
                    "dmpBoneLine": {
                        "complex": "eq",
                        "type": "dmpBoneLine_E",
                        "lib": types
                    },
                    "dmpSpecialMedication": {
                        "complex": "eq",
                        "type": "dmpSpecialMedication_E",
                        "lib": types
                    },
                    "dmpSpecialMedicationOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpSpecialMedicationOther.i18n' )
                    },
                    "dmpExaminationDate_following": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpExaminationDate.i18n' ),
                        "hint": "Pflichtfeld",
                        "validate": "kbv.HGV_T_dmpExaminationDate_following"
                    },
                    "dmpMedicationConform": {
                        "complex": "eq",
                        "type": "dmpMedicationConform_E",
                        "lib": types
                    },
                    "dmpAirLineAnomaly": {
                        "complex": "eq",
                        "type": "dmpAirLine_E",
                        "lib": types
                    },
                    "dmpAirLineAnomalyOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpAirLineAnomalyOther.i18n' )
                    },
                    "dmpBoneLineAnomaly": {
                        "complex": "eq",
                        "type": "dmpBoneLine_E",
                        "lib": types
                    },
                    "dmpSpecialMedicationAnomaly": {
                        "complex": "eq",
                        "type": "dmpSpecialMedication_E",
                        "lib": types
                    },
                    "dmpSpecialMedicationAnomalyOther": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpSpecialMedicationAnomalyOther.i18n' )
                    },
                    "dmpSpeakingTestPossible_following": {
                        "complex": "eq",
                        "type": "DmpSpeakingTestPossible_E",
                        "validate": "kbv.HGV_T_dmpSpeakingTestPossible_following",
                        "lib": types
                    },
                    "dmpSpeechComprehensionFreeFieldEZ": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpSpeechComprehensionFreeFieldEZ.i18n' ),
                        "validate": "kbv.HGV_T_dmpSpeechComprehensionFreeFieldEZ",
                        "hint": "Freiburger Einsilber / Freiburger Zahlen\n" +
                                "Bitte entnehmen Sie die Werte aus dem Audiogramm."
                    },
                    "dmpSpeechComprehensionFreeFieldSVS": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpSpeechComprehensionFreeFieldSVS.i18n' ),
                        "validate": "kbv.HGV_T_dmpSpeechComprehensionFreeFieldSVS",
                        "hint": "Sprachverständlichkeitsschwelle (Göttinger Satztest, Oldenburger Satztest) Bitte tragen Sie den Hörverlust in dB ein."
                    },
                    "dmpListeningRangeWithoutHG": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpListeningRangeWithoutHG.i18n' ),
                        "validate": "kbv.HGV_T_dmpListeningRangeWithoutHG",
                        "hint": "optional",
                        "hintLevel": "OPTIONAL"
                    },
                    "dmpListeningRangeWithHG": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpListeningRangeWithHG.i18n' ),
                        "validate": "kbv.HGV_T_dmpListeningRangeWithHG",
                        "hint": "optional",
                        "hintLevel": "OPTIONAL"
                    },
                    "dmpAdvantageWithHG": {
                        "type": 'Number',
                        i18n: i18n( 'activity-schema.DmpAdvantageWithHG.i18n' ),
                        "validate": "kbv.HGV_T_dmpAdvantageWithHG",
                        "hint": "Bitte beantworten Sie nach Möglichkeit alle Fragen.\n" +
                                "Dies ist wichtig für die Errechnung der Verbesserung\n" +
                                "der Hörfähigkeit."
                    },
                    "dmpMedicationForFixedAmount": {
                        "complex": "eq",
                        "type": "DmpMedicationForFixedAmount_E",
                        "lib": types
                    },
                    "dmpHearingAidSuccessDetectable": {
                        "complex": "eq",
                        "type": "DmpHearingAidSuccessDetectable_E",
                        "lib": types,
                        "validate": "kbv.HGV_T_dmpHearingAidSuccessDetectable"
                    },
                    "dmpHearingAidSuccessMeasurementThrough": {
                        "complex": "eq",
                        "type": "DmpHearingAidSuccessMeasurementThrough_E",
                        "lib": types
                    },
                    "dmpMedicationForFree": {
                        "complex": "eq",
                        "type": "DmpMedicationForFree_E",
                        "lib": types
                    },
                    "dmpCooperation": {
                        "complex": "eq",
                        "type": "DmpCooperation_E",
                        "lib": types
                    }
                },
                "ZERVIX_ZYTOLOGIE_T": {
                    "dmpPhysicianName": {
                        "type": "String",
                        i18n: i18n( 'name' )
                    },
                    "dmpPhysicianCommercialNumber": {
                        "type": "String",
                        i18n: i18n( 'number' ),
                        "hint": "Pflichtfeld"
                    },
                    "dmpExaminationDate": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.DmpExaminationDate.i18n' ),
                        "hint": "Pflichtfeld",
                        "validate": "kbv.ZervixZytologie_T_dmpExaminationDate"
                    },
                    "dmpPrimaryFinding": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.DmpPrimaryFinding.i18n' )
                    },
                    "dmpZytologicalFinding": {
                        "complex": "eq",
                        "type": "dmpZytologicalFinding_E",
                        "lib": types
                    },
                    "dmpZytologicalFindingSelection": {
                        "complex": "eq",
                        "type": "dmpZytologicalFindingSelection_E",
                        "lib": types
                    },
                    "dmpHistologicalClarification": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.DmpHistologicalClarification.i18n' )
                    },
                    "dmpHistologicalClarificationSelection": {
                        "complex": "eq",
                        "type": "dmpHistologicalClarificationSelection_E",
                        "lib": types
                    },
                    "dmpMedicalPracticeSpecialty": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.DmpMedicalPracticeSpecialty.i18n' )
                    }
                },
                "KHK_T": {
                    "dmpAnginaPectoris": {
                        "complex": "eq",
                        "type": "DmpAnginaPectoris_E",
                        "validate": "kbv.KHK_T_dmpAnginaPectoris",
                        "lib": types
                    },
                    /**
                     * @deprecated since Q2 2018
                     */
                    "dmpSerumElectrolytes": {
                        "complex": "eq",
                        "type": "DmpSerumElectrolytes_E",
                        "lib": types
                    },
                    "dmpLdlCholesterolValue": {
                        "type": "Number",
                        "validate": "kbv.KHK_T_dmpLdlCholesterolValue",
                        i18n: i18n( 'activity-schema.KHK_T.dmpLdlCholesterolValue.i18n' ),
                        "hint": "Eine Angabe ist verpflichtend.<br>Wenn Sie die Werte erhoben haben, tragen Sie bitte jeweils den Wert in mmol/l mit einer Nachkommastelle <strong>oder</strong> den Wert in mg/dl ohne Nachkommastelle ein. Wenn das LDL-Cholesterin nicht untersucht wurde, geben Sie bitte „nicht bestimmt“ an.",
                        "-en": "LDL cholesterol",
                        "-de": "LDL-Cholesterin"
                    },
                    "dmpLdlCholesterolUnit": {
                        "complex": "eq",
                        "type": "DmpLdlCholesterolUnit_E",
                        "validate": "kbv.KHK_T_dmpLdlCholesterolUnit",
                        "lib": types
                    },
                    "dmpLdlCholesterolNotDetermined": {
                        "type": "Boolean",
                        "validate": "kbv.KHK_T_dmpLdlCholesterolNotDetermined",
                        i18n: i18n( 'activity-schema.KHK_T.dmpLdlCholesterolNotDetermined.i18n' ),
                        "-en": "LDL cholesterol not determined",
                        "-de": "LDL-Cholesterin nicht bestimmt"
                    },
                    "dmpKhkRelevantEvents": {
                        "complex": "eq",
                        "type": "DmpKhkRelevantEvents_E",
                        "validate": "kbv.KHK_T_dmpKhkRelevantEvents",
                        "lib": types
                    },
                    "dmpDiagnosticCoronaryTherapeuticIntervention": {
                        "complex": "eq",
                        "type": "DmpDiagnosticCoronaryTherapeuticIntervention_E",
                        "validate": "kbv.KHK_T_dmpDiagnosticCoronaryTherapeuticIntervention",
                        "lib": types
                    },
                    "dmpHadStationaryKhkTreatment": {
                        "type": "Number",
                        "validate": "kbv.KHK_T_dmpHadStationaryKhkTreatment",
                        i18n: i18n( 'activity-schema.KHK_T.dmpHadStationaryKhkTreatment.i18n' ),
                        "hint": "Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und ist hier verpflichtend.<br><br>Geben Sie bitte die Anzahl aller vollstationären Aufenthalte an, die seit der letzten Dokumentation auf Grund der KHK oder einer Herzinsuffizienz notwendig wurden. Sollte seit der letzten Dokumentation keine solche Behandlung notwendig gewesen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Stationary Urgent treatment for CHD since the last documentation",
                        "-de": "Stationäre notfallmäßige Behandlung wegen KHK seit der letzten Dokumentation"
                    },
                    "dmpKhkOtherMedication": {
                        "complex": "eq",
                        "type": "DmpKhkOtherMedication_E",
                        "validate": "kbv.KHK_T_dmpKhkOtherMedication",
                        "lib": types
                    },
                    "dmpRecommendedKhkTrainings": {
                        "complex": "eq",
                        "type": "DmpRecommendedKhkTrainings_E",
                        "validate": "kbv.KHK_T_dmpRecommendedKhkTrainings",
                        "lib": types
                    },
                    "dmpKhkRelatedTransferArranged": {
                        "complex": "eq",
                        "type": "DmpKhkRelatedTransferArranged_E",
                        "validate": "kbv.KHK_T_dmpKhkRelatedTransferArranged",
                        "lib": types
                    },
                    "dmpKhkRelatedConfinementArranged": {
                        "complex": "eq",
                        "type": "DmpKhkRelatedConfinementArranged_E",
                        "validate": "kbv.KHK_T_dmpKhkRelatedConfinementArranged",
                        "lib": types
                    },
                    /**
                     * @deprecated since Q2 2018
                     */
                    "dmpRegularWeightControlRecommended": {
                        "complex": "eq",
                        "type": "DmpRegularWeightControlRecommended_E",
                        "lib": types
                    }
                },
                "ASTHMA_T": {
                    "dmpFrequencyOfAsthmaSymptoms": {
                        "complex": "eq",
                        "type": "DmpFrequencyOfAsthmaSymptoms_E",
                        "validate": "kbv.ASTHMA_T_dmpFrequencyOfAsthmaSymptoms",
                        "lib": types
                    },
                    "dmpFrequencyOfAsthmaSymptoms_4_44": {
                        "complex": "eq",
                        "type": "DmpFrequencyOfAsthmaSymptoms_4_44_E",
                        "validate": "kbv.ASTHMA_T_dmpFrequencyOfAsthmaSymptoms_4_44",
                        "lib": types
                    },
                    "dmpFrequencyOfUseOfNeedMedication_4_44": {
                        "complex": "eq",
                        "type": "DmpFrequencyOfUseOfNeedMedication_4_44_E",
                        "validate": "kbv.ASTHMA_T_dmpFrequencyOfAsthmaSymptoms_4_44",
                        "lib": types
                    },
                    "dmpLimitationOfEverydayActivitiesDueToBronchialAsthma_4_44": {
                        "complex": "eq",
                        "type": "DmpLimitationOfEverydayActivitiesDueToBronchialAsthma_4_44_E",
                        "validate": "kbv.ASTHMA_T_dmpFrequencyOfAsthmaSymptoms_4_44",
                        "lib": types
                    },
                    "dmpAsthmaRelatedNightSleepDisorder_4_44": {
                        "complex": "eq",
                        "type": "DmpAsthmaRelatedNightSleepDisorder_4_44_E",
                        "validate": "kbv.ASTHMA_T_dmpFrequencyOfAsthmaSymptoms_4_44",
                        "lib": types
                    },
                    "dmpCurrentPeakFlowValue": {
                        "type": "Number",
                        "validate": "kbv.ASTHMA_T_dmpCurrentPeakFlowValue",
                        i18n: i18n( 'activity-schema.ASTHMA_T.dmpCurrentPeakFlowValue.i18n' ),
                        "hint": "Eine Angabe ist erforderlich.<br>Der Peak-Flow-Wert wird in der Regel von dem Patienten nach erfolgter Einweisung in den Gebrauch des Peakflow-Meters selbst gemessen, für die Angabe kann aber auch die in der Praxis supervidierte Messung mit dem Peakflow-Meter oder es können die Ergebnisse der Lungenfunktion herangezogen werden.<br>Bitte geben Sie den Peak-Flow-Wert in Litern pro Minute an bzw., dass der Test nicht durchgeführt wurde.<br><br>Sinnvoll ist die regelmäßige Überprüfung zum richtigen Gebrauch des Peakflow-Meters. Eine entsprechende Dokumentation ist dafür nicht vorgesehen.",
                        "-en": "Current peak flow value",
                        "-de": "Aktueller Peak-Flow-Wert"
                    },
                    "dmpCurrentPeakFlowValueNotDone": {
                        "type": "Boolean",
                        "validate": "kbv.ASTHMA_T_dmpCurrentPeakFlowValueNotDone",
                        i18n: i18n( 'activity-schema.ASTHMA_T.dmpCurrentPeakFlowValueNotDone.i18n' ),
                        "-en": "Current peak flow value done",
                        "-de": "Aktueller Peak-Flow-Wert durchgeführt"
                    },
                    "dmpCurrentFEV1Value_4_44": {
                        "type": "Number",
                        "validate": "kbv.ASTHMA_T_dmpCurrentFEV1Value_4_44",
                        i18n: i18n( 'activity-schema.ASTHMA_T.dmpCurrentFEV1Value_4_44.i18n' ),
                        "hint": "Die Durchführung einer Lungenfunktionsmessung wird ab dem vollendeten 5. Lebensjahr mindestens alle 12 Monate zur objektiven Bewertung und Einstufung des Asthma bronchiale empfohlen.<br>Genau eine Angabe ist erforderlich.<br>Geben Sie hier bitte den aktuell gemessenen FEV1-Wert Ihres Patienten als „Prozent-Wert des Sollwertes“ mit einer Stelle hinter dem Komma oder „nicht durchgeführt“ an.<br>Die Angabe „Nicht durchgeführt“ kann auch dann verwendet werden, wenn eine FEV1-Messung z. B. aufgrund des Alters bei Kindern nicht valide durchgeführt werden kann.",
                        "-en": "Aktueller FEV1-Wert (mindestens alle 12 Monate)",
                        "-de": "Aktueller FEV1-Wert (mindestens alle 12 Monate)"
                    },
                    "dmpCurrentFEV1ValueNotDone_4_44": {
                        "type": "Boolean",
                        "validate": "kbv.ASTHMA_T_dmpCurrentFEV1ValueNotDone_4_44",
                        i18n: i18n( 'activity-schema.ASTHMA_T.dmpCurrentFEV1ValueNotDone_4_44.i18n' ),
                        "-en": "Aktueller FEV1-Wert durchgeführt",
                        "-de": "Aktueller FEV1-Wert durchgeführt"
                    },
                    // < Q219 - 4.44 replaced with dmpHadUnplannedAsthmaTreatment_4_44
                    "dmpHadStationaryAsthmaTreatment": {
                        "type": "Number",
                        "validate": "kbv.ASTHMA_T_dmpHadStationaryAsthmaTreatment",
                        i18n: i18n( 'activity-schema.ASTHMA_T.dmpHadStationaryAsthmaTreatment.i18n' ),
                        "hint": "Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und ist hier verpflichtend.<br>Geben Sie bitte die Anzahl aller vollstationären Aufenthalte an, die seit der letzten Dokumentation auf Grund des Asthma bronchiale notwendig wurden. Sollte seit der letzten Dokumentation keine solche Behandlung notwendig gewesen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Stationary Urgent treatment for bronchial asthma since the last documentation",
                        "-de": "Stationäre notfallmäßige Behandlung wegen Asthma bronchiale seit der letzten Dokumentation"
                    },
                    "dmpHadUnplannedAsthmaTreatment_4_44": {
                        "type": "Number",
                        "validate": "kbv.ASTHMA_T_dmpHadUnplannedAsthmaTreatment_4_44",
                        i18n: i18n( 'activity-schema.ASTHMA_T.dmpHadUnplannedAsthmaTreatment_4_44.i18n' ),
                        "hint": "Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und ist hier verpflichtend.<br>Geben Sie bitte die Anzahl aller Ihnen bekannten ungeplanten Behandlungen (ambulant und stationär) an, die seit der letzten Dokumentation auf Grund des Asthma bronchiale notwendig wurden. Sollte seit der letzten Dokumentation keine solche Behandlung notwendig gewesen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Ungeplante, auch notfallmäßige (ambulant und stationär) ärztliche Behandlung wegen Asthma bronchiale seit der letzten Dokumentation",
                        "-de": "Ungeplante, auch notfallmäßige (ambulant und stationär) ärztliche Behandlung wegen Asthma bronchiale seit der letzten Dokumentation"
                    },
                    "dmpInhaledGlucocorticosteroids": {
                        "complex": "eq",
                        "type": "DmpInhaledGlucocorticosteroids_E",
                        "validate": "kbv.ASTHMA_T_dmpInhaledGlucocorticosteroids",
                        "lib": types
                    },
                    "dmpInhaledLongActingBeta2AdrenergicAgonist": {
                        "complex": "eq",
                        "type": "DmpInhaledLongActingBeta2AdrenergicAgonist_E",
                        "validate": "kbv.ASTHMA_T_dmpInhaledLongActingBeta2AdrenergicAgonist",
                        "lib": types
                    },
                    "dmpInhaledRapidActingBeta2AdrenergicAgonist": {
                        "complex": "eq",
                        "type": "DmpInhaledRapidActingBeta2AdrenergicAgonist_E",
                        "validate": "kbv.ASTHMA_T_dmpInhaledRapidActingBeta2AdrenergicAgonist",
                        "lib": types
                    },
                    "dmpSystemicGlucocorticosteroids": {
                        "complex": "eq",
                        "type": "DmpSystemicGlucocorticosteroids_E",
                        "validate": "kbv.ASTHMA_T_dmpSystemicGlucocorticosteroids",
                        "lib": types
                    },
                    "dmpOtherAsthmaSpecificMedication": {
                        "complex": "eq",
                        "type": "DmpOtherAsthmaSpecificMedication_E",
                        "validate": "kbv.ASTHMA_T_dmpOtherAsthmaSpecificMedication",
                        "lib": types
                    },
                    "dmpRecommendedAsthmaTrainings": {
                        "complex": "eq",
                        "type": "DmpRecommendedAsthmaTrainings_E",
                        "validate": "kbv.ASTHMA_T_dmpRecommendedAsthmaTrainings",
                        "lib": types
                    },
                    "dmpAsthmaTrainingAlreadyDoneBeforeDMP_4_44": {
                        "complex": "eq",
                        "type": "DmpAsthmaTrainingAlreadyDoneBeforeDMP_4_44_E",
                        "validate": "kbv.ASTHMA_T_dmpAsthmaTrainingAlreadyDoneBeforeDMP_4_44",
                        "lib": types
                    },
                    "dmpPerceivedAsthmaTraining": {
                        "complex": "eq",
                        "type": "DmpPerceivedTraining_E",
                        "validate": "kbv.ASTHMA_T_dmpPerceivedAsthmaTraining",
                        "lib": types
                    },
                    "dmpWrittenSelfManagementPlan": {
                        "complex": "eq",
                        "type": "DmpWrittenSelfManagementPlan_E",
                        "validate": "kbv.ASTHMA_T_dmpWrittenSelfManagementPlan",
                        "lib": types
                    },
                    "dmpTherapyAdjustment_4_44": {
                        "complex": "eq",
                        "type": "DmpTherapyAdjustment_4_44_E",
                        "validate": "kbv.ASTHMA_T_dmpTherapyAdjustment_4_44",
                        "lib": types
                    },
                    "dmpAsthmaRelatedTransferOrConfinementArranged": {
                        "complex": "eq",
                        "type": "DmpAsthmaRelatedTransferOrConfinementArranged_E",
                        "validate": "kbv.ASTHMA_T_dmpAsthmaRelatedTransferOrConfinementArranged",
                        "lib": types
                    }
                },
                "COPD_T": {
                    "dmpCurrentFev1": {
                        "type": "Number",
                        "validate": "kbv.COPD_T_dmpCurrentFev1",
                        i18n: i18n( 'activity-schema.COPD_T.dmpCurrentFev1.i18n' ),
                        "hint": "Genau eine Angabe ist erforderlich.<br>Geben Sie hier bitte den aktuell vor einer Spasmolyse gemessenen FEV1-Wert Ihres Patienten1 als Prozent-Wert zum Sollwert mit einer Stelle hinter dem Komma oder „nicht durchgeführt“ an.",
                        "-en": "Current FEV1 (every 6 to 12 months)",
                        "-de": "Aktueller FEV1-Wert (alle 6 bis 12 Monate)"
                    },
                    "dmpCurrentFev1NotDone": {
                        "type": "Boolean",
                        "validate": "kbv.COPD_T_dmpCurrentFev1NotDone",
                        i18n: i18n( 'activity-schema.COPD_T.dmpCurrentFev1NotDone.i18n' ),
                        "-en": "Current FEV1 done",
                        "-de": "Aktueller FEV1-Wert durchgeführt"
                    },
                    "dmpClinicalAssessmentOfOsteoporosisRisk": {
                        "complex": "eq",
                        "type": "DmpClinicalAssessmentOfOsteoporosisRisk_E",
                        "validate": "kbv.COPD_T_dmpClinicalAssessmentOfOsteoporosisRisk",
                        "lib": types
                    },
                    "dmpFrequencyExacerbationsSinceLast": {
                        "type": "Number",
                        "validate": "kbv.COPD_T_dmpFrequencyExacerbationsSinceLast",
                        i18n: i18n( 'activity-schema.COPD_T.dmpFrequencyExacerbationsSinceLast.i18n' ),
                        "hint": "Eine Angabe ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und hier verpflichtend.<br>Als Exazerbation zählt jede Verschlechterung der Symptomatik, die eine Veränderung der Medikation im Sinne einer Intensivierung der Therapie erforderlich macht.<br>Geben Sie bitte die Anzahl von Exazerbationen seit der letzten Dokumentation an. Sollte keine Exazerbation seit der letzten Dokumentation vorgelegen haben, geben Sie bitte eine „0“ an.",
                        "-en": "Frequency of exacerbations since the last documentation",
                        "-de": "Häufigkeit von Exazerbationen seit der letzten Dokumentation"
                    },
                    "dmpHadStationaryCopdTreatment": {
                        "type": "Number",
                        "validate": "kbv.COPD_T_dmpHadStationaryCopdTreatment",
                        i18n: i18n( 'activity-schema.COPD_T.dmpHadStationaryCopdTreatment.i18n' ),
                        "hint": "Eine Angabe ist nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und hier verpflichtend.<br>Geben Sie bitte die Anzahl aller vollstationären Aufenthalte an, die seit der letzten Dokumentation auf Grund der COPD notwendig wurden. Sollte seit der letzten Dokumentation keine solche Behandlung notwendig gewesen sein, geben Sie bitte eine „0“ an.",
                        "-en": "Stationary Urgent treatment for COPD since the last documentation",
                        "-de": "Stationäre notfallmäßige Behandlung wegen COPD seit der letzten Dokumentation"
                    },
                    "dmpShortActingBeta2AdrenergicAgonistAnticholinergics": {
                        "complex": "eq",
                        "type": "DmpShortActingBeta2AdrenergicAgonistAnticholinergics_E",
                        "validate": "kbv.COPD_T_dmpShortActingBeta2AdrenergicAgonistAnticholinergics",
                        "lib": types
                    },
                    "dmpLongActingBeta2AdrenergicAgonist": {
                        "complex": "eq",
                        "type": "DmpLongActingBeta2AdrenergicAgonist_E",
                        "validate": "kbv.COPD_T_dmpLongActingBeta2AdrenergicAgonist",
                        "lib": types
                    },
                    "dmpLongActingAnticholinergics": {
                        "complex": "eq",
                        "type": "DmpLongActingAnticholinergics_E",
                        "validate": "kbv.COPD_T_dmpLongActingAnticholinergics",
                        "lib": types
                    },
                    "dmpOtherDiseaseSpecificMedication": {
                        "complex": "eq",
                        "type": "DmpOtherDiseaseSpecificMedication_E",
                        "validate": "kbv.COPD_T_dmpOtherDiseaseSpecificMedication",
                        "lib": types
                    },
                    "dmpRecommendedCopdTrainings": {
                        "complex": "eq",
                        "type": "DmpRecommendedCopdTrainings_E",
                        "validate": "kbv.COPD_T_dmpRecommendedCopdTrainings",
                        "lib": types
                    },
                    "dmpAttendedTrainingBeforeSubscription": {
                        "complex": "eq",
                        "type": "DmpAttendedTrainingBeforeSubscription_E",
                        "validate": "kbv.COPD_T_dmpAttendedTrainingBeforeSubscription",
                        "lib": types
                    },
                    "dmpPerceivedCopdTraining": {
                        "complex": "eq",
                        "type": "DmpPerceivedTraining_E",
                        "validate": "kbv.COPD_T_dmpPerceivedCopdTraining",
                        "lib": types
                    },
                    "dmpCopdRelatedTransferOrConfinementArranged": {
                        "complex": "eq",
                        "type": "DmpCopdRelatedTransferOrConfinementArranged_E",
                        "validate": "kbv.COPD_T_dmpCopdRelatedTransferOrConfinementArranged",
                        "lib": types
                    },
                    "dmpRecommendedTobaccoAbstinence": {
                        "complex": "eq",
                        "type": "DmpRecommendedTobaccoAbstinence_E",
                        "validate": "kbv.COPD_T_dmpRecommendedTobaccoAbstinence",
                        "lib": types
                    },
                    "dmpRecommendedTobaccoRehabProgram": {
                        "complex": "eq",
                        "type": "DmpRecommendedTobaccoRehabProgram_E",
                        "validate": "kbv.COPD_T_dmpRecommendedTobaccoRehabProgram",
                        "lib": types
                    },
                    "dmpAttendedTobaccoRehabProgramSinceLastRecommendation": {
                        "complex": "eq",
                        "type": "DmpAttendedTobaccoRehabProgramSinceLastRecommendation_E",
                        "validate": "kbv.COPD_T_dmpAttendedTobaccoRehabProgramSinceLastRecommendation",
                        "lib": types
                    },
                    "dmpRecommendedPhysicalTraining": {
                        "complex": "eq",
                        "type": "DmpRecommendedPhysicalTraining_E",
                        "validate": "kbv.COPD_T_dmpRecommendedPhysicalTraining",
                        "lib": types
                    }
                },
                "DmpEvents_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPathoUrinAlbAus_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend. Mehrfachnennungen sind dabei möglich.<br>Bitte geben Sie an, ob bei Ihrem Patienten in der Vergangenheit eines der aufgeführten Ereignisse eingetreten ist.<br><br>Handelt es sich um eine <strong>Erstdokumentation</strong>, sind hier Ereignisse aus der Vergangenheit einzubeziehen.<br>Erfolgt die Angabe im Rahmen einer <strong>Folgedokumentation</strong>, sind jeweils nur Ereignisse seit der letzten Dokumentation zu berücksichtigen.Sollte in der Vergangenheit bzw. seit der letzten Dokumentation kein solches Ereignis stattgefunden haben, geben Sie bitte zur Vollständigkeit „keines der genannten Ereignisse“ an.<br><br>Zur Erläuterung der Erkrankungen:<br><br><ul><li><strong>Nierenersatztherapie:</strong> Hier ist die Dialyse zu dokumentieren.</li>   <li><strong>Erblindung:</strong> Hier ist die Erblindung im gesetzlichen Sinn mit einer verbleibenden Sehschärfe von höchstens 0,02 auf dem besseren Auge gemeint. Diese muss Folge des Diabetes sein.</li>  <li><strong>Amputation:</strong> Eine Amputation soll dann angegeben werden, wenn diese aufgrund eines diabetischen Fußes notwendig wurde. Hierunter sind alle Arten der Amputation, also sowohl die Zehen-, die Vorfuß- als auch die Unter- oder Oberschenkelamputation zu verstehen.</li> <li><strong>Herzinfarkt:</strong> Gemeint ist hier der durch EKG und/oder biochemische Marker nachgewiesene Infarkt.</li><li><strong>Schlaganfall:</strong> Gemeint ist der primär ischämische Hirninfarkt</li></ul>",
                    "-en": "Pathologische Urin-Albumin-Ausscheidung",
                    "-de": "Pathologische Urin-Albumin-Ausscheidung",
                    "list": [
                        {
                            "val": "RENAL_REPLACEMENT_THERAPY",
                            "-de": "Nierenersatztherapie",
                            i18n: i18n( 'activity-schema.DmpEvents_E.RENAL_REPLACEMENT_THERAPY.i18n' ),
                            "-en": "Renal Replacement Therapy"
                        },
                        {
                            "val": "BLINDNESS",
                            "-de": "Erblindung",
                            i18n: i18n( 'activity-schema.DmpEvents_E.BLINDNESS.i18n' ),
                            "-en": "Blindness"
                        },
                        {
                            "val": "AMPUTATION",
                            "-de": "Amputation",
                            i18n: i18n( 'activity-schema.DmpEvents_E.AMPUTATION.i18n' ),
                            "-en": "Amputation"
                        },
                        {
                            "val": "HEART_ATTACK",
                            "-de": "Herzinfarkt",
                            i18n: i18n( 'activity-schema.DmpEvents_E.HEART_ATTACK.i18n' ),
                            "-en": "Heart attack"
                        },
                        {
                            "val": "STROKE",
                            "-de": "Schlaganfall",
                            i18n: i18n( 'activity-schema.DmpEvents_E.STROKE.i18n' ),
                            "-en": "Stroke"
                        },
                        {
                            "val": "NONE_OF_THESE_EVENTS",
                            "-de": "Keine der genannten Ereignisse",
                            i18n: i18n( 'activity-schema.DmpEvents_E.NONE_OF_THESE_EVENTS.i18n' ),
                            "-en": "Keine der genannten Ereignisse"
                        }
                    ]
                },
                "DmpAntiplatelet_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAntiplatelet_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind möglich.<br>Geben Sie bitte an, ob eine Therapie mit Thrombozytenaggregationshemmern durchgeführt wird. Hierbei ist die Gabe u,a, von ASS oder Clopidogrel gemeint. Sie können auch angeben, ob eine orale Antikoagulations-Therapie erfolgt. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines Thrombozytenaggregationshemmers besteht und/oder eine orale Antikoagulations-Therapie erfolgt.<br>Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Antiplatelet",
                    "-de": "Thrombozytenaggregationshemmer",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpAntiplatelet_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpAntiplatelet_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpAntiplatelet_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        },
                        {
                            "val": "ORAL_ANTICOAGULATION",
                            "-de": "orale Antikoagulation",
                            i18n: i18n( 'activity-schema.DmpAntiplatelet_E.ORAL_ANTICOAGULATION.i18n' ),
                            "-en": "Oral anticoagulation"
                        }
                    ]
                },
                "DmpBetaBlocker_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpBetaBlocker_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind möglich.<br>Geben Sie bitte an, ob eine Therapie mit Betablockern durchgeführt wird. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines Betablockers besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Beta blocker",
                    "-de": "Beta Blocker",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpBetaBlocker_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpBetaBlocker_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpBetaBlocker_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        }
                    ]
                },
                "DmpGlibenclamide_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpGlibenclamide_E.i18n' ),
                    "hint": "Diese Angabe ist nur im Rahmen einer Dokumentation zu <strong>Diabetes mellitus Typ 2</strong> möglich und hier verpflichtend.<br>Geben Sie bitte an, ob eine Therapie mit Glibenclamid durchgeführt wird. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe von Glibenclamid besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Glibenclamide",
                    "-de": "Glibenclamid",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpGlibenclamide_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpGlibenclamide_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpGlibenclamide_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        }
                    ]
                },
                "DmpMetformin_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpMetformin_E.i18n' ),
                    "hint": "Diese Angabe ist nur im Rahmen einer Dokumentation zu <strong>Diabetes mellitus Typ 2</strong> möglich und hier verpflichtend. Geben Sie bitte an, ob eine Therapie mit Metformin durchgeführt wird. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe von Metformin besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Metformin",
                    "-de": "Metformin",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpMetformin_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpMetformin_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpMetformin_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        }
                    ]
                },
                "DmpACE_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpACE_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind möglich.<br>Geben Sie bitte an, ob eine Therapie mit ACE-Hemmern durchgeführt wird. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines ACE- Hemmers besteht und eine Alternativ-Therapie mit AT1-Rezeptorantagonisten erfolgt. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "ACE inhibitor",
                    "-de": "ACE-Hemmer",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpACE_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpACE_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpACE_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        },
                        {
                            "val": "AT1",
                            "-de": "AT1-Rezeptorantagonisten",
                            i18n: i18n( 'activity-schema.DmpACE_E.AT1.i18n' ),
                            "-en": "AT1-receptor antagonists"
                        }
                    ]
                },
                "DmpHMG_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHMG_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind möglich.<br>Geben Sie bitte an, ob eine Therapie mit Statinen durchgeführt wird. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines Statins besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "HMG-CoA reductase",
                    "-de": "HMG-CoA-Reduktase-Hemmer",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpHMG_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpHMG_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpHMG_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        }
                    ]
                },
                "DmpTHIA_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpTHIA_E.i18n' ),
                    "hint": "Eine Angabe ist sowohl bei Diabetes mellitus Typ 1 als auch bei Typ 2 erforderlich. Mehrfachnennungen sind möglich.<br>Bitte geben Sie hier an, ob Ihr Patient Thiaziddiuretika erhält. Hier ist ebenfalls die Gabe von Chlorthalidon zu erfassen. Bitte geben Sie bei „nein“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines Diuretikums besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "HMG-CoA reductase",
                    "-de": "Thiaziddiuretika, einschließlich Chlorthalidon",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpTHIA_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpTHIA_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            "-de": "Kontraindikation",
                            i18n: i18n( 'activity-schema.DmpTHIA_E.CONTRAINDICATION.i18n' ),
                            "-en": "Contraindication"
                        }
                    ]
                },
                "DmpPathoUrinAlbAus_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPathoUrinAlbAus_E.i18n' ),
                    "-en": "Pathologische Urin-Albumin-Ausscheidung",
                    "-de": "Pathologische Urin-Albumin-Ausscheidung",
                    "hint": "Eine Angabe ist verpflichtend.</br>Hierunter sind sowohl die Makro- als auch die Mikroalbuminurie und/oder die Proteinurie ab einer Eiweißausscheidungsrate > 30 mg/24 Stunden (20mg/l Urin) zu verstehen.</br></br>Wenn dieser Wert nicht untersucht wurde, ist hier zur Vollständigkeit eine Angabe bei „nicht untersucht“ zu machen.",
                    "list": [
                        {
                            "val": "NOT_MEASURED",
                            "-de": "Nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpPathoUrinAlbAus_E.NOT_MEASURED.i18n' ),
                            "-en": "not measured"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpPathoUrinAlbAus_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpPathoUrinAlbAus_E.NO.i18n' ),
                            "-en": "No"
                        }
                    ]
                },
                "DmpInjectionSites_E": {
                    "type": "String",
                    "validate": "kbv.DM_T_dmpInjectionSites",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpInjectionSites_E.i18n' ),
                    "hint": "Diese Angabe ist nur im Rahmen einer Dokumentation zu <strong>Diabetes mellitus Typ 1 sowie bei Patienten mit einer Insulintherapie bei Diabetes mellitus Typ 2</strong> möglich und hier verpflichtend. Geben Sie bitte an, ob die Insulin-Injektionsstellen auffällig oder unauffällig sind. Zu den Injektionsstellen zählen auch die Applikationsstellen bei einer Insulin-Pumpentherapie.</br>Sollten Sie die Injektionsstellen nicht untersucht haben, geben Sie bitte zur Vollständigkeit „Nicht untersucht“ an.",
                    "-en": "Injection sites",
                    "-de": "Injektionsstellen (bei Insulintherapie)",
                    "list": [
                        {
                            "val": "NOT_MEASURED",
                            "-de": "Nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpInjectionSites_E.NOT_MEASURED.i18n' ),
                            "-en": "not measured"
                        },
                        {
                            "val": "INCONSPICUOUS",
                            "-de": "Unauffällig",
                            i18n: i18n( 'activity-schema.DmpInjectionSites_E.INCONSPICUOUS.i18n' ),
                            "-en": "inconspicuous"
                        },
                        {
                            "val": "CONSPICUOUS",
                            "-de": "Auffällig",
                            i18n: i18n( 'activity-schema.DmpInjectionSites_E.CONSPICUOUS.i18n' ),
                            "-en": "conspicuous"
                        }
                    ]
                },
                "DmpIntervalFutureFootInspections_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    "hint": '<p>Die Angabe ist verpflichtend bei allen Patienten, die das 18. Lebensjahr vollendet haben. Genau eine Angabe ist zulässig.</p><p>Je nach Risiko-Status ist mindestens einmal jährlich eine Untersuchung beider Füße (ggf. der Amputationsstümpfe) durchzuführen. Bei Patienten mit erhöhtem Risiko soll die Prüfung häufiger erfolgen.</p><p>Anhand der folgenden Kriterien ist die künftige Frequenz der Fußinspektion, einschließlich Kontrolle des Schuhwerks, festzulegen:</p><table class="table table-bordered"><tr><td style="width: 50%">Keine sensible Neuropathie</td><td style="width: 50%">Mindestens jährlich</td></tr><tr><td style="width: 50%">sensible Neuropathie</td><td style="width: 50%">Mindestens alle 6 Monate</td></tr><tr><td style="width: 50%">sensible Neuropathie und Zeichen einer peripheren arteriellen Verschlusskrankheit und/oder Risiken wie Fußdeformitäten (ggf. infolge Osteoarthropathie), Hyperkeratose mit Einblutung, Z.n. Ulcus, Z.n. Amputation</td><td style="width: 50%">alle 3 Monate oder häufiger</td></tr></table>',
                    i18n: i18n( 'activity-schema.DmpIntervalFutureFootInspections_E.i18n' ),
                    "-en": "Intervall für künftige Fußinspektionen (bei Patientinnen und Patienten ab dem vollendeten 18. Lebensjahr)",
                    "-de": "Intervall für künftige Fußinspektionen (bei Patientinnen und Patienten ab dem vollendeten 18. Lebensjahr)",
                    "list": [
                        {
                            "val": "YEARLY",
                            "-de": "Jährlich",
                            i18n: i18n( 'activity-schema.DmpIntervalFutureFootInspections_E.YEARLY.i18n' ),
                            "-en": "Jährlich"
                        },
                        {
                            "val": "EVERY_SIX_MONTH",
                            "-de": "alle 6 Monate",
                            i18n: i18n( 'activity-schema.DmpIntervalFutureFootInspections_E.EVERY_SIX_MONTH.i18n' ),
                            "-en": "alle 6 Monate"
                        },
                        {
                            "val": "EVERY_THREE_MONTH",
                            "-de": "alle 3 Monate oder häufiger",
                            i18n: i18n( 'activity-schema.DmpIntervalFutureFootInspections_E.EVERY_THREE_MONTH.i18n' ),
                            "-en": "alle 3 Monate oder häufiger"
                        }
                    ]
                },
                "DmpHbA1cUnit_E": {
                    "default": "PERCENT",
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHbA1cUnit_E.i18n' ),
                    "-en": "concomitant disease",
                    "-de": "Begleiterkrankungen",
                    "list": [
                        {
                            "val": "PERCENT",
                            "-de": "%",
                            i18n: i18n( 'activity-schema.DmpHbA1cUnit_E.PERCENT.i18n' ),
                            "-en": "%"
                        },
                        {
                            "val": "MMOLMOL",
                            "-de": "mmol/mol",
                            i18n: i18n( 'activity-schema.DmpHbA1cUnit_E.MMOLMOL.i18n' ),
                            "-en": "mmol/mol"
                        }
                    ]
                },
                "DmpSequelae_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSequelae_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "Die Angabe ist verpflichtend. Mehrfachnennungen sind dabei möglich.</br>Machen Sie bitte hier eine Angabe, wenn bei Ihrem Patienten eine oder mehrere der aufgeführten Spätfolgen vorliegen.</br>Zur Erläuterung der Erkrankungen: </br></br> <ul> <li><strong>Nephropathie: </strong>Diabetes-bedingte Nierenschädigung mit erhöhter Albuminausscheidung (> 30 mg/24 Stunden bzw. 20 mg/l Urin) und/oder eine Verminderung der glomerulären Filtrationsrate.</li> <li><strong>Diabetische Neuropathie: </strong>Sensomotorische Polyneuropathie und/oder autonome diabetische Neuropathie.</li> <li><strong>Diabetische Retinopathie: </strong>Diese liegt vor, wenn es aufgrund des Diabetes zu einer Schädigung der Netzhautgefäße gekommen ist und diese funduskopisch nachgewiesen wurde. Zu berücksichtigen sind nicht-proliferative und proliferative Retinopathie sowie eine Makulopathie.</li> </ul>",
                    "-en": "Sequelae",
                    "-de": "Spätfolgen",
                    "list": [
                        {
                            "val": "DIAB_NEPHR",
                            "-de": "Diabetische Nephropathie",
                            i18n: i18n( 'activity-schema.DmpSequelae_E.DIAB_NEPHR.i18n' ),
                            "-en": "Diabetische Nephropathie"
                        },
                        {
                            "val": "DIAB_NEURO",
                            "-de": "Diabetische Neuropathie",
                            i18n: i18n( 'activity-schema.DmpSequelae_E.DIAB_NEURO.i18n' ),
                            "-en": "Diabetische Neuropathie"
                        },
                        {
                            "val": "DIAB_RETIN",
                            "-de": "Diabetische Retinopathie",
                            i18n: i18n( 'activity-schema.DmpSequelae_E.DIAB_RETIN.i18n' ),
                            "-en": "Diabetische Retinopathie"
                        }
                    ]
                },
                "DmpConcomitantDisease_E": {
                    "hint": "Eine Angabe ist verpflichtend; dabei sind Mehrfachnennungen möglich.</br>Hier geben Sie bitte an, ob Ihr Patient eine oder mehrere der aufgeführten Begleiterkrankungen hat. Sollte(n) bei Ihrem Patienten andere als die hier aufgeführten oder gar keine Begleiterkrankungen vorliegen, geben Sie bitte „Keine der genannten Erkrankungen“ an.",
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.i18n' ),
                    "-en": "concomitant disease",
                    "-de": "Begleiterkrankungen",
                    "list": [
                        DmpConcomitantDisease_E.ARTERIAL_HYPERTENSION,
                        DmpConcomitantDisease_E.AVK,
                        DmpConcomitantDisease_E.BRONCHIAL_ASTHMA,
                        DmpConcomitantDisease_E.CHRONIC_HEART_FAILURE,
                        DmpConcomitantDisease_E.COPD,
                        DmpConcomitantDisease_E.DIABETES_MELLITUS,
                        DmpConcomitantDisease_E.DYSLIPIDEMIA,
                        DmpConcomitantDisease_E.KHK,
                        DmpConcomitantDisease_E.NONE_OF_THESE_DISEASES
                    ]
                },
                "DmpDmConcomitantDisease_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.i18n' ),
                    "-en": "concomitant disease",
                    "-de": "Begleiterkrankungen",
                    "list": [
                        DmpConcomitantDisease_E.NONE_OF_THESE_DISEASES,
                        DmpConcomitantDisease_E.AVK,
                        DmpConcomitantDisease_E.DYSLIPIDEMIA,
                        DmpConcomitantDisease_E.KHK,
                        DmpConcomitantDisease_E.ARTERIAL_HYPERTENSION,
                        DmpConcomitantDisease_E.CHRONIC_HEART_FAILURE,
                        DmpConcomitantDisease_E.BRONCHIAL_ASTHMA,
                        DmpConcomitantDisease_E.COPD
                    ]
                },
                "DmpKhkConcomitantDisease_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.i18n' ),
                    "-en": "concomitant disease",
                    "-de": "Begleiterkrankungen",
                    "list": [
                        DmpConcomitantDisease_E.NONE_OF_THESE_DISEASES,
                        DmpConcomitantDisease_E.AVK,
                        DmpConcomitantDisease_E.DYSLIPIDEMIA,
                        DmpConcomitantDisease_E.ARTERIAL_HYPERTENSION,
                        DmpConcomitantDisease_E.DIABETES_MELLITUS,
                        DmpConcomitantDisease_E.CHRONIC_HEART_FAILURE,
                        DmpConcomitantDisease_E.BRONCHIAL_ASTHMA,
                        DmpConcomitantDisease_E.COPD
                    ]
                },
                "DmpAsthmaConcomitantDisease_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.i18n' ),
                    "-en": "concomitant disease",
                    "-de": "Begleiterkrankungen",
                    "list": [
                        DmpConcomitantDisease_E.NONE_OF_THESE_DISEASES,
                        DmpConcomitantDisease_E.AVK,
                        DmpConcomitantDisease_E.DYSLIPIDEMIA,
                        DmpConcomitantDisease_E.KHK,
                        DmpConcomitantDisease_E.ARTERIAL_HYPERTENSION,
                        DmpConcomitantDisease_E.DIABETES_MELLITUS,
                        DmpConcomitantDisease_E.CHRONIC_HEART_FAILURE,
                        DmpConcomitantDisease_E.COPD
                    ]
                },
                "DmpCopdConcomitantDisease_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpConcomitantDisease_E.i18n' ),
                    "-en": "concomitant disease",
                    "-de": "Begleiterkrankungen",
                    "list": [
                        DmpConcomitantDisease_E.NONE_OF_THESE_DISEASES,
                        DmpConcomitantDisease_E.AVK,
                        DmpConcomitantDisease_E.DYSLIPIDEMIA,
                        DmpConcomitantDisease_E.KHK,
                        DmpConcomitantDisease_E.ARTERIAL_HYPERTENSION,
                        DmpConcomitantDisease_E.DIABETES_MELLITUS,
                        DmpConcomitantDisease_E.CHRONIC_HEART_FAILURE,
                        DmpConcomitantDisease_E.BRONCHIAL_ASTHMA
                    ]
                },
                "DmpPulsStatus_E": {
                    "hint": "Geben Sie bitte bei allen Patienten, die das 18. Lebensjahr vollendet haben, an, ob der Pulsstatus auffällig oder unauffällig ist.</br>Sollten Sie den Pulsstatus nicht erhoben haben, machen Sie bitte eine Angabe bei „nicht erhoben“.",
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPulsStatus_E.i18n' ),
                    "-en": "puls status",
                    "-de": "Pulsstatus",
                    "list": [
                        {
                            "val": "NOT_MEASURED",
                            "-de": "Nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpPulsStatus_E.NOT_MEASURED.i18n' ),
                            "-en": "not measured"
                        },
                        {
                            "val": "INCONSPICUOUS",
                            "-de": "Unauffällig",
                            i18n: i18n( 'activity-schema.DmpPulsStatus_E.INCONSPICUOUS.i18n' ),
                            "-en": "inconspicuous"
                        },
                        {
                            "val": "CONSPICUOUS",
                            "-de": "Auffällig",
                            i18n: i18n( 'activity-schema.DmpPulsStatus_E.CONSPICUOUS.i18n' ),
                            "-en": "conspicuous"
                        }
                    ]
                },
                "DmpSensitivityTesting_E": {
                    "hint": "Geben Sie bitte bei allen Patienten, die das 18. Lebensjahr vollendet haben, an, ob die Sensibilitätsprüfung auffällig oder unauffällig ist.</br>Eine Sensibilitätsstörung liegt vor, wenn die den Fuß schützenden Empfindungsqualitäten eingeschränkt sind (Nachweis z.B. durch Monofilament oder Stimmgabeltest).</br>Sollten Sie die Sensibilitätsprüfung nicht durchgeführt haben, machen Sie bitte eine Angabe bei „nicht durchgeführt“.",
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSensitivityTesting_E.i18n' ),
                    "-en": "Sensitivity Testing",
                    "-de": "Sensibilitätsprüfung",
                    "list": [
                        {
                            "val": "NOT_DONE",
                            "-de": "Nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpSensitivityTesting_E.NOT_DONE.i18n' ),
                            "-en": "not done"
                        },
                        {
                            "val": "INCONSPICUOUS",
                            "-de": "Unauffällig",
                            i18n: i18n( 'activity-schema.DmpSensitivityTesting_E.INCONSPICUOUS.i18n' ),
                            "-en": "inconspicuous"
                        },
                        {
                            "val": "CONSPICUOUS",
                            "-de": "Auffällig",
                            i18n: i18n( 'activity-schema.DmpSensitivityTesting_E.CONSPICUOUS.i18n' ),
                            "-en": "conspicuous"
                        }
                    ]
                },
                "DmpFootStatusText_E": {
                    "hint": "Geben Sie bitte bei allen Patienten, die das 18. Lebensjahr vollendet haben, zunächst an, ob der Fußstatus auffällig oder unauffällig ist. Unter einem „auffälligen Fußstatus“ werden angiologische, neuropathische und/oder osteoarthropatische Auffälligkeiten nach der Gradeinteilung von Wagner/Armstrong (siehe unten) verstanden. Sollten Sie den Fußstatus nicht erhoben haben, machen Sie bitte eine Angabe bei „nicht erhoben“.</br></br>Sollte an beiden Füßen eine Schädigung vorliegen, muss nur der schwerer betroffene Fuß dokumentiert werden.</br>Das Vorliegen von nicht-diabetischen Veränderungen, z.B. angeborene Fußdeformitäten, ist als „unauffällig“ zu dokumentieren.</br>Sollte eine Amputation vorliegen und ist der Restfuß bzw. Stumpf angiologisch-neuropathisch unauffällig und reizlos, ist dies ebenfalls als „unauffällig“ zu dokumentieren.</br></br><strong>Bei auffälligem Fußstatus sind weitere Angaben nach der Wagner-Armstrong-Klassifikation vorzunehmen</strong> Je nach Praxissoftware können Sie die Klassifikationsangabe durch Anklicken des jeweiligen Tabellenfeldes direkt in die Dokumentation übernehmen.<br><br><table class='table table-bordered'><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td><strong>A</strong></td><td>Prä- oder postulcerative Läsion</td><td>Oberflächliche Wunde</td><td>Wunde bis zur Ebene von Sehne oder Kapsel</td><td>Wunde bis zur Ebene von Knochen oder Gelenk</td><td>Nekrose von Fußteilen</td><td>Nekrose des gesamten Fußes</td></tr><tr><td><strong>B</strong></td><td>Mit Infektion</td><td>Mit Infektion</td><td>Mit Infektion</td><td>Mit Infektion</td><td>Mit Infektion</td><td>Mit Infektion</td></tr><tr><td><strong>C</strong></td><td>Mit Ischämie</td><td>Mit Ischämie</td><td>Mit Ischämie</td><td>Mit Ischämie</td><td>Mit Ischämie</td><td>Mit Ischämie</td></tr><tr><td><strong>D</strong></td><td>Mit Infektion und Ischämie</td><td>Mit Infektion und Ischämie</td><td>Mit Infektion und Ischämie</td><td>Mit Infektion und Ischämie</td><td>Mit Infektion und Ischämie</td><td>Mit Infektion und Ischämie</td></tr>",
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFootStatusText_E.i18n' ),
                    "-en": "puls status",
                    "-de": "Pulsstatus",
                    "list": [
                        {
                            "val": "NOT_MEASURED",
                            "-de": "Nicht erhoben",
                            i18n: i18n( 'activity-schema.DmpFootStatusText_E.NOT_MEASURED.i18n' ),
                            "-en": "not measured"
                        },
                        {
                            "val": "INCONSPICUOUS",
                            "-de": "Unauffällig",
                            i18n: i18n( 'activity-schema.DmpFootStatusText_E.INCONSPICUOUS.i18n' ),
                            "-en": "inconspicuous"
                        },
                        {
                            "val": "CONSPICUOUS",
                            "-de": "Auffällig",
                            i18n: i18n( 'activity-schema.DmpFootStatusText_E.CONSPICUOUS.i18n' ),
                            "-en": "conspicuous"
                        }
                    ]
                },
                "DmpFootStatusWagnerValue_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.i18n' ),
                    "-en": "Degrees Wagner",
                    "-de": "Grad nach Wagner",
                    "list": [
                        {
                            "val": "0",
                            "-de": "0",
                            i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.0.i18n' ),
                            "-en": "0"
                        },
                        {
                            "val": "1",
                            "-de": "1",
                            i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.1.i18n' ),
                            "-en": "1"
                        },
                        {
                            "val": "2",
                            "-de": "2",
                            i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.2.i18n' ),
                            "-en": "2"
                        },
                        {
                            "val": "3",
                            "-de": "3",
                            i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.3.i18n' ),
                            "-en": "3"
                        },
                        {
                            "val": "4",
                            "-de": "4",
                            i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.4.i18n' ),
                            "-en": "4"
                        },
                        {
                            "val": "5",
                            "-de": "5",
                            i18n: i18n( 'activity-schema.DmpFootStatusWagnerValue_E.5.i18n' ),
                            "-en": "5"
                        }
                    ]
                },
                "DmpFootStatusArmstrongValue_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFootStatusArmstrongValue_E.i18n' ),
                    "-en": "Degrees Armstrong",
                    "-de": "Grad nach Armstrong",
                    "list": [
                        {
                            "val": "A",
                            "-de": "A",
                            i18n: i18n( 'activity-schema.DmpFootStatusArmstrongValue_E.A.i18n' ),
                            "-en": "A"
                        },
                        {
                            "val": "B",
                            "-de": "B",
                            i18n: i18n( 'activity-schema.DmpFootStatusArmstrongValue_E.B.i18n' ),
                            "-en": "B"
                        },
                        {
                            "val": "C",
                            "-de": "C",
                            i18n: i18n( 'activity-schema.DmpFootStatusArmstrongValue_E.C.i18n' ),
                            "-en": "C"
                        },
                        {
                            "val": "D",
                            "-de": "D",
                            i18n: i18n( 'activity-schema.DmpFootStatusArmstrongValue_E.D.i18n' ),
                            "-en": "D"
                        }
                    ]
                },
                "DmpFurtherRiskUlcus_E": {
                    "hint": "Geben Sie bitte bei allen Patienten, die das 18. Lebensjahr vollendet haben, an, ob ein weiteres Risiko für die Entstehung eines Ulcus besteht. Hierzu zählen die Fußdeformität, die Hyperkeratose mit Einblutung, der Zustand nach einem vorherigen Ulcus und auch der Zustand nach einer Amputation (z.B. des Vorfusses). <br><br> Mehrfachangaben sind möglich. Bitte beachten Sie bei Mehrfachnennungen, dass neben der Angabe „nicht untersucht“ oder „nein“ keine weitere Angabe gemacht werden kann. <br><br> Bitte geben Sie „nein“ nur dann an, wenn an beiden Füßen kein Risiko für ein Ulcus besteht. <br><br> Sollten Sie das Ulcus-Risiko nicht erhoben haben, machen Sie bitte eine Angabe bei „nicht untersucht“.",
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.i18n' ),
                    "-en": "Weiteres Risiko für Ulcus",
                    "-de": "Weiteres Risiko für Ulcus",
                    "list": [
                        {
                            "val": "FOOT_DEFORMITY",
                            "-de": "Fußdeformität",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.FOOT_DEFORMITY.i18n' ),
                            "-en": "Fußdeformität"
                        },
                        {
                            "val": "HYPERKERATOSIS_WITH_HEMORRHAGE",
                            "-de": "Hyperkeratose mit Einblutung",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.HYPERKERATOSIS_WITH_HEMORRHAGE.i18n' ),
                            "-en": "Hyperkeratose mit Einblutung"
                        },
                        {
                            "val": "ULCUS",
                            "-de": "Z. n. Ulcus",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.ULCUS.i18n' ),
                            "-en": "Z. n. Ulcus"
                        },
                        {
                            "val": "AMPUTATION",
                            "-de": "Z. n. Amputation",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.AMPUTATION.i18n' ),
                            "-en": "Z. n. Amputation"
                        },
                        {
                            "val": "YES",
                            "-de": "ja",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.YES.i18n' ),
                            "-en": "ja"
                        },
                        {
                            "val": "NO",
                            "-de": "nein",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.NO.i18n' ),
                            "-en": "nein"
                        },
                        {
                            "val": "NOT_DONE",
                            "-de": "nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpFurtherRiskUlcus_E.NOT_DONE.i18n' ),
                            "-en": "nicht untersucht"
                        }
                    ]
                },
                "DmpUlkus_E": {
                    "hint": "Geben Sie bitte bei allen Patienten, die das 18. Lebensjahr vollendet haben, an, ob ein Ulcus besteht. <br><br> Bei Vorliegen eines Ulcus ist genau eine Angabe zur Beschaffenheit des Ulcus „oberflächlich“ oder „tief“ erforderlich. Bei Vorliegen mehrerer Ulzerationen ist der schwerste Befund zu dokumentieren. <br><br> Bitte geben Sie „nein“ nur dann an, wenn an beiden Füßen kein Ulcus besteht. <br><br> Sollten Sie das Vorhandensein eines Ulcus nicht untersuchthaben, machen Sie bitte eine Angabe bei „nicht untersucht“.",
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpUlkus_E.i18n' ),
                    "-en": "Ulkus",
                    "-de": "Ulkus",
                    "list": [
                        {
                            "val": "SUPERFICIAL",
                            "-de": "oberflächlich",
                            i18n: i18n( 'activity-schema.DmpUlkus_E.SUPERFICIAL.i18n' ),
                            "-en": "oberflächlich"
                        },
                        {
                            "val": "DEEP",
                            "-de": "tief",
                            i18n: i18n( 'activity-schema.DmpUlkus_E.DEEP.i18n' ),
                            "-en": "tief"
                        },
                        {
                            "val": "NO",
                            "-de": "nein",
                            i18n: i18n( 'activity-schema.DmpUlkus_E.NO.i18n' ),
                            "-en": "nein"
                        },
                        {
                            "val": "NOT_DONE",
                            "-de": "nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpUlkus_E.NOT_DONE.i18n' ),
                            "-en": "nicht untersucht"
                        }
                    ]
                },
                "DmpWoundInfection_E": {
                    "hint": "Geben Sie bitte bei allen Patienten, die das 18. Lebensjahr vollendet haben, an, ob eine (Wund)Infektion an einem oder beiden Füßen vorliegt. Genau eine Angabe ist zulässig. Bitte geben Sie „nein“ nur dann an, wenn an beiden Füßen keine (Wund)Infektion besteht. <br><br> Sollten Sie die Füße nicht auf das Vorliegen von (Wund)Infektionen untersucht haben, machen Sie bitte eine Angabe bei „nicht untersucht“.",
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpWoundInfection_E.i18n' ),
                    "-en": "(Wund)Infektion",
                    "-de": "(Wund)Infektion",
                    "list": [
                        {
                            "val": "YES",
                            "-de": "ja",
                            i18n: i18n( 'activity-schema.DmpWoundInfection_E.YES.i18n' ),
                            "-en": "ja"
                        },
                        {
                            "val": "NO",
                            "-de": "nein",
                            i18n: i18n( 'activity-schema.DmpWoundInfection_E.NO.i18n' ),
                            "-en": "nein"
                        },
                        {
                            "val": "NOT_DONE",
                            "-de": "nicht untersucht",
                            i18n: i18n( 'activity-schema.DmpWoundInfection_E.NOT_DONE.i18n' ),
                            "-en": "nicht untersucht"
                        }
                    ]
                },
                "DmpFootStatusUnit_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFootStatusUnit_E.i18n' ),
                    "-en": "puls status",
                    "-de": "Pulsstatus",
                    "list": [
                        {
                            "val": "WAGNER",
                            "-de": "Wagner",
                            i18n: i18n( 'activity-schema.DmpFootStatusUnit_E.WAGNER.i18n' ),
                            "-en": "Wagner"
                        },
                        {
                            "val": "ARMSTRONG",
                            "-de": "Armstrong",
                            i18n: i18n( 'activity-schema.DmpFootStatusUnit_E.ARMSTRONG.i18n' ),
                            "-en": "Armstrong"
                        }

                    ]
                },
                "DmpRecommendedDmTrainings_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedDmTrainings_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend. Mehrfachnennungen sind möglich.<br>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) die Teilnahme an einem Schulungsprogramm empfohlen haben, geben Sie bitte hier an, für welche der beiden hier in Frage kommenden Indikation(en) die Schulung(en) durchgeführt werden soll(en).<br>Wurde <ins>keine Schulung</ins> empfohlen, geben Sie dies bitte auch an.",
                    "-en": "Training is recommended (at the current documentation)",
                    "-de": "Schulung empfohlen (bei aktueller Dokumentation)",
                    "list": [
                        DmpRecommendedTrainings_E.NONE,
                        DmpRecommendedTrainings_E.DIABETES,
                        DmpRecommendedTrainings_E.HYPERTENSION
                    ]
                },
                "DmpDmTrainingsBeforeSubscription_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpDmTrainingsBeforeSubscription_E.i18n' ),
                    "-en": "Schulung schon vor Einschreibung ins DMP bereits wahrgenommen",
                    "-de": "Schulung schon vor Einschreibung ins DMP bereits wahrgenommen",
                    "list": [
                        DmpRecommendedTrainings_E.NONE,
                        DmpRecommendedTrainings_E.DIABETES,
                        DmpRecommendedTrainings_E.HYPERTENSION
                    ]
                },
                "DmpRecommendedKhkTrainings_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedKhkTrainings_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend. Mehrfachnennungen sind möglich.<br>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) die Teilnahme an einem Schulungsprogramm empfohlen haben, geben Sie bitte hier an, für welche der beiden hier in Frage kommenden Indikation(en) die Schulung(en) durchgeführt werden soll(en).<br>Wurde <ins>keine Schulung</ins> empfohlen, geben Sie dies bitte auch an.",
                    "-en": "Training is recommended (at the current documentation)",
                    "-de": "Schulung empfohlen (bei aktueller Dokumentation)",
                    "list": [
                        DmpRecommendedTrainings_E.NONE,
                        DmpRecommendedTrainings_E.DIABETES,
                        DmpRecommendedTrainings_E.HYPERTENSION
                    ]
                },
                "DmpRecommendedAsthmaTrainings_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedAsthmaTrainings_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) die Teilnahme an einem Schulungsprogramm empfohlen haben, geben Sie dies bitte hier an.<br>Wurde <ins>keine Schulung</ins> empfohlen, geben Sie dies bitte auch an.",
                    "-en": "Asthma Training is recommended (at the current documentation)",
                    "-de": "Asthma-Schulung empfohlen (bei aktueller Dokumentation)",
                    "list": [
                        DmpAsthmaCopdRecommendedTrainings_E.NONE,
                        DmpAsthmaCopdRecommendedTrainings_E.YES
                    ]
                },
                "DmpAsthmaTrainingAlreadyDoneBeforeDMP_4_44_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAsthmaTrainingAlreadyDoneBeforeDMP_4_44_E.i18n' ),
                    "hint": "Bitte geben Sie an, ob Ihr Patient (bzw. bei (Klein)Kindern ggf. die Eltern bzw. die Bezugspersonen) bereits vor seiner Teilnahme am DMP Asthma an einer Asthma-Schulung teilgenommen hat. Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Erstdokumentation</strong> möglich und ist hier verpflichtend.<br>Gemeint sind hierbei folgende Schulungsmaßnahmen:<br><ol type=\"a\"><li>akkreditierte und für das DMP zugelassene Schulungen, sowie</li><li>andere Schulungsmaßnahmen, die den Patienten (oder bei (Klein)Kindern die Eltern bzw. Bezugspersonen) durch den Erwerb von Kenntnissen und Fertigkeiten über die Erkrankung und deren Behandlung in die Lage versetzt haben, auf der Basis eigener Entscheidungen das Asthma bestmöglich in das eigene Leben zu integrieren, akute oder langfristige negative Konsequenzen des Asthmas zu vermeiden und die Lebensqualität zu erhalten.</li></ol>Sofern eine Teilnahme stattgefunden hat, geben Sie dies bitte hier mit „Ja“ an. Eine erneute Teilnahme an einer Schulung ist dadurch NICHT ausgeschlossen!<br>Wurde vor der Einschreibung in das DMP keine Schulung wahrgenommen, dokumentieren Sie dies bitte mit der Angabe „Nein“.",
                    "-en": "Asthma-Schulung schon vor Einschreibung in DMP bereits wahrgenommen",
                    "-de": "Asthma-Schulung schon vor Einschreibung in DMP bereits wahrgenommen",
                    "list": yesOrNoList
                },
                "DmpRecommendedCopdTrainings_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedCopdTrainings_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) die Teilnahme an einem Schulungsprogramm empfohlen haben, geben Sie dies bitte hier an.<br>Wurde <ins>keine Schulung</ins> empfohlen, geben Sie dies bitte auch an.",
                    "-en": "COPD Training is recommended (at the current documentation)",
                    "-de": "COPD-Schulung empfohlen (bei aktueller Dokumentation)",
                    "list": [
                        DmpAsthmaCopdRecommendedTrainings_E.NONE,
                        DmpAsthmaCopdRecommendedTrainings_E.YES
                    ]
                },
                "DmpAttendedTrainingBeforeSubscription_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAttendedTrainingBeforeSubscription_E.i18n' ),
                    "hint": "<p>Bitte geben Sie an, ob Ihr Patient bereits vor seiner Teilnahme am DMP COPD an einer COPD-Schulung teilgenommen hat. Eine Angabe zu diesem Feld ist nur im Rahmen einer <strong>Erstdokumentation</strong> möglich und ist hier verpflichtend.</p>Gemeint sind hierbei folgende Schulungsmaßnahmen:<dl class=\"dl-horizontal\"><dt>a)</dt><dd>akkreditierte und für das DMP zugelassene Schulungen, sowie</dd><dt>b)</dt><dd>andere Schulungsmaßnahmen, die den Patienten durch den Erwerb von Kenntnissen und Fertigkeiten über die Erkrankung und deren Behandlung in die Lage versetzt haben, auf der Basis eigener Entscheidungen die COPD bestmöglich in das eigene Leben zu integrieren, akute oder langfristige negative Konsequenzen der COPD zu vermeiden und die Lebensqualität zu erhalten.</dd></dl><p>Sofern eine Teilnahme stattgefunden hat, geben Sie dies bitte hier mit „Ja“ an. Eine erneute Teilnahme an einer Schulung ist dadurch NICHT ausgeschlossen!</p><p>Wurde vor der Einschreibung in das DMP keine Schulung wahrgenommen, dokumentieren Sie dies bitte mit der Angabe „Nein“.</p>",
                    "-en": "Schulung schon vor der Einschreibung in ein DMP bereits wahrgenommen",
                    "-de": "Schulung schon vor der Einschreibung in ein DMP bereits wahrgenommen",
                    "list": [
                        DmpAsthmaCopdRecommendedTrainings_E.NONE,
                        DmpAsthmaCopdRecommendedTrainings_E.YES
                    ]
                },
                "DmpPerceivedTraining_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPerceivedTraining_E.i18n' ),
                    "hint": "Die Angaben zu den Schulungen beziehen sich hier ausschließlich <ins>rückblickend</ins> auf Schulungen, die Sie Ihrem Patienten <ins>beim letzten Dokumentationstermin empfohlen</ins> haben, und sind daher nur im Rahmen einer <b>Folgedokumentation</b> möglich und verpflichtend.<br><br>Sollte Ihr Patient eine empfohlene Schulung <ins>ohne einen für Sie nachvollziehbaren Grund nicht wahrgenommen</ins> haben, kreuzen Sie bitte „nein“ an. <ins>Diese Angabe kann zum Ausschluss des Versicherten aus dem Programm führen!</ins><br><br>Die Ausprägung „war aktuell nicht möglich“ ist anzukreuzen, wenn die Schulung innerhalb des Dokumentationsintervalls (jedes Quartal oder jedes zweite Quartal) wegen nachvollziehbarer Gründe nicht wahrgenommen werden konnte. Solche Gründe können z.B. sein: Fehlende Schulungskapazität, Krankenhausaufenthalt des Patienten, private Gründe. Die Beurteilung, ob die Gründe nachvollziehbar sind, obliegt alleine Ihnen und dem Patienten.<br><br> Sollten Sie bei der letzten Dokumentation <ins>keine Schulung empfohlen</ins> haben, geben Sie dies bitte auch an. Eine Angabe in diesen Feldern führt nicht zum Ausschluss des Patienten aus dem Programm.<br><br>KHK, Astma, COPD:<br>Eine Angabe ist verpflichtend.<br><br>KHK, DM1, DM2:<br>Bitte machen Sie zu jeder Schulung eine Angabe.",
                    "-en": "Perceived recommended training(s)",
                    "-de": "Empfohlene Schulung(en) wahrgenommen",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpPerceivedTraining_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpPerceivedTraining_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "NOT_POSSIBLE",
                            "-de": "War aktuell nicht möglich",
                            i18n: i18n( 'activity-schema.DmpPerceivedTraining_E.NOT_POSSIBLE.i18n' ),
                            "-en": "Not possible"
                        },
                        {
                            "val": "NOTHING_RECOMMENDED",
                            "-de": "Bei letzter Dokumentation keine Schulung empfohlen",
                            i18n: i18n( 'activity-schema.DmpPerceivedTraining_E.NOTHING_RECOMMENDED.i18n' ),
                            "-en": "In recent documentation recommended no training"
                        }
                    ]
                },
                "DmpPatientWantsInfos_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPatientWantsInfos_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "Die Angabe ist optional.<br><br>Sollte Ihr Patient Informationen zum Tabakverzicht, zu einer Ernährungsberatung oder auch zu körperlichem Training von seiner Krankenkasse wünschen, können Sie dies hier vermerken.",
                    "-en": "Patient wants information provided by the health insurance",
                    "-de": "Vom Patienten gewünschte Informationsangebote der Krankenkasse",
                    "list": [
                        {
                            "val": "TOBACCO_WAIVER",
                            "-de": "Tabakverzicht",
                            i18n: i18n( 'activity-schema.DmpPatientWantsInfos_E.TOBACCO_WAIVER.i18n' ),
                            "-en": "Tobacco waiver"
                        },
                        {
                            "val": "DIETARY_ADVICE",
                            "-de": "Ernährungsberatung",
                            i18n: i18n( 'activity-schema.DmpPatientWantsInfos_E.DIETARY_ADVICE.i18n' ),
                            "-en": "Dietary advice"
                        },
                        {
                            "val": "BODY_TRAINING",
                            "-de": "Körperliches Training",
                            i18n: i18n( 'activity-schema.DmpPatientWantsInfos_E.BODY_TRAINING.i18n' ),
                            "-en": "Body training"
                        }
                    ]
                },
                "DmpDocumentationInterval_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpDocumentationInterval_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br><br>Das Dokumentationsintervall ist in Abhängigkeit vom Krankheitsstatus unter Berücksichtigung von Begleit- und Folgeerkrankungen individuell von Ihnen in Absprache mit dem Patienten einmal im Quartal oder jedes zweite Quartal festzulegen.",
                    "-en": "Documentation interval",
                    "-de": "Dokumentationsintervall",
                    "default": "EVERY_SECOND_QUARTER", // The default value is set for BK documentations [MOJ-10709]
                    "list": [
                        {
                            "val": "QUARTERLY",
                            "-de": "Quartalsweise",
                            i18n: i18n( 'activity-schema.DmpDocumentationInterval_E.QUARTERLY.i18n' ),
                            "-en": "Quarterly"
                        },
                        {
                            "val": "EVERY_SECOND_QUARTER",
                            "-de": "Jedes zweite Quartal",
                            i18n: i18n( 'activity-schema.DmpDocumentationInterval_E.EVERY_SECOND_QUARTER.i18n' ),
                            "-en": "Every second quarter"
                        },
                        {
                            "val": "EVERY_FOURTH_QUARTER",
                            "-de": "Jedes vierte Quartal",
                            i18n: i18n( 'activity-schema.DmpDocumentationInterval_E.EVERY_FOURTH_QUARTER.i18n' ),
                            "-en": "Every fourth quarter"
                        }
                    ]
                },
                "DmpHbA1cTargetValue_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHbA1cTargetValue_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Unter Berücksichtigung der Gesamtsituation des Patienten (z.B. bestehende Folge- und Begleiterkrankungen) ist zu dokumentieren, ob der aktuell gemessene HbA1c-Wert im Rahmen der Zielvereinbarungen seit dem letzten Dokumentationstermin erreicht oder noch nicht erreicht wurde.",
                    "-en": "HbA1c target value",
                    "-de": "HbA1c-Zielwert",
                    "list": [
                        {
                            "val": "ACHIEVED",
                            "-de": "Zielwert erreicht",
                            i18n: i18n( 'activity-schema.DmpHbA1cTargetValue_E.ACHIEVED.i18n' ),
                            "-en": "Target value achieved"
                        },
                        {
                            "val": "NOT_ACHIEVED",
                            "-de": "Zielwert noch nicht erreicht",
                            i18n: i18n( 'activity-schema.DmpHbA1cTargetValue_E.NOT_ACHIEVED.i18n' ),
                            "-en": "Target value not achieved"
                        }
                    ]
                },
                "DmpOpthRetinalExam_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpOpthRetinalExam_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Die Angaben zur Netzhautuntersuchung beziehen sich hier ausschließlich <ins>rückblickend</ins> auf den Zeitraum seit der <ins>letzten Dokumentation</ins>, und sind daher nur im Rahmen einer <strong>Folgedokumentation</strong> möglich und verpflichtend.<br>Diese ist mindestens einmal jährlich (Diabetes mellitus Typ 2) oder mindestens alle ein bis zwei Jahre (Diabetes mellitus Typ 1) durchzuführen.<br>Bei Kindern und Jugendlichen mit Diabetes mellitus Typ 1 sollte die jährliche Untersuchung spätestens nach fünf Jahren Diabetesdauer, grundsätzlich jedoch ab dem 11. Lebensjahr erfolgen.<br>Geben Sie bitte an, ob die Untersuchung seit der letzten Dokumentation bereits durchgeführt oder von Ihnen veranlasst wurde.",
                    "-en": "Ophthalmic Retinal Exam since last Documentation",
                    "-de": "Ophthalmologische Netzhautuntersuchung seit letzter Dokumentation",
                    "list": [
                        {
                            "val": "ACCOMPLISHED",
                            "-de": "Durchgeführt",
                            i18n: i18n( 'activity-schema.DmpOpthRetinalExam_E.ACCOMPLISHED.i18n' ),
                            "-en": "Accomplished"
                        },
                        {
                            "val": "NOT_ACCOMPLISHED",
                            "-de": "Nicht durchgeführt",
                            i18n: i18n( 'activity-schema.DmpOpthRetinalExam_E.NOT_ACCOMPLISHED.i18n' ),
                            "-en": "Not accomplished"
                        },
                        {
                            "val": "INITIATED",
                            "-de": "Veranlasst",
                            i18n: i18n( 'activity-schema.DmpOpthRetinalExam_E.INITIATED.i18n' ),
                            "-en": "Initiated"
                        }
                    ]
                },
                "DmpTreatmentAtDiabeticFootInstitution_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpTreatmentAtDiabeticFootInstitution_E.i18n' ),
                    "hint": 'Diese Anforderung trifft für den Parameter „Behandlung/Mitbehandlung in einer für das Diabetische Fußsyndrom qualifizierten Einrichtung“ bei der Indikation Diabetes mellitus Typ 1 und Typ 2 zu. Hierbei soll dem Anwender als nähere Erläuterung der folgende Text zur Anzeige gebracht werden:<br>„Eine Behandlung/Mitbehandlung in einer für das Diabetische Fußsyndrom qualifizierten Einrichtung ist mindestens erforderlich bei:<br>Fuß-Läsionen Wagner/Armstrong A 2-5, B 2-5, C 1-5 und D 1-5 und/oder bei Verdacht auf Charcot-Fuß und/oder bei fehlender Wundheilung. D.h. bei oberflächlicher Wunde mit Ischämie und allen tiefen Ulcera (mit oder ohne Wundinfektion, mit oder ohne Is-chämie) sowie bei Verdacht auf Charcot-Fuß.“',
                    "-en": "Treatment at qualified diabetic foot syndrome institution",
                    "-de": "Behandlung/Mitbehandlung in einer für das Diabetische Fußsyndrom qualifizierten Einrichtung",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpTreatmentAtDiabeticFootInstitution_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpTreatmentAtDiabeticFootInstitution_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "INITIATED",
                            "-de": "Veranlasst",
                            i18n: i18n( 'activity-schema.DmpTreatmentAtDiabeticFootInstitution_E.INITIATED.i18n' ),
                            "-en": "Initiated"
                        }
                    ]
                },
                "DmpDiabetesRelatedHospitalization_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpDiabetesRelatedHospitalization_E.i18n' ),
                    "hint": "Mindestens eine Angabe ist verpflichtend, Mehrfachnennungen sind möglich.<br>Sollten Sie für Ihren Patienten im Zusammenhang mit seiner Diabeteserkrankung eine stationäre Einweisung ausgestellt haben, geben Sie dies bitte hier an.",
                    "-en": "Diabetes-related hospitalization",
                    "-de": "Diabetesbezogene stationäre Einweisung",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpDiabetesRelatedHospitalization_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpDiabetesRelatedHospitalization_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "INITIATED",
                            "-de": "Veranlasst",
                            i18n: i18n( 'activity-schema.DmpDiabetesRelatedHospitalization_E.INITIATED.i18n' ),
                            "-en": "Initiated"
                        }
                    ]
                },
                "DmpSerumElectrolytes_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.KHK_T.dmpSerumElectrolytes_E.i18n' ),
                    "hint": "Bei einer Teilnahme am Modul Herzinsuffizienz ist die Angabe verpflichtend.<br>Liegt bei Ihrem Patienten neben der KHK auch noch eine Herzinsuffizienz vor und nimmt Ihr Patient daher an dem Modul „Herzinsuffizienz“ teil, sollten in halbjährlichen Abständen die Serum-Elektrolyte (Natrium, Kalium) bestimmt werden. Bitte geben Sie hier an, ob die Bestimmung erfolgt ist oder nicht.",
                    "-en": "serum electrolytes",
                    "-de": "Serum-Elektrolyte",
                    "list": [
                        {
                            "val": "DETERMINED",
                            "-de": "Bestimmt",
                            i18n: i18n( 'activity-schema.KHK_T.dmpSerumElectrolytes_E.DETERMINED.i18n' ),
                            "-en": "Determined"
                        },
                        {
                            "val": "NOT DETERMINED",
                            "-de": "Nicht bestimmt",
                            i18n: i18n( 'activity-schema.KHK_T.dmpSerumElectrolytes_E.NOT_DETERMINED.i18n' ),
                            "-en": "Not Determined"
                        }
                    ]
                },
                "DmpAnginaPectoris_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAnginaPectoris_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Bitte geben Sie an, ob Ihr Patient an einer stabilen Angina pectoris leidet oder nicht. Falls eine Angina pectoris vorliegt, geben Sie bitte einen Schweregrad der Belastungstoleranz an. Die Schweregradeinteilung erfolgt dabei nach der Klassifikation der Canadian Cardiovascular Society (CCS). Nachstehende Grafik zeigt die CCS-Einteilung. Diese bezieht sich ausschließlich auf die <strong>stabile</strong> Angina pectoris.<br>Eine Instabile Angina pectoris als Ausprägung des akuten Koronarsyndroms ist im Dokumentationsfeld „Relevante Ereignisse“ zu dokumentieren.<br><img src='/static/dcbaseapp/assets/img/dmpHints/KHK_Stabile_Angina_Prctoris.png' class='img-responsive' alt='KHK Angina Prctoris'>",
                    "-en": "Angina pectoris",
                    "-de": "Angina pectoris",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpAnginaPectoris_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "CCS I",
                            "-de": "CCS I",
                            i18n: i18n( 'activity-schema.DmpAnginaPectoris_E.CCSI.i18n' ),
                            "-en": "CCS I"
                        },
                        {
                            "val": "CCS II",
                            "-de": "CCS II",
                            i18n: i18n( 'activity-schema.DmpAnginaPectoris_E.CCSII.i18n' ),
                            "-en": "CCS II"
                        },
                        {
                            "val": "CCS III",
                            "-de": "CCS III",
                            i18n: i18n( 'activity-schema.DmpAnginaPectoris_E.CCSIII.i18n' ),
                            "-en": "CCS III"
                        },
                        {
                            "val": "CCS IV",
                            "-de": "CCS IV",
                            i18n: i18n( 'activity-schema.DmpAnginaPectoris_E.CCSIV.i18n' ),
                            "-en": "CCS IV"
                        }
                    ]
                },
                "DmpLdlCholesterolUnit_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLdlCholesterolUnit_E.i18n' ),
                    "-en": "",
                    "-de": "",
                    "list": [
                        {
                            "val": "",
                            "-de": "NONE",
                            i18n: "NONE",
                            "-en": "NONE"
                        },
                        {
                            "val": "MGDL",
                            "-de": "mg/dl",
                            i18n: i18n( 'activity-schema.DmpLdlCholesterolUnit_E.MGDL.i18n' ),
                            "-en": "mg/dl"
                        },
                        {
                            "val": "MMOLL",
                            "-de": "mmol/l",
                            i18n: i18n( 'activity-schema.DmpLdlCholesterolUnit_E.MMOLL.i18n' ),
                            "-en": "mmol/l"
                        }
                    ]
                },
                "DmpFrequencyOfAsthmaSymptoms_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Bitte geben Sie hier die Häufigkeit der Asthma-Symptome an. Die Angabe bezieht sich dabei auf die Einschätzung des Patienten zum Dokumentationszeitpunkt.<br><br><ul><li><ins><strong>„Häufiger als 2 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung an mehr als zwei verschiedenen Tagen in der Woche Symptome angibt, die eindeutig dem Asthma bronchiale zuzuordnen sind.</ins></li><li><ins><strong>„bis zu 2mal wöchentlich“</strong> geben Sie an, wenn Ihr Patient gemäß seiner Einschätzung an bis zu zwei Tagen in der Woche Symptome angibt, die eindeutig dem Asthma bronchiale zuzuordnen sind.</ins></li><li><ins><strong>“Keine“</strong></ins>ist anzukreuzen, wenn Ihr Patient gemäß seiner Einschätzung keine Asthma-typischen Symptome aufweist.</li></ul>",
                    "-en": "Frequency of asthma symptoms",
                    "-de": "Häufigkeit von Asthma-Symptomen",
                    "list": [
                        {
                            "val": "MORE_THAN_2_TIMES_WEEK",
                            "-de": "Häufiger als 2mal wöchentlich",
                            i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_E.MORE_THAN_2_TIMES_WEEK.i18n' ),
                            "-en": "More often than 2 times a week"
                        },
                        {
                            "val": "UP_2_TIMES_WEEK",
                            "-de": "bis zu 2mal wöchentlich",
                            i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_E.UP_2_TIMES_WEEK.i18n' ),
                            "-en": "up to 2 times per week"
                        },
                        {
                            "val": "NONE",
                            "-de": "Keine",
                            i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_E.NONE.i18n' ),
                            "-en": "None"
                        }
                    ]
                },
                "DmpFrequencyOfAsthmaSymptoms_4_44_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFrequencyOfAsthmaSymptoms_4_44_E.i18n' ),
                    "hint": "Genau eine Angabe ist erforderlich.<br>Bitte geben Sie hier die Häufigkeit der tagsüber aufgetretenen Asthma-Symptome an. Die Angabe bezieht sich dabei auf die Einschätzung des Patienten<sup>1</sup> zum <u>Dokumentationszeitpunkt rückblickend für die letzten 4 Wochen</u> und dient u. a. der Beurteilung der Asthmakontrolle.<br><ul><li><strong>„Häufiger als 2 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung jede Woche an mehr als zwei Tagen auftretende Symptome angibt, die eindeutig dem Asthma bronchiale zuzuordnen sind.</li><li><strong>„2 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung jede Woche an zwei Tagen auftretende Symptome angibt, die eindeutig dem Asthma bronchiale <u>zuzuordnen sind</u>.</li><li><strong>„1 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung jede Woche an einem Tag auftretende Symptome angibt, die eindeutig dem Asthma bronchiale <u>zuzuordnen sind</u>.</li><li><strong>„< 1 mal wöchentlich“</strong> ist anzugeben, wenn ihr Patienten gemäß seiner Einschätzung in 3 unterschiedlichen Wochen an maximal einem Tag pro Woche tagsüber auftretende Symptome angibt, die eindeutig dem Asthma bronchiale zuzuordnen sind</li><li><strong>„Keine“</strong> ist anzukreuzen, wenn Ihr Patient gemäß seiner Einschätzung keine Asthma-typischen Symptome hatte</li></ul><hr><small><sup>1</sup> Zur besseren Lesbarkeit wird im Dokument die allgemeine Formulierung Patient verwendet. Damit sind sowohl weibliche als auch männliche Patienten umfasst.</small>",
                    "-en": "In the last 4 month: Frequency of asthma symptoms during day time",
                    "-de": "In den letzten 4 Wochen: Häufigkeit von Asthma-Symptomen tagsüber",
                    "list": asthmaFrequencyList
                },
                "DmpFrequencyOfUseOfNeedMedication_4_44_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFrequencyOfUseOfNeedMedication_4_44_E.i18n' ),
                    "hint": "Genau eine Angabe ist erforderlich.<br>Bitte geben Sie hier die Häufigkeit des Einsatzes der Bedarfsmedikation an. Die Angabe bezieht sich dabei auf die Einschätzung des Patienten zum Dokumentationszeitpunkt <u>rückblickend für die letzten 4 Wochen</u> und dient u. a. der Beurteilung der Asthmakontrolle.<br><ul><li><strong>„Häufiger als 2 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung jede Woche an mehr als zwei Tagen angibt, seine Asthma-spezifische Bedarfsmedikation verwendet zu haben.</li><li><strong>„2 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung jede Woche an zwei Tagen angibt, seine Asthma-spezifische Bedarfsmedikation verwendet zu haben.</li><li><strong>„1 mal wöchentlich“</strong> geben Sie bitte an, wenn Ihr Patient gemäß seiner Einschätzung jede Woche an einem Tag angibt, seine Asthma-spezifische Bedarfsmedikation verwendet zu haben.</li><li><strong>„< 1 mal wöchentlich“</strong> ist anzugeben, wenn Ihr Patient gemäß seiner Einschätzung in 3 unterschiedlichen Wochen an maximal einem Tag pro Woche angibt, seine Asthma-spezifische Bedarfsmedikation verwendet zu haben.</li><li><strong>„Keine“</strong> ist anzukreuzen, wenn Ihr Patient gemäß seiner Einschätzung keine Asthma-spezifische Bedarfsmedikation verwendet.</li></ul>",
                    "-en": "In den letzten 4 Wochen: Häufigkeit des Einsatzes der Bedarfsmedikation",
                    "-de": "In den letzten 4 Wochen: Häufigkeit des Einsatzes der Bedarfsmedikation",
                    "list": asthmaFrequencyList
                },
                "DmpLimitationOfEverydayActivitiesDueToBronchialAsthma_4_44_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLimitationOfEverydayActivitiesDueToBronchialAsthma_4_44_E.i18n' ),
                    "hint": "Genau eine Angabe ist erforderlich.<br>Geben Sie bitte hier an, ob es bei Ihrem Patienten zu Einschränkungen von Aktivitäten im Alltag gekommen ist, die durch sein Asthma bronchiale bedingt waren. Die Angabe bezieht sich dabei auf die Einschätzung des Patienten zum Dokumentationszeitpunkt rückblickend für die letzten 4 Wochen und dient u. a. der Beurteilung der Asthmakontrolle.",
                    "-en": "In den letzten 4 Wochen: Einschränkung von Aktivitäten im Alltag wegen Asthma bronchiale",
                    "-de": "In den letzten 4 Wochen: Einschränkung von Aktivitäten im Alltag wegen Asthma bronchiale",
                    "list": yesOrNoList
                },
                "DmpAsthmaRelatedNightSleepDisorder_4_44_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAsthmaRelatedNightSleepDisorder_4_44_E.i18n' ),
                    "hint": "Genau eine Angabe ist erforderlich.<br>Geben Sie bitte hier an, ob es bei Ihrem Patienten zu asthmabedingten Störungen des Nachtschlafes gekommen ist. Die Angabe bezieht sich dabei auf die Einschätzung des Patienten zum Dokumentationszeitpunkt rückblickend für die letzten 4 Wochen und dient u. a. der Einschätzung der Asthmakontrolle.",
                    "-en": "In den letzten 4 Wochen: Asthmabedingte Störung des Nachtschlafes",
                    "-de": "In den letzten 4 Wochen: Asthmabedingte Störung des Nachtschlafes",
                    "list": yesOrNoList
                },
                "DmpKhkRelevantEvents_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpKhkRelevantEvents_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind dabei möglich.<br>Bitte geben Sie an, ob bei Ihrem Patienten in der Vergangenheit eines der aufgeführten Ereignisse eingetreten ist.<br><br>Handelt es sich um eine <strong>Erstdokumentation</strong>, sind hier Ereignisse aus der Vergangenheit einzubeziehen.<br>Erfolgt die Angabe im Rahmen einer <strong>Folgedokumentation</strong>, sind jeweils nur Ereignisse seit der letzten Dokumentation zu berücksichtigen.<br>Sollte in der Vergangenheit bzw. seit der letzten Dokumentation keines der aufgeführten Ereignisse stattgefunden haben, geben Sie bitte zur Vollständigkeit „nein“ an.",
                    "-en": "Relevant events",
                    "-de": "Relevante Ereignisse",
                    "list": [
                        {
                            "val": "HEART_ATTACK",
                            "-de": "Herzinfarkt",
                            i18n: i18n( 'activity-schema.DmpKhkRelevantEvents_E.HEART_ATTACK.i18n' ),
                            "-en": "Heart attack"
                        },
                        {
                            "val": "UNSTABLE_ANGINA_PECTORIS",
                            "-de": "instabile Angina pectoris",
                            i18n: i18n( 'activity-schema.DmpKhkRelevantEvents_E.UNSTABLE_ANGINA_PECTORIS.i18n' ),
                            "-en": "unstable angina pectoris"
                        },
                        {
                            "val": "STROKE",
                            "-de": "Schlaganfall",
                            i18n: i18n( 'activity-schema.DmpKhkRelevantEvents_E.STROKE.i18n' ),
                            "-en": "stroke"
                        },
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpKhkRelevantEvents_E.NO.i18n' ),
                            "-en": "No"
                        }
                    ]
                },
                "DmpDiagnosticCoronaryTherapeuticIntervention_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpDiagnosticCoronaryTherapeuticIntervention_E.i18n' ),
                    "hint": "Mindestens eine Angabe ist verpflichtend. Mehrfachnennungen sind hier möglich.<br>Geben Sie bitte hier an, ob bei Ihrem Patienten in der Vergangenheit eine diagnostische oder therapeutische Intervention erfolgt ist.<br>Handelt es sich bei der zu erstellenden Dokumentation um eine <strong>Erstdokumentation</strong>, sind hier Interventionen aus der Vergangenheit einzubeziehen.<br>Erfolgt die Angabe im Rahmen einer <strong>Folgedokumentation</strong>, sind jeweils nur die seit der letzten Dokumentation durchgeführten Interventionen zu berücksichtigen.<br><br>Sollte in der Vergangenheit bzw. seit der letzten Dokumentation keine der aufgeführten Interventionen erfolgt sein, geben Sie bitte „keine“ an.",
                    "-en": "Diagnostic and/or coronary therapeutic intervention",
                    "-de": "Diagnostische und/oder koronartherapeutische Intervention",
                    "list": [
                        {
                            "val": "CORONARY_ANGIOGRAPHY",
                            "-de": "Koronarangiographie",
                            i18n: i18n( 'activity-schema.DmpDiagnosticCoronaryTherapeuticIntervention_E.CORONARY_ANGIOGRAPHY.i18n' ),
                            "-en": "coronary angiography"
                        },
                        {
                            "val": "PCI",
                            "-de": "PCI",
                            i18n: i18n( 'activity-schema.DmpDiagnosticCoronaryTherapeuticIntervention_E.PCI.i18n' ),
                            "-en": "PCI"
                        },
                        {
                            "val": "BYPASS_SURGERY",
                            "-de": "Bypass Operation",
                            i18n: i18n( 'activity-schema.DmpDiagnosticCoronaryTherapeuticIntervention_E.BYPASS_SURGERY.i18n' ),
                            "-en": "bypass surgery"
                        },
                        {
                            "val": "NONE",
                            "-de": "Keine",
                            i18n: i18n( 'activity-schema.DmpDiagnosticCoronaryTherapeuticIntervention_E.NONE.i18n' ),
                            "-en": "None"
                        }
                    ]
                },
                "DmpInsulin_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpInsulin_E.i18n' ),
                    "hint": "Diese Angabe ist nur im Rahmen einer Dokumentation zu <strong>Diabetes mellitus Typ 2</strong> möglich und hier verpflichtend. (Bei einem Diabetes mellitus Typ 1 ist eine Insulin-Therapie Voraussetzung für eine Einschreibung und wird daher hier nicht noch einmal erfasst.)<br><br>Bitte geben Sie an, ob eine Therapie mit Humaninsulin oder Insulin-Analoga durchgeführt wird.",
                    "-en": "Insulin or insulin analogues",
                    "-de": "Insulin oder Insulin-Analoga",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpInsulin_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpInsulin_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpSmoker_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSmoker_E.i18n' ),
                    "-en": "Smoker",
                    "-de": "Raucher",
                    "hint": "Bei Kindern bis zum vollendeten 12. Lebensjahr ist die Angabe optional. Bei allen anderen Patienten ist die Angabe verpflichtend. Geben Sie hier bitte an, ob Ihr Patient Raucher ist. Neben dem Zigarettenraucher sind hier auch Pfeifen- und Zigarrenraucher zu erfassen. Machen Sie bitte genau eine Angabe.",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpSmoker_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpSmoker_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpOtherOralAntiDiabetic_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpOtherOralAntiDiabetic_E.i18n' ),
                    "hint": "Diese Angabe ist nur im Rahmen einer Dokumentation zu <strong>Diabetes mellitus Typ 2</strong> möglich undhier verpflichtend.<br><br>Glibenclamid und Metformin gehören als Monotherapie zu den vorrangig zu verordnenden oralen Antidiabetika. Sollte Ihr Patient andere bzw. weitere orale Antidiabetika erhalten, ist dies hier zu dokumentieren. Hierzu zählen z.B. Präparate aus der Gruppe der Alphaglucosidase-Hemmer, der Glitazone oder Glinide sowie Acarbose und Glimepirid.<br>Wenn Ihr Patient keine sonstigen oralen Antidiabetika erhält, geben Sie bitte „nein“ an.",
                    "-en": "Other antidiabetic medication",
                    "-de": "Sonstige antidiabetische Medikation",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpOtherOralAntiDiabetic_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpOtherOralAntiDiabetic_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpCheckedInhalationTechnique_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCheckedInhalationTechnique_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Sie sollten die Inhalationstechnik Ihres Patienten mindestens einmal im Dokumentationszeitraum überprüfen.<br>Geben Sie hier bitte an, ob Sie dies bei der heutigen Konsultation getan haben.",
                    "-en": "checked inhalation technique",
                    "-de": "Inhalationstechnik überprüft",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpCheckedInhalationTechnique_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpCheckedInhalationTechnique_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpKhkOtherMedication_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpKhkOtherMedication_E.i18n' ),
                    "hint": "Eine Angabe „ja“ oder „nein“ ist verpflichtend.<br>Sollte Ihr Patient andere oder weitere Medikamente zur Behandlung der KHK, einer Herzinsuffizienz oder einer arteriellen Hypertonie erhalten, geben Sie dies bitte hier an. Hierzu zählen z.B. AT-1-Antagonisten, Nitrate (einschließlich Nitro-Sprays) oder Diuretika.",
                    "-en": "Other medication",
                    "-de": "Sonstige Medikation",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpKhkOtherMedication_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpKhkOtherMedication_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpInhaledGlucocorticosteroids_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit inhalativen Glukokortikosteroiden durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines inhalativen Glukokortikosteroids besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    i18n: i18n( 'activity-schema.DmpInhaledGlucocorticosteroids_E.i18n' ),
                    "-en": "Inhaled glucocorticosteroids",
                    "-de": "Inhalative Glukokortikosteroide",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpInhaledLongActingBeta2AdrenergicAgonist_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpInhaledLongActingBeta2AdrenergicAgonist_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit inhalativen langwirksamen Beta- 2-Sympathomimetika durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines inhalativen lang wirksamen Beta-2- Sympathomimetikums besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Inhaled long-acting beta2-adrenergic agonist",
                    "-de": "Inhalative lang wirksame Beta-2-Sympathomimetika",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpInhaledRapidActingBeta2AdrenergicAgonist_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpInhaledRapidActingBeta2AdrenergicAgonist_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit kurzwirksamen inhalativen Beta- 2-Sympathomimetika durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines kurzwirksamen inhalativen Beta-2- Sympathomimetikums besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Rapid-acting inhaled beta2-adrenergic agonist",
                    "-de": "Kurz wirksame inhalative Beta-2-Sympathomimetika",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpSystemicGlucocorticosteroids_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSystemicGlucocorticosteroids_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit systemischen Glukokortikosteroiden durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines systemischen Glukokortikosteroids besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Systemic glucocorticosteroids",
                    "-de": "Systemische Glukokortikosteroide",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpOtherAsthmaSpecificMedication_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpOtherAsthmaSpecificMedication_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Sollte Ihr Patient <ins>Leukotrien-Rezeptor-Antagonisten</ins> oder andere bzw. weitere Medikamente zur Behandlung des Asthma bronchiale erhalten, geben Sie dies bitte hier an.<br>Die Ausprägung „andere“ umfasst z.B. Theophyllin, Anticholinergika oder auch Anti-IgE Antikörper",
                    "-en": "Other asthma specific medication",
                    "-de": "Sonstige asthma spezifische Medikation",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpOtherAsthmaSpecificMedication_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "LEUKOTRIENE_RECEPTOR_ANTAGONISTS",
                            "-de": "Leukotrien-Rezeptor-Antagonisten",
                            i18n: i18n( 'activity-schema.DmpOtherAsthmaSpecificMedication_E.LEUKOTRIENE_RECEPTOR_ANTAGONISTS.i18n' ),
                            "-en": "Leukotriene receptor antagonists"
                        },
                        {
                            "val": "OTHER",
                            "-de": "Andere",
                            i18n: i18n( 'activity-schema.DmpOtherAsthmaSpecificMedication_E.OTHER.i18n' ),
                            "-en": "Other"
                        }
                    ]
                },
                "DmpClinicalAssessmentOfOsteoporosisRisk_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpClinicalAssessmentOfOsteoporosisRisk_E.i18n' ),
                    "hint": "Genau eine Angabe ist erforderlich.<br>Die individuelle Risikokonstellation bezüglich des Auftretens einer Osteoporose soll einmal jährlich bei allen Patienten klinisch abgeschätzt werden. Risikofaktoren für das Auftreten einer Osteoporose bei Patienten mit COPD sind neben Alter, Geschlecht, Untergewicht, Immobilität auch die systemische Entzündung bei schwerer COPD (FEV1 unter 50% des Sollwertes) und die medikamentöse Therapie (z. B. systemische Glukokortikosteroide, auch in geringen Tagesdosen).",
                    "-en": "Klinische Einschätzung des Osteoporoserisikos durchgeführt",
                    "-de": "Klinische Einschätzung des Osteoporoserisikos durchgeführt",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpShortActingBeta2AdrenergicAgonistAnticholinergics_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpShortActingBeta2AdrenergicAgonistAnticholinergics_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit kurzwirksamen Beta-2- Sympathomimetika und/oder Anticholinergika durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines Anticholinergikums besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Short-acting beta2-adrenergic agonist and / or anticholinergics",
                    "-de": "Kurz wirksame Beta-2-Sympathomimetika und/oder Anticholinergika",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpLongActingBeta2AdrenergicAgonist_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLongActingBeta2AdrenergicAgonist_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit langwirksamen Beta-2- Sympathomimetika durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines lang wirksamen Beta-2-Sympathomimetikums besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Long-acting beta2-adrenergic agonist",
                    "-de": "Lang wirksame Beta-2-Sympathomimetika",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpLongActingAnticholinergics_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLongActingAnticholinergics_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Geben Sie bitte an, ob eine Bedarfs- und/oder Dauertherapie mit langwirksamen Anticholinergika durchgeführt wird. Bitte geben Sie bei „keine“ gegebenenfalls zusätzlich an, ob eine Kontraindikation gegen die Gabe eines langwirksamen Anticholinergikums besteht. Diese Angabe ist für die Qualitätssicherung notwendig.",
                    "-en": "Long-acting anticholinergics",
                    "-de": "Lang wirksame Anticholinergika",
                    "list": [
                        lungSpecificMedicationValue.IF_NECESSARY,
                        lungSpecificMedicationValue.CHRONIC_MEDICATION,
                        lungSpecificMedicationValue.NONE,
                        lungSpecificMedicationValue.CONTRAINDICATION
                    ]
                },
                "DmpOtherDiseaseSpecificMedication_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpOtherDiseaseSpecificMedication_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Sollte Ihr Patient <ins>Theopyllin, inhalative oder systemische Glukokortikosteroide</ins> oder andere bzw. weitere Medikamente zur Behandlung der COPD erhalten, geben Sie dies bitte hier an.<br>Unter der Ausprägung „andere“ umfasst z.B. mukoaktive Substanzen wie Acetylcystein, Ambroxol oder Carbocystein.",
                    "-en": "Other disease-specific medication",
                    "-de": "Sonstige diagnosespezifische Medikation",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpOtherDiseaseSpecificMedication_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "THEOPHYLLINE",
                            "-de": "Theophyllin",
                            i18n: i18n( 'activity-schema.DmpOtherDiseaseSpecificMedication_E.THEOPHYLLINE.i18n' ),
                            "-en": "Theophylline"
                        },
                        {
                            "val": "INHALED_GLUCOCORTICOSTEROIDS",
                            "-de": "Inhalative Glukokortikosteroide",
                            i18n: i18n( 'activity-schema.DmpOtherDiseaseSpecificMedication_E.INHALED_GLUCOCORTICOSTEROIDS.i18n' ),
                            "-en": "Inhaled glucocorticosteroids"
                        },
                        {
                            "val": "SYSTEMIC_GLUCOCORTICOSTEROIDS",
                            "-de": "Systemische Glukokortikosteroide",
                            i18n: i18n( 'activity-schema.DmpOtherDiseaseSpecificMedication_E.SYSTEMIC_GLUCOCORTICOSTEROIDS.i18n' ),
                            "-en": "Systemic glucocorticosteroids"
                        },
                        {
                            "val": "OTHER",
                            "-de": "Andere",
                            i18n: i18n( 'activity-schema.DmpOtherDiseaseSpecificMedication_E.OTHER.i18n' ),
                            "-en": "Other"
                        }
                    ]
                },
                "DmpKhkRelatedTransferArranged_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpKhkRelatedTransferArranged_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Bitte geben Sie hier „ja“ an, falls Sie Ihren Patienten auf Grund seiner KHK an einen mitbehandelnden Arzt überwiesen haben.<br>Sollte dies nicht der Fall sein, kreuzen Sie bitte „nein“ an.",
                    "-en": "KHK-related transfer arranged",
                    "-de": "KHK-bezogene Überweisung veranlasst",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpKhkRelatedTransferArranged_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpKhkRelatedTransferArranged_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpKhkRelatedConfinementArranged_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpKhkRelatedConfinementArranged_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Bitte geben Sie hier „ja“ an, falls Sie Ihren Patienten auf Grund seiner KHK in eine stationäre Einrichtung eingewiesen haben.<br>Sollte dies nicht der Fall sein, kreuzen Sie bitte „nein“ an.",
                    "-en": "KHK-related confinement arranged",
                    "-de": "KHK-bezogene Einweisung veranlasst",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpKhkRelatedConfinementArranged_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpKhkRelatedConfinementArranged_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpRegularWeightControlRecommended_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRegularWeightControlRecommended_E.i18n' ),
                    "hint": "Nur bei der Teilnahme am Modul Herzinsuffizienz ist hier eine Angabe verpflichtend.<br>Liegt bei Ihrem Patienten neben der KHK auch noch eine Herzinsuffizienz vor und nimmt Ihr Patient daher an dem Modul „Herzinsuffizienz“ teil, kann eine regelmäßige Gewichtskontrolle sinnvoll sein. Bitte geben Sie hier entweder an, ob Sie eine solche Gewichtskontrolle empfohlen haben oder nicht oder ob Sie diese für nicht erforderlich halten.",
                    "-en": "Regular weight control recommended?",
                    "-de": "Regelmäßige Gewichtskontrolle empfohlen?",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpRegularWeightControlRecommended_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpRegularWeightControlRecommended_E.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "NOT_MANDATORY",
                            "-de": "Nicht erforderlich",
                            i18n: i18n( 'activity-schema.DmpRegularWeightControlRecommended_E.NOT_MANDATORY.i18n' ),
                            "-en": "Not mandatory"
                        }
                    ]
                },
                "DmpWrittenSelfManagementPlan_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpWrittenSelfManagementPlan_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Für die weitere Behandlung sollen Sie gemeinsam mit Ihrem Patienten einen Behandlungsplan erstellen und Therapieziele vereinbaren.<br>Hierzu zählt insbesondere das Monitoring der Asthmaerkrankung durch die Patienten z.B. durch Peak-Flow-Kontrolle und Erstellung eines darauf abgestimmten Medikationsplans zum Selbstmanagement insbesondere für Notfälle.<br>Geben Sie bitte an, ob Sie für Ihren Patienten einen solchen Plan erstellt haben oder nicht.",
                    "-en": "Written self-management plan",
                    "-de": "Schriftlicher Selbstmanagementplan",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpWrittenSelfManagementPlan_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpWrittenSelfManagementPlan_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpTherapyAdjustment_4_44_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpTherapyAdjustment_4_44_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Bitte geben Sie hier, ob Sie eine Anpassung der asthmaspezifischen Therapie vorgenommen haben.<br>Es soll regelmäßig, insbesondere vor einer Steigerung der medikamentösen Therapie, die richtige Anwendung überprüft werden. Geben Sie bitte „Verbesserung der Anwendung der Medikation“ an, wenn der Patient in einer verbesserten Anwendung unterwiesen wurde. Diese Angabe kann gemeinsam mit „Steigerung der Medikation“ sowie mit „Reduktion der Medikation“ erfolgen.<br>Geben Sie bitte „Steigerung der Medikation“ an, wenn Sie die Dosis oder die Anzahl der verordneten Medikamente erhöht haben.<br>Geben Sie bitte „Reduktion der Medikation“ an, wenn Sie die Dosis oder die Anzahl der verordneten Medikamente reduziert haben. Geben Sie bitte „Keine“ an, wenn keine Therapieanpassung erfolgt ist.<br>",
                    "-en": "Therapieanpassung",
                    "-de": "Therapieanpassung",
                    "list": [
                        {
                            "val": "NONE",
                            "-de": "Keine",
                            i18n: i18n( 'activity-schema.DmpTherapyAdjustment_4_44_E.NONE.i18n' ),
                            "-en": "Keine"
                        },
                        {
                            "val": "INCREASE_IN_MEDICATION",
                            "-de": "Steigerung der Medikation",
                            i18n: i18n( 'activity-schema.DmpTherapyAdjustment_4_44_E.INCREASE_IN_MEDICATION.i18n' ),
                            "-en": "Steigerung der Medikation"
                        },
                        {
                            "val": "IMPROVEMENT_DUE_MEDICATION",
                            "-de": "Verbesserung der Anwendung der Medikation",
                            i18n: i18n( 'activity-schema.DmpTherapyAdjustment_4_44_E.IMPROVEMENT_DUE_MEDICATION.i18n' ),
                            "-en": "Verbesserung der Anwendung der Medikation"
                        },
                        {
                            "val": "REDUCTION_OF_MEDICATION",
                            "-de": "Reduktion der Medikation",
                            i18n: i18n( 'activity-schema.DmpTherapyAdjustment_4_44_E.REDUCTION_OF_MEDICATION.i18n' ),
                            "-en": "Reduktion der Medikation"
                        }
                    ]
                },
                // < Q219 / 4.44
                "DmpAsthmaRelatedTransferOrConfinementArranged_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAsthmaRelatedTransferOrConfinementArranged_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Bitte geben Sie hier „ja“ an, falls Sie Ihren Patienten auf Grund seines Asthma bronchiale zu einem anderen Arzt oder in eine stationäre Einrichtung überwiesen oder eingewiesen haben. Sollte dies nicht der Fall sein, kreuzen Sie bitte „nein“ an.",
                    "-en": "Asthma-related transfer/confinement arranged",
                    "-de": "Asthmabezogene Über- bzw. Einweisung veranlasst",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpAsthmaRelatedTransferOrConfinementArranged_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpAsthmaRelatedTransferOrConfinementArranged_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpCopdRelatedTransferOrConfinementArranged_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCopdRelatedTransferOrConfinementArranged_E.i18n' ),
                    "hint": "Eine Angabe ist erforderlich.<br>Bitte geben Sie hier „ja“ an, falls Sie Ihren Patienten auf Grund seiner COPD zu einem anderen Arzt oder in eine stationäre Einrichtung überwiesen oder eingewiesen haben.<br>Sollte dies nicht der Fall sein, kreuzen Sie bitte „nein“ an.",
                    "-en": "COPD-related transfer/confinement arranged",
                    "-de": "COPD-bezogene Über- bzw. Einweisung veranlasst",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DmpCopdRelatedTransferOrConfinementArranged_E.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DmpCopdRelatedTransferOrConfinementArranged_E.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpRecommendedTobaccoAbstinence_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedTobaccoAbstinence_E.i18n' ),
                    "hint": "<p>Genau eine Angabe ist bei allen aktiven Rauchern erforderlich.</p><p>Der Raucherstatus sollte bei jedem Patienten bei jeder Konsultation erfragt werden. In einer klaren und persönlichen Form soll der Patient dazu motiviert werden, mit dem Rauchen aufzuhören. Dabei sollen gleichzeitig wirksame Hilfen zur Tabakentwöhnung aufgezeigt werden. Ausstiegsbereiten Rauchern soll die Teilnahme an einem Tabakentwöhnungsprogramm empfohlen werden.</p><p>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) einen Tabakverzicht empfohlen haben, geben Sie dies bitte hier mit „Ja“ an.</p><p>Wurde keine Empfehlung ausgesprochen, geben Sie dies bitte mit „Nein“ an.</p>",
                    "-en": "Empfehlung zum Tabakverzicht ausgesprochen",
                    "-de": "Empfehlung zum Tabakverzicht ausgesprochen",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpRecommendedTobaccoRehabProgram_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedTobaccoRehabProgram_E.i18n' ),
                    "hint": "<p>Genau eine Angabe ist bei allen aktiven Rauchern erforderlich.</p><p>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) die Teilnahme an einem Tabakentwöhnungsprogramm empfohlen haben, geben Sie dies bitte hier mit „Ja“ an.</p><p>Wurde <u>keine Empfehlung</u> ausgesprochen, geben Sie dies bitte mit „Nein“ an.</p><p>Sofern Sie nicht selber ein zertifiziertes Tabakentwöhnungsprogramm anbieten, finden Sie geeignete Tabakentwöhnungsprogramme z. B. im Internet unter www.zentrale-pruefstelle-praevention.de oder auch direkt über die Internetseiten der Krankenkassen.</p>",
                    "-en": "Empfehlung zur Teilnahme an Tabakentwöhnungsprogramm ausgesprochen",
                    "-de": "Empfehlung zur Teilnahme an Tabakentwöhnungsprogramm ausgesprochen",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                "DmpAttendedTobaccoRehabProgramSinceLastRecommendation_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAttendedTobaccoRehabProgramSinceLastRecommendation_E.i18n' ),
                    "hint": "<p>Genau eine Angabe ist bei allen aktiven Rauchern erforderlich und nur im Rahmen einer Folgedokumentation möglich und hier verpflichtend.</p><p>Bitte geben Sie hier an, ob Ihr Patient an einem Tabakentwöhnungsprogramm teilgenommen hat und machen Sie in diesem Fall die Angabe „Ja“. Wenn Ihr Patient Ihrer Empfehlung nicht gefolgt ist, machen Sie die Angabe „Nein“. Sollte eine Teilnahme an einem Tabakentwöhnungsprogramm bisher nicht möglich gewesen sein, machen Sie bitte die Angabe „War aktuell nicht möglich“.</p><p><u>Eine Angabe in diesen Feldern führt <strong>nicht</strong> zum Ausschluss des Patienten aus dem Programm.</u></p>",
                    "-en": "An einem Tabakentwöhnungsprogramm seit der letzten Empfehlung teilgenommen",
                    "-de": "An einem Tabakentwöhnungsprogramm seit der letzten Empfehlung teilgenommen",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.YES.i18n' ),
                            "-en": "Yes"
                        },
                        {
                            "val": "NOT_POSSIBLE",
                            "-de": "War aktuell nicht möglich",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.NOT_POSSIBLE.i18n' ),
                            "-en": "Not possible"
                        }
                    ]
                },
                "DmpRecommendedPhysicalTraining_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRecommendedPhysicalTraining_E.i18n' ),
                    "hint": "<p>Genau eine Angabe ist erforderlich.</p><p>Körperliches Training führt in der Regel zu einer Verringerung der COPD-Symptomatik und der Exazerbationsrate, zur Besserung der Belastbarkeit und kann zur Verbesserung der Lebensqualität oder Verringerung der Morbidität beitragen.</p><p>Daher soll die behandelnde Ärztin oder der behandelnde Arzt regelmäßig auf die Bedeutung von körperlichen Aktivitäten hinweisen und zur Teilnahme an geeigneten Trainingsmaßnahmen motivieren (z. B. im Rahmen ambulanter Rehabilitations- und Funktionssportgruppen, wie z. B. „Lungensportgruppen“). Ein regelmäßiges, mindestens einmal wöchentliches Training soll empfohlen werden.</p><p>Wenn Sie Ihrem Patienten aktuell (am Tage der Konsultation) eine Empfehlung zum körperlichen Training ausgesprochen haben, geben Sie dies bitte hier mit „Ja“ an.</p><p>Wurde <u>keine Empfehlung</u> ausgesprochen, geben Sie dies bitte hier mit „Nein“ an.</p>",
                    "-en": "Empfehlung zum körperlichen Training ausgesprochen",
                    "-de": "Empfehlung zum körperlichen Training ausgesprochen",
                    "list": [
                        {
                            "val": "NO",
                            "-de": "Nein",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.NO.i18n' ),
                            "-en": "No"
                        },
                        {
                            "val": "YES",
                            "-de": "Ja",
                            i18n: i18n( 'activity-schema.DMP_BASE_T.YES.i18n' ),
                            "-en": "Yes"
                        }
                    ]
                },
                // BK
                "DmpRegistrationFor_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRegistrationFor_E.i18n' ),
                    "hint": "Tragen Sie hier bitte die Diagnose ein, die Sie zur Einschreibung der Patientin in das strukturierte Behandlungsprogramm veranlasst hat.",
                    "list": [
                        {
                            "val": "PRIMARY_TUMOR",
                            i18n: i18n( 'activity-schema.DmpRegistrationFor_E.PRIMARY_TUMOR.i18n' ),
                            "-de": "Primärtumors"
                        },
                        {
                            "val": "CONTRALATERAL_BREAST_CANCER",
                            i18n: i18n( 'activity-schema.DmpRegistrationFor_E.CONTRALATERAL_BREAST_CANCER.i18n' ),
                            "-de": "Kontralateralen Brustkrebses"
                        },
                        {
                            "val": "LOCOREGIONAL_RECURRENCE",
                            i18n: i18n( 'activity-schema.DmpRegistrationFor_E.LOCOREGIONAL_RECURRENCE.i18n' ),
                            "-de": "Lokoregionären Rezidivs"
                        },
                        {
                            "val": "REMOTE_METASTASES",
                            i18n: i18n( 'activity-schema.DmpRegistrationFor_E.REMOTE_METASTASES.i18n' ),
                            "-de": "Fernmetastasen"
                        }
                    ]
                },
                "DmpAffectedBreast_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAffectedBreast_E.i18n' ),
                    "hint": "Mindestens eine Angabe ist notwendig; Mehrfachnennungen sind möglich. <br><br> Bitte geben Sie hier die betroffene Brust an. Bei beidseitigem Befall sollten sich die weiteren Angaben der Dokumentation auf die prognoseleitende Seite beziehen.",
                    "list": [
                        {
                            "val": "RIGHT",
                            i18n: i18n( 'activity-schema.DmpAffectedBreast_E.RIGHT.i18n' ),
                            "-de": "Rechts"
                        },
                        {
                            "val": "LEFT",
                            i18n: i18n( 'activity-schema.DmpAffectedBreast_E.LEFT.i18n' ),
                            "-de": "Links"
                        },
                        {
                            "val": "BOTH",
                            i18n: i18n( 'activity-schema.DmpAffectedBreast_E.BOTH.i18n' ),
                            "-de": "Beidseits"
                        }
                    ]
                },
                "DmpCurrentTreatmentStatus_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_E.i18n' ),
                    "hint": "Es handelt sich um den aktuellen Behandlungsstatus bezogen auf das operative Vorgehen. <br> Eine Angabe ist erforderlich; nur eine Angabe ist möglich.<br><br> Für die Fälle, in denen die operative Therapie noch nicht erfolgt, aber bereits geplant ist, geben Sie zunächst bitte „OP geplant“ an.<br> Für die Fälle, in denen davon auszugehen ist, dass zunächst keine operative Therapie durchgeführt werden soll, kreuzen Sie bitte „OP nicht geplant“ an. <br> Sollte bereits eine operative Therapie durchgeführt worden sein, machen Sie bitte die Angabe „Postoperativ“.",
                    "list": [
                        {
                            "val": "OPERATION_PLANNED",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_E.OPERATION_PLANNED.i18n' ),
                            "-de": "OP geplant"
                        },
                        {
                            "val": "OPERATION_NOT_PLANNED",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_E.OPERATION_NOT_PLANNED.i18n' ),
                            "-de": "OP nicht geplant"
                        },
                        {
                            "val": "POSTOPERATIVE",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_E.POSTOPERATIVE.i18n' ),
                            "-de": "Postoperativ"
                        }
                    ]
                },
                "DmpPerformedSurgicalTherapy_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.i18n' ),
                    "hint": "Eine Angabe ist nur erforderlich, wenn bei 'Aktueller Behandlungsstatus' 'Postoperativ' angegeben wurde. Mehrfachnennungen sind möglich.",
                    "list": [
                        {
                            "val": "BREAST_PRESERVING",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.BREAST_PRESERVING.i18n' ),
                            "-de": "BET"
                        },
                        {
                            "val": "MASTECTOMY",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.MASTECTOMY.i18n' ),
                            "-de": "Mastektomie"
                        },
                        {
                            "val": "SENTINAL_LYMPH_NODE_BIOPSY",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.SENTINAL_LYMPH_NODE_BIOPSY.i18n' ),
                            "-de": "Sentinel-Lymphknoten-Biopsie"
                        },
                        {
                            "val": "AXILLARY_LYMPHADENECTOMY",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.AXILLARY_LYMPHADENECTOMY.i18n' ),
                            "-de": "Axilläre Lymphonodektomie"
                        },
                        {
                            "val": "OTHER_PROCEDURE",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.OTHER_PROCEDURE.i18n' ),
                            "-de": "Anderes Vorgehen"
                        },
                        {
                            "val": "NO_OPERATION",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_E.NO_OPERATION.i18n' ),
                            "-de": "Keine OP"
                        }
                    ]
                },
                "DmpPerformedSurgicalTherapy_4_23_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.i18n' ),
                    "hint": "Für die Fälle, in denen die operative Therapie noch nicht erfolgt, aber bereits geplant ist, geben Sie zunächst bitte „OP geplant“ an. Für die Fälle, in denen davon auszugehen ist, dass zunächst keine operative Therapie durchgeführt werden soll, kreuzen Sie bitte „OP nicht geplant“ an.<br><br>Sollte bereits eine operative Therapie durchgeführt worden sein, geben Sie die Art der erfolgten operativen Therapie an. Sofern es sich bei der durchgeführten operativen Therapie weder um eine BET oder Mastekttomie noch um eine Sentinel-Lymphknoten-Biopsie oder Axilläre Lymphonodektomie handelt, geben Sie bitte „Anderes Vorgehen“ an.",
                    "list": [
                        {
                            "val": "BREAST_PRESERVING",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.BREAST_PRESERVING.i18n' ),
                            "-de": "BET"
                        },
                        {
                            "val": "MASTECTOMY",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.MASTECTOMY.i18n' ),
                            "-de": "Mastektomie"
                        },
                        {
                            "val": "SENTINAL_LYMPH_NODE_BIOPSY",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.SENTINAL_LYMPH_NODE_BIOPSY.i18n' ),
                            "-de": "Sentinel-Lymphknoten-Biopsie"
                        },
                        {
                            "val": "AXILLARY_LYMPHADENECTOMY",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.AXILLARY_LYMPHADENECTOMY.i18n' ),
                            "-de": "Axilläre Lymphonodektomie"
                        },
                        {
                            "val": "OTHER_PROCEDURE",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.OTHER_PROCEDURE.i18n' ),
                            "-de": "Anderes Vorgehen"
                        },
                        {
                            "val": "OPERATION_PLANNED",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.OPERATION_PLANNED.i18n' ),
                            "-de": "OP geplant"
                        },
                        {
                            "val": "OPERATION_NOT_PLANNED",
                            i18n: i18n( 'activity-schema.DmpPerformedSurgicalTherapy_4_23_E.OPERATION_NOT_PLANNED.i18n' ),
                            "-de": "OP nicht geplant"
                        }
                    ]
                },
                "DmpPreoperativeNeoadjuvantTherapy_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPreoperativeNeoadjuvantTherapy_E.i18n' ),
                    "hint": "Bitte geben Sie hier an, ob vor der operativen Primärtherapie eine präoperative bzw. neoadjuvante Therapie durchgeführt wurde. <br> Nur eine Angabe ist möglich. Wenn eine OP geplant ist, ist die Angabe ist optional.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpPreoperativeNeoadjuvantTherapy_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpPreoperativeNeoadjuvantTherapy_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpTnmClassification_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpTnmClassification_4_23_E.i18n' ),
                    "hint": "Bitte geben Sie hier an, ob sich die nachfolgenden Angaben zur TNM-Klassifikation auf das Ergebnis klinischer Untersuchungen („c“), eines chirurgischen Eingriffs und histopathologischen Untersuchungen („p“) oder einem chirurgischen Eingriff und histopathologischer Untersuchung nach vorangegangener neoadjuvanter Therapie („yp“) beziehen.",
                    "list": [
                        {
                            "val": "PATHOLOGICAL",
                            i18n: i18n( 'activity-schema.DmpTnmClassification_4_23_E.PATHOLOGICAL.i18n' ),
                            "-de": "(p) Pathologisch (postoperativ)"
                        },
                        {
                            "val": "CLINICAL",
                            i18n: i18n( 'activity-schema.DmpTnmClassification_4_23_E.CLINICAL.i18n' ),
                            "-de": "(c) Klinisch"
                        },
                        {
                            "val": "PATHOLOGICAL_AFTER_NEOADJUVANT_THERAPY",
                            i18n: i18n( 'activity-schema.DmpTnmClassification_4_23_E.PATHOLOGICAL_AFTER_NEOADJUVANT_THERAPY.i18n' ),
                            "-de": "(yp) Pathologisch (postoperativ) nach neoadjuvanter Therapie"
                        }
                    ]
                },
                "DmpPT_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPT_E.i18n' ),
                    "hint": "Bitte machen Sie hier Angaben zum Tumorbefund. <br> Sollten Ihnen die Angaben nicht vorliegen bzw. unbekannt sein, können Sie hilfsweise „X“ angeben. Unter der Angabe „Tis“ ist hier nur ein DCIS, nicht aber ein LCIS anzugeben.",
                    "list": [
                        {
                            "val": "X",
                            i18n: i18n( 'activity-schema.DmpPT_E.X.i18n' ),
                            "-de": "X"
                        },
                        {
                            "val": "TIS",
                            i18n: i18n( 'activity-schema.DmpPT_E.TIS.i18n' ),
                            "-de": "Tis"
                        },
                        {
                            "val": "ZERO",
                            i18n: i18n( 'activity-schema.DmpPT_E.ZERO.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpPT_E.ONE.i18n' ),
                            "-de": "1"
                        },
                        {
                            "val": "TWO",
                            i18n: i18n( 'activity-schema.DmpPT_E.TWO.i18n' ),
                            "-de": "2"
                        },
                        {
                            "val": "THREE",
                            i18n: i18n( 'activity-schema.DmpPT_E.THREE.i18n' ),
                            "-de": "3"
                        },
                        {
                            "val": "FOUR",
                            i18n: i18n( 'activity-schema.DmpPT_E.FOUR.i18n' ),
                            "-de": "4"
                        },
                        {
                            "val": "NO_OPERATION",
                            i18n: i18n( 'activity-schema.DmpPT_E.NO_OPERATION.i18n' ),
                            "-de": "Keine OP"
                        }
                    ]
                },
                "DmpPT_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPT_4_23_E.i18n' ),
                    "hint": "Bitte machen Sie hier Angaben zum Tumorbefund. <br> Sollten Ihnen die Angaben nicht vorliegen bzw. unbekannt sein, können Sie hilfsweise „X“ angeben. Unter der Angabe „Tis“ ist hier nur ein DCIS, nicht aber ein LCIS anzugeben.",
                    "list": [
                        {
                            "val": "X",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.X.i18n' ),
                            "-de": "X"
                        },
                        {
                            "val": "TIS",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.TIS.i18n' ),
                            "-de": "Tis"
                        },
                        {
                            "val": "ZERO",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.ZERO.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.ONE.i18n' ),
                            "-de": "1"
                        },
                        {
                            "val": "TWO",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.TWO.i18n' ),
                            "-de": "2"
                        },
                        {
                            "val": "THREE",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.THREE.i18n' ),
                            "-de": "3"
                        },
                        {
                            "val": "FOUR",
                            i18n: i18n( 'activity-schema.DmpPT_4_23_E.FOUR.i18n' ),
                            "-de": "4"
                        }
                    ]
                },
                "DmpPN_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPN_E.i18n' ),
                    "hint": "Bitte machen Sie hier Angaben zum Tumorbefund. <br> Sollten Ihnen die Angaben nicht vorliegen bzw. unbekannt sein, können Sie hilfsweise „X“ angeben. Unter der Angabe „Tis“ ist hier nur ein DCIS, nicht aber ein LCIS anzugeben.",
                    "list": [
                        {
                            "val": "X",
                            i18n: i18n( 'activity-schema.DmpPN_E.X.i18n' ),
                            "-de": "X"
                        },
                        {
                            "val": "ZERO",
                            i18n: i18n( 'activity-schema.DmpPN_E.ZERO.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpPN_E.ONE.i18n' ),
                            "-de": "1"
                        },
                        {
                            "val": "TWO",
                            i18n: i18n( 'activity-schema.DmpPN_E.TWO.i18n' ),
                            "-de": "2"
                        },
                        {
                            "val": "THREE",
                            i18n: i18n( 'activity-schema.DmpPN_E.THREE.i18n' ),
                            "-de": "3"
                        },
                        {
                            "val": "NO_OPERATION",
                            i18n: i18n( 'activity-schema.DmpPN_E.NO_OPERATION.i18n' ),
                            "-de": "Keine OP"
                        }
                    ]
                },
                "DmpPN_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpPN_4_23_E.i18n' ),
                    "hint": "Bitte machen Sie hier Angaben zum Tumorbefund. <br> Sollten Ihnen die Angaben nicht vorliegen bzw. unbekannt sein, können Sie hilfsweise „X“ angeben. Unter der Angabe „Tis“ ist hier nur ein DCIS, nicht aber ein LCIS anzugeben.",
                    "list": [
                        {
                            "val": "X",
                            i18n: i18n( 'activity-schema.DmpPN_4_23_E.X.i18n' ),
                            "-de": "X"
                        },
                        {
                            "val": "ZERO",
                            i18n: i18n( 'activity-schema.DmpPN_4_23_E.ZERO.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpPN_4_23_E.ONE.i18n' ),
                            "-de": "1"
                        },
                        {
                            "val": "TWO",
                            i18n: i18n( 'activity-schema.DmpPN_4_23_E.TWO.i18n' ),
                            "-de": "2"
                        },
                        {
                            "val": "THREE",
                            i18n: i18n( 'activity-schema.DmpPN_4_23_E.THREE.i18n' ),
                            "-de": "3"
                        }
                    ]
                },
                "DmpM_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpM_E.i18n' ),
                    "hint": "Bitte machen Sie hier Angaben zum Tumorbefund. <br> Sollten Ihnen die Angaben nicht vorliegen bzw. unbekannt sein, können Sie hilfsweise „X“ angeben. Unter der Angabe „Tis“ ist hier nur ein DCIS, nicht aber ein LCIS anzugeben.",
                    "list": [
                        {
                            "val": "X",
                            i18n: i18n( 'activity-schema.DmpM_E.X.i18n' ),
                            "-de": "X"
                        },
                        {
                            "val": "ZERO",
                            i18n: i18n( 'activity-schema.DmpM_E.ZERO.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpM_E.ONE.i18n' ),
                            "-de": "1"
                        }
                    ]
                },
                "DmpM_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpM_4_23_E.i18n' ),
                    "hint": "Bitte machen Sie hier Angaben zum Tumorbefund.",
                    "list": [
                        {
                            "val": "ZERO",
                            i18n: i18n( 'activity-schema.DmpM_4_23_E.ZERO.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpM_4_23_E.ONE.i18n' ),
                            "-de": "1"
                        }
                    ]
                },
                "DmpGrading_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpGrading_E.i18n' ),
                    "hint": "Das Grading erfolgt nach der Systematik von Elston und Ellis (1991). Sollten Sie bzw. das die Operation durchführende Krankenhaus eine andere Grading-Systematik verwendet haben, machen Sie bitte eine Angabe bei „unbekannt“.",
                    "list": [
                        {
                            "val": "ONE",
                            i18n: i18n( 'activity-schema.DmpGrading_E.ONE.i18n' ),
                            "-de": "1"
                        },
                        {
                            "val": "TWO",
                            i18n: i18n( 'activity-schema.DmpGrading_E.TWO.i18n' ),
                            "-de": "2"
                        },
                        {
                            "val": "THREE",
                            i18n: i18n( 'activity-schema.DmpGrading_E.THREE.i18n' ),
                            "-de": "3"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpGrading_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        }
                    ]
                },
                "DmpResection_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpResection_E.i18n' ),
                    "hint": "Bitte geben Sie hier den Befund zum Resektionsstatus an. Die gleichzeitige Angabe von „Keine OP“ und „Unbekannt“ ist möglich. Die übrigen Angaben dürfen nur einzeln angegeben werden.",
                    "list": [
                        {
                            "val": "R0",
                            i18n: i18n( 'activity-schema.DmpResection_E.R0.i18n' ),
                            "-de": "R0"
                        },
                        {
                            "val": "R1",
                            i18n: i18n( 'activity-schema.DmpResection_E.R1.i18n' ),
                            "-de": "R1"
                        },
                        {
                            "val": "R2",
                            i18n: i18n( 'activity-schema.DmpResection_E.R2.i18n' ),
                            "-de": "R2"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpResection_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        },
                        {
                            "val": "NO_OPERATION",
                            i18n: i18n( 'activity-schema.DmpResection_E.NO_OPERATION.i18n' ),
                            "-de": "Keine OP"
                        }
                    ]
                },
                "DmpImmunohistochemicalHormoneReceptor_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_E.i18n' ),
                    "hint": "Bitte geben Sie hier den Befund zum Immunhistochemischen Hormonrezeptorstatus (östrogen und/oder Progesteron) an. Sollte der Status nicht bekannt sein, geben Sie bitte „Unbekannt“ an.",
                    "list": [
                        {
                            "val": "POSITIVE",
                            i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_E.POSITIVE.i18n' ),
                            "-de": "Positiv"
                        },
                        {
                            "val": "NEGATIVE",
                            i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_E.NEGATIVE.i18n' ),
                            "-de": "Negativ"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        }
                    ]
                },
                "DmpImmunohistochemicalHormoneReceptor_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_4_23_E.i18n' ),
                    "hint": "Bitte geben Sie hier den Befund zum Hormonrezeptorstatus (Östrogen und/oder Progesteron) an. Die Befundeinteilung richtet sich dabei nach dem Immunreaktiven Score (IRS). Sollte der Status nicht bekannt sein, geben Sie bitte „Unbekannt“ an.",
                    "list": [
                        {
                            "val": "POSITIVE",
                            i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_4_23_E.POSITIVE.i18n' ),
                            "-de": "Positiv"
                        },
                        {
                            "val": "NEGATIVE",
                            i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_4_23_E.NEGATIVE.i18n' ),
                            "-de": "Negativ"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpImmunohistochemicalHormoneReceptor_4_23_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        }
                    ]
                },
                "DmpCurrentAdjuvantEndocrineTherapy_4_23_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCurrentAdjuvantEndocrineTherapy_4_23_E.i18n' ),
                    "hint": "Bitte geben Sie hier die Art der aktuell (zum Zeitpunkt der Dokumentationserstellung) stattfindenden adjuvanten Therapie an. Zur Behandlung werden sowohl Tamoxifen als auch Aromataseinhibitoren (z.B. Anastrozol, Letrozol, Exemestan) eingesetzt. Sofern eine Therapie mit anderen Wirkstoffen durchgeführt wird, geben Sie bitte „Andere“ an.<br><br>Sollte zum Zeitpunkt der Dokumentationserstellung noch keine adjuvante endokrine Therapie stattfinden aber bereits geplant sein, geben Sie bitte „Endokrine Therapie geplant“ an.<br><br>Sollte zum Zeitpunkt der Dokumentationserstellung weder eine Therapie stattfinden noch geplant sein, geben Sie bitte „Keine“ an.",
                    "list": [
                        {
                            "val": "AROMATASE_INHIBITORS",
                            i18n: i18n( 'activity-schema.DmpCurrentAdjuvantEndocrineTherapy_4_23_E.AROMATASE_INHIBITORS.i18n' ),
                            "-de": "Aromataseinhibitoren"
                        },
                        {
                            "val": "TAMOXIFEN",
                            i18n: i18n( 'activity-schema.DmpCurrentAdjuvantEndocrineTherapy_4_23_E.TAMOXIFEN.i18n' ),
                            "-de": "Tamoxifen"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpCurrentAdjuvantEndocrineTherapy_4_23_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpCurrentAdjuvantEndocrineTherapy_4_23_E.NONE.i18n' ),
                            "-de": "Keine"
                        },
                        {
                            "val": "ENDOCRINE_THERAPY_PLANNED",
                            i18n: i18n( 'activity-schema.DmpCurrentAdjuvantEndocrineTherapy_4_23_E.ENDOCRINE_THERAPY_PLANNED.i18n' ),
                            "-de": "Endokrine Therapie geplant"
                        }
                    ]
                },
                "DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E.i18n' ),
                    "hint": "Bitte geben Sie hier an, ob Sie mögliche Nebenwirkungen der Therapie erfragt haben. Ist dies der Fall, geben Sie bitte an, als wie belastend die Nebenwirkungen der Therapie eingeschätzt werden. Bestehen zwar Nebenwirkungen, diese werden aber nicht als belastend empfunden, geben Sie bitte „nicht belastend“ an. Weitere Ausprägungen der Belastung durch die Nebenwirkung sind „mäßig belastend und „starkt belastend“.",
                    "list": [
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E.NO.i18n' ),
                            "-de": "Nein"
                        },
                        {
                            "val": "NOT_BURDENING",
                            i18n: i18n( 'activity-schema.DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E.NOT_BURDENING.i18n' ),
                            "-de": "nicht belastend"
                        },
                        {
                            "val": "MODERATELY_BURDENING",
                            i18n: i18n( 'activity-schema.DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E.MODERATELY_BURDENING.i18n' ),
                            "-de": "mäßig belastend"
                        },
                        {
                            "val": "STRONGLY_BURDENING",
                            i18n: i18n( 'activity-schema.DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E.STRONGLY_BURDENING.i18n' ),
                            "-de": "stark belastend"
                        },
                        {
                            "val": "NOT_INQUIRED",
                            i18n: i18n( 'activity-schema.DmpSideEffectsOfCurrentAdjuvantEndocrineTherapy_4_23_E.NOT_INQUIRED.i18n' ),
                            "-de": "nicht erfragt"
                        }
                    ]
                },
                "DmpContinuationOfCurrentEndocrineTherapy_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpContinuationOfCurrentEndocrineTherapy_4_23_E.i18n' ),
                    "hint": "Wurde eine adjuvante endokrine Therapie zum Zeitpunkt der Dokumentationserstellung bereits beendet, geben Sie bitte an, ob sie „vor dem abgeschlossenen 5. Jahr abgebrochen“ wurde oder aber „regulär nach fünf Jahren abgeschlossen“ wurde. <br><br> Dauert die Therapie aktuell noch an, geben Sie bitte an, ob sie „aktuell andauernd, weniger als fünf Jahre“ oder „aktuelle andauernd, Fortführung über fünf Jahre hinaus“ erfolgt.<br><br> Wurde bzw. wird keine endokrine Therapie durchgeführt, geben Sie dies bitte auch an („Keine endo- krine Therapie durchgeführt“).",
                    "list": [
                        {
                            "val": "INTERRUPTED_BEFORE_5TH_YEAR",
                            i18n: i18n( 'activity-schema.DmpContinuationOfCurrentEndocrineTherapy_4_23_E.INTERRUPTED_BEFORE_5TH_YEAR.i18n' ),
                            "-de": "Vor dem abgeschlossenen 5. Jahr abgebrochen"
                        },
                        {
                            "val": "COMPLETED_NORMALLY_AFTER_5_YEARS",
                            i18n: i18n( 'activity-schema.DmpContinuationOfCurrentEndocrineTherapy_4_23_E.COMPLETED_NORMALLY_AFTER_5_YEARS.i18n' ),
                            "-de": "Regulär nach fünf Jahren abgeschlossen"
                        },
                        {
                            "val": "ONGOING_FOR_LESS_THAN_5_YEARS",
                            i18n: i18n( 'activity-schema.DmpContinuationOfCurrentEndocrineTherapy_4_23_E.ONGOING_FOR_LESS_THAN_5_YEARS.i18n' ),
                            "-de": "Aktuell andauernd, seit weniger als 5 Jahren"
                        },
                        {
                            "val": "ONGOING_CONTINUATION_OVER_5_YEARS",
                            i18n: i18n( 'activity-schema.DmpContinuationOfCurrentEndocrineTherapy_4_23_E.ONGOING_CONTINUATION_OVER_5_YEARS.i18n' ),
                            "-de": "Aktuell andauernd, Fortführung über fünf Jahre hinaus"
                        },
                        {
                            "val": "NO_ENDOCRINE_THERAPY_PERFORMED",
                            i18n: i18n( 'activity-schema.DmpContinuationOfCurrentEndocrineTherapy_4_23_E.NO_ENDOCRINE_THERAPY_PERFORMED.i18n' ),
                            "-de": "Keine endokrine Therapie durchgeführt"
                        }
                    ]
                },
                "DmpDxaFindings_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpDxaFindings_4_23_E.i18n' ),
                    "hint": "Bitte geben Sie hier den Befund der DXA an.<br><br> Sofern keine DXA durchgeführt wurde oder der Befund nicht bekannt ist, geben Sie bitte „unbekannt“ an.",
                    "list": [
                        {
                            "val": "NOTICABLE",
                            i18n: i18n( 'activity-schema.DmpDxaFindings_4_23_E.NOTICABLE.i18n' ),
                            "-de": "Auffällig"
                        },
                        {
                            "val": "DISCREET",
                            i18n: i18n( 'activity-schema.DmpDxaFindings_4_23_E.DISCREET.i18n' ),
                            "-de": "Unauffällig"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpDxaFindings_4_23_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        }
                    ]
                },
                "DmpHER2Neu_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHER2Neu_E.i18n' ),
                    "hint": "Bitte geben Sie hier den Befund zum HER2/neu-Status an. Sollte der Status nicht bekannt sein, geben Sie bitte „Unbekannt“ an.",
                    "list": [
                        {
                            "val": "POSITIVE",
                            i18n: i18n( 'activity-schema.DmpHER2Neu_E.POSITIVE.i18n' ),
                            "-de": "Positiv"
                        },
                        {
                            "val": "NEGATIVE",
                            i18n: i18n( 'activity-schema.DmpHER2Neu_E.NEGATIVE.i18n' ),
                            "-de": "Negativ"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpHER2Neu_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        }
                    ]
                },
                "DmpRadiotherapy_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRadiotherapy_E.i18n' ),
                    "hint": "Wurde zum Zeitpunkt der Dokumentationserstellung noch nicht mit der Therapie begonnen, die Durchführung aber geplant, geben Sie bitte „Geplant“ an. <br> Die Angabe „Andauernd“ bezieht sich auf eine bereits begonnene, aber zum Zeitpunkt der Dokumentationserstellung noch nicht abgeschlossene Therapie. <br> Als „Regulär abgeschlossen“ gilt eine Therapie, wenn alle zuvor geplanten Therapiezyklen abgeschlossen sind.<br> Wurde eine Therapie vor Abschluss aller zunächst geplanten Therapiezyklen abgeschlossen, geben Sie bitte „Vorzeitig beendet“ an.<br> „Keine“ ist anzugeben, wenn die jeweilige Therapie nicht als Therapieoption gewählt wurde.",
                    "list": [
                        {
                            "val": "PLANNED",
                            i18n: i18n( 'activity-schema.DmpRadiotherapy_E.PLANNED.i18n' ),
                            "-de": "Geplant"
                        },
                        {
                            "val": "ONGOING",
                            i18n: i18n( 'activity-schema.DmpRadiotherapy_E.ONGOING.i18n' ),
                            "-de": "Andauernd"
                        },
                        {
                            "val": "COMPLETED_NORMALLY",
                            i18n: i18n( 'activity-schema.DmpRadiotherapy_E.COMPLETED_NORMALLY.i18n' ),
                            "-de": "Regulär abgeschlossen"
                        },
                        {
                            "val": "TERMINATED_PREMATURELY",
                            i18n: i18n( 'activity-schema.DmpRadiotherapy_E.TERMINATED_PREMATURELY.i18n' ),
                            "-de": "Vorzeitig beendet"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpRadiotherapy_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpChemotherapy_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpChemotherapy_E.i18n' ),
                    "hint": "Wurde zum Zeitpunkt der Dokumentationserstellung noch nicht der Therapie begonnen, die Durchführung aber geplant, geben Sie bitte „Geplant“ an. <br> Die Angabe „Andauernd“ bezieht sich auf eine bereits begonnene, aber zum Zeitpunkt der Dokumentationserstellung noch nicht abgeschlossene Therapie. <br> Als „Regulär abgeschlossen“ gilt eine Therapie, wenn alle zuvor geplanten Therapiezyklen abgeschlossen sind.<br> Wurde eine Therapie vor Abschluss aller zunächst geplanten Therapiezyklen abgeschlossen, geben Sie bitte „Vorzeitig beendet“ an.<br> „Keine“ ist anzugeben, wenn die jeweilige Therapie nicht als Therapieoption gewählt wurde.",
                    "list": [
                        {
                            "val": "PLANNED",
                            i18n: i18n( 'activity-schema.DmpChemotherapy_E.PLANNED.i18n' ),
                            "-de": "Geplant"
                        },
                        {
                            "val": "ONGOING",
                            i18n: i18n( 'activity-schema.DmpChemotherapy_E.ONGOING.i18n' ),
                            "-de": "Andauernd"
                        },
                        {
                            "val": "COMPLETED_NORMALLY",
                            i18n: i18n( 'activity-schema.DmpChemotherapy_E.COMPLETED_NORMALLY.i18n' ),
                            "-de": "Regulär abgeschlossen"
                        },
                        {
                            "val": "TERMINATED_PREMATURELY",
                            i18n: i18n( 'activity-schema.DmpChemotherapy_E.TERMINATED_PREMATURELY.i18n' ),
                            "-de": "Vorzeitig beendet"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpChemotherapy_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpEndocrineTherapy_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpEndocrineTherapy_E.i18n' ),
                    "hint": "Wurde zum Zeitpunkt der Dokumentationserstellung noch nicht der Therapie begonnen, die Durchführung aber geplant, geben Sie bitte „Geplant“ an. <br> Die Angabe „Andauernd“ bezieht sich auf eine bereits begonnene, aber zum Zeitpunkt der Dokumentationserstellung noch nicht abgeschlossene Therapie. <br> Als „Regulär abgeschlossen“ gilt eine Therapie, wenn alle zuvor geplanten Therapiezyklen abgeschlossen sind.<br> Wurde eine Therapie vor Abschluss aller zunächst geplanten Therapiezyklen abgeschlossen, geben Sie bitte „Vorzeitig beendet“ an.<br> „Keine“ ist anzugeben, wenn die jeweilige Therapie nicht als Therapieoption gewählt wurde.",
                    "list": [
                        {
                            "val": "PLANNED",
                            i18n: i18n( 'activity-schema.DmpEndocrineTherapy_E.PLANNED.i18n' ),
                            "-de": "Geplant"
                        },
                        {
                            "val": "ONGOING",
                            i18n: i18n( 'activity-schema.DmpEndocrineTherapy_E.ONGOING.i18n' ),
                            "-de": "Andauernd"
                        },
                        {
                            "val": "COMPLETED_NORMALLY",
                            i18n: i18n( 'activity-schema.DmpEndocrineTherapy_E.COMPLETED_NORMALLY.i18n' ),
                            "-de": "Regulär abgeschlossen"
                        },
                        {
                            "val": "TERMINATED_PREMATURELY",
                            i18n: i18n( 'activity-schema.DmpEndocrineTherapy_E.TERMINATED_PREMATURELY.i18n' ),
                            "-de": "Vorzeitig beendet"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpEndocrineTherapy_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpAntibodyTherapy_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAntibodyTherapy_E.i18n' ),
                    "hint": "Wurde zum Zeitpunkt der Dokumentationserstellung noch nicht der Therapie begonnen, die Durchführung aber geplant, geben Sie bitte „Geplant“ an. <br> Die Angabe „Andauernd“ bezieht sich auf eine bereits begonnene, aber zum Zeitpunkt der Dokumentationserstellung noch nicht abgeschlossene Therapie. <br> Als „Regulär abgeschlossen“ gilt eine Therapie, wenn alle zuvor geplanten Therapiezyklen abgeschlossen sind.<br> Wurde eine Therapie vor Abschluss aller zunächst geplanten Therapiezyklen abgeschlossen, geben Sie bitte „Vorzeitig beendet“ an.<br> „Keine“ ist anzugeben, wenn die jeweilige Therapie nicht als Therapieoption gewählt wurde.",
                    "list": [
                        {
                            "val": "PLANNED",
                            i18n: i18n( 'activity-schema.DmpAntibodyTherapy_E.PLANNED.i18n' ),
                            "-de": "Geplant"
                        },
                        {
                            "val": "ONGOING",
                            i18n: i18n( 'activity-schema.DmpAntibodyTherapy_E.ONGOING.i18n' ),
                            "-de": "Andauernd"
                        },
                        {
                            "val": "COMPLETED_NORMALLY",
                            i18n: i18n( 'activity-schema.DmpAntibodyTherapy_E.COMPLETED_NORMALLY.i18n' ),
                            "-de": "Regulär abgeschlossen"
                        },
                        {
                            "val": "TERMINATED_PREMATURELY",
                            i18n: i18n( 'activity-schema.DmpAntibodyTherapy_E.TERMINATED_PREMATURELY.i18n' ),
                            "-de": "Vorzeitig beendet"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpAntibodyTherapy_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpOngoingOrCompletedTherapy_locoregionalRecurrence_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.i18n' ),
                    "hint": "Geben Sie bitte an, wie der aktuelle Therapiestatus des Rezidivs ist.<br><br> Wenn für Ihre Patientin seit der letzten Dokumentation in Bezug auf das Rezidiv ein operatives Vorgehen geplant, aber bisher nicht durchgeführt wurde, geben Sie bitte „Präoperativ“ an. In diesem Fall ist keine Angabe zu Exzision und Mastektomie möglich.<br><br>Ist bereits eine Exzision und/oder Mastektomie als operative Therapie durchgeführt, geben Sie dies bitte an.<br><br>Wurde seit der letzten Dokumentation bereits mit einer Strahlen-, Chemo- oder endokrinen Therapie begonnen oder eine solche abgeschlossen, machen Sie bitte auch hierzu die jeweilige Angabe.<br><br>Bei allen anderen Vorgehensweisen sowohl operativer als auch konservativer Art geben Sie bitte „Andere“ an.<br><br>Wurde bisher mit keiner Therapie begonnen oder ist keine weitere Therapie geplant, geben Sie bitte „Keine“ an. In diesem Fall ist keine weitere Angabe möglich. Die übrigen Angaben können miteinan- der kombiniert werden (Ausnahme: präoperativ mit Exzision bzw. Mastektomie).",
                    "list": [
                        {
                            "val": "PREOPERATIVE",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.PREOPERATIVE.i18n' ),
                            "-de": "Präoperativ"
                        },
                        {
                            "val": "EXCISION",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.EXCISION.i18n' ),
                            "-de": "Exzision"
                        },
                        {
                            "val": "MASTECTOMY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.MASTECTOMY.i18n' ),
                            "-de": "Mastektomie"
                        },
                        {
                            "val": "RADIOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.RADIOTHERAPY.i18n' ),
                            "-de": "Strahlentherapie"
                        },
                        {
                            "val": "CHEMOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.CHEMOTHERAPY.i18n' ),
                            "-de": "Chemotherapie"
                        },
                        {
                            "val": "ENDOCRINE_THERAPY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.ENDOCRINE_THERAPY.i18n' ),
                            "-de": "Endokrine Therapie"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpLocalisation_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLocalisation_E.i18n' ),
                    "hint": "Geben Sie bitte den Lokalisationsort der Fernmetastase an. Hierbei können alle Antworten kombiniert werden.",
                    "list": [
                        {
                            "val": "LIVER",
                            i18n: i18n( 'activity-schema.DmpLocalisation_E.LIVER.i18n' ),
                            "-de": "Leber"
                        },
                        {
                            "val": "LUNG",
                            i18n: i18n( 'activity-schema.DmpLocalisation_E.LUNG.i18n' ),
                            "-de": "Lunge"
                        },
                        {
                            "val": "BONE",
                            i18n: i18n( 'activity-schema.DmpLocalisation_E.BONE.i18n' ),
                            "-de": "Knochen"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpLocalisation_E.OTHER.i18n' ),
                            "-de": "Andere"
                        }
                    ]
                },
                "DmpLocalisation_4_23_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLocalisation_4_23_E.i18n' ),
                    "hint": "Geben Sie bitte den Lokalisationsort der Fernmetastase an. Hierbei können alle Antworten kombiniert werden.",
                    "list": [
                        {
                            "val": "BONE",
                            i18n: i18n( 'activity-schema.DmpLocalisation_4_23_E.BONE.i18n' ),
                            "-de": "Knochen"
                        },
                        {
                            "val": "VISCERAL",
                            i18n: i18n( 'activity-schema.DmpLocalisation_4_23_E.VISCERAL.i18n' ),
                            "-de": "viszeral"
                        },
                        {
                            "val": "CNS",
                            i18n: i18n( 'activity-schema.DmpLocalisation_4_23_E.CNS.i18n' ),
                            "-de": "ZNS"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpLocalisation_4_23_E.OTHER.i18n' ),
                            "-de": "Andere"
                        }
                    ]
                },
                "DmpOngoingOrCompletedTherapy_remoteMetastases_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.i18n' ),
                    "hint": "Machen Sie hier bitte Angaben zur andauernden bzw. abgeschlossenen Therapie der Fernmetastasen. Die Angabe „Operativ“ bezieht sich dabei auf eine bereits abgeschlossene Therapie, die übrigen Angaben sowohl auf bereits abgeschlossene als auch auf zur Zeit noch andauernde Therapien.<br><br> Unter „Operativ“ sind alle operativen Verfahren zu verstehen, die im Zusammenhang mit der Behandlung der Fernmetastasen angewendet wurden.<br>Wird zur Zeit eine Strahlen-, Chemo- oder endokrine Therapie durchgeführt oder ist diese bereits erfolgt, machen Sie bitte eine Angabe zur jeweiligen Therapie.<br>Unter „Andere“ können Sie alle weiteren, hier nicht aufgeführten Therapieformen angeben, die im Rahmen der Behandlung der Fernmetastasen bereits durchgeführt wurden oder zur Zeit durchgeführt werden.<br>Wird bzw. wurde keine Therapie durchgeführt, kreuzen Sie bitte „Keine“ an. In diesem Fall ist keine weitere Angabe möglich. Ansonsten sind alle Angaben miteinander kombinierbar.<br>Wird bei Ihrer Patientin eine Bisphosphonat-Therapie durchgeführt, ist dies in dem zugewiesenen Feld zu dokumentieren.",
                    "list": [
                        {
                            "val": "OPERATIVE",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.OPERATIVE.i18n' ),
                            "-de": "Operativ"
                        },
                        {
                            "val": "RADIOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.RADIOTHERAPY.i18n' ),
                            "-de": "Strahlentherapie"
                        },
                        {
                            "val": "CHEMOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.CHEMOTHERAPY.i18n' ),
                            "-de": "Chemotherapie"
                        },
                        {
                            "val": "ENDOCRINE_THERAPY",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.ENDOCRINE_THERAPY.i18n' ),
                            "-de": "Endokrine Therapie"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpOngoingOrCompletedTherapy_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpBisphosphonateTherapy_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_E.i18n' ),
                    "hint": "Die Angaben „Nein“ und „Kontraindikation“ können gemeinsam erfolgen.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_E.NO.i18n' ),
                            "-de": "Nein"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_E.CONTRAINDICATION.i18n' ),
                            "-de": "Kontraindikation"
                        }
                    ]
                },
                "DmpDenosumab_4_23_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpDenosumab_4_23_E.i18n' ),
                    "hint": "Die Angaben „Nein“ und „Kontraindikation“ können gemeinsam erfolgen.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpDenosumab_4_23_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpDenosumab_4_23_E.NO.i18n' ),
                            "-de": "Nein"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            i18n: i18n( 'activity-schema.DmpDenosumab_4_23_E.CONTRAINDICATION.i18n' ),
                            "-de": "Kontraindikation"
                        }
                    ]
                },
                "DmpRegularPhysicalTrainingRecommended_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpRegularPhysicalTrainingRecommended_4_23_E.i18n' ),
                    "hint": "Geben Sie bitte an, ob Sie Ihrer Patientin regelmäßiges körperliches Training empfohlen haben.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpRegularPhysicalTrainingRecommended_4_23_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpRegularPhysicalTrainingRecommended_4_23_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E.i18n' ),
                    "hint": "Bitte geben Sie hier an, ob bei Ihrer Patientin eine solche Therapie durchgeführt wurde bzw. aktuell durchgeführt wird.<br><br> Sollte keine der aufgeführten Therapien in der Vergangenheit oder aktuell bei Ihrer Patientin zur An- wendung kommen, geben Sie bitte „Nein“ an.<br><br> Ist Ihnen nicht bekannt, ob eine solche Therapie bisher bei ihrer Patientin durchgeführt wurde, geben Sie bitte „Unbekannt“ an.",
                    "list": [
                        {
                            "val": "ANTHRACYCLINES",
                            i18n: i18n( 'activity-schema.DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E.ANTHRACYCLINES.i18n' ),
                            "-de": "Anthrazykline (Doxorubicin, Epirubicin)"
                        },
                        {
                            "val": "TRASTUZUMAB",
                            i18n: i18n( 'activity-schema.DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E.TRASTUZUMAB.i18n' ),
                            "-de": "Trastuzumab"
                        },
                        {
                            "val": "LEFT_THORACAL_IRRADIATION",
                            i18n: i18n( 'activity-schema.DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E.LEFT_THORACAL_IRRADIATION.i18n' ),
                            "-de": "linksthorakale Bestrahlung"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E.UNKNOWN.i18n' ),
                            "-de": "Unbekannt"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpConditionAfterParticularlyCardiotoxicTumorTherapy_4_23_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpLymphedemaPresent_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLymphedemaPresent_E.i18n' ),
                    "hint": "Geben Sie bitte an, ob bei Ihrer Patientin aktuell ein Lymphödem vorliegt.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpLymphedemaPresent_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpLymphedemaPresent_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpSymptomaticLymphedema_4_23_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSymptomaticLymphedema_4_23_E.i18n' ),
                    "hint": "Geben Sie bitte an, ob bei Ihrer Patientin aktuell ein symptomatisches Lymphödem vorliegt und ob eine Behandlung mittels Kompressionsarmstrumpftherapie erforderlich ist.<br><br> Liegt kein symptomatisches Lymphödem vor, geben Sie bitte „Nein“ an.\n",
                    "list": [
                        {
                            "val": "YES_COMPRESSION_ARMSLEEVES_THERAPY_NECESSARY",
                            i18n: i18n( 'activity-schema.DmpSymptomaticLymphedema_4_23_E.YES_COMPRESSION_ARMSLEEVES_THERAPY_NECESSARY.i18n' ),
                            "-de": "Ja, Kompressionsarmstrumpftherapie erforderlich"
                        }, {
                            "val": "YES_COMPRESSION_ARMSLEEVES_THERAPY_NOT_NECESSARY",
                            i18n: i18n( 'activity-schema.DmpSymptomaticLymphedema_4_23_E.YES_COMPRESSION_ARMSLEEVES_THERAPY_NOT_NECESSARY.i18n' ),
                            "-de": "Ja, keine Kompressionsarmstrumpftherapie erforderlich"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpSymptomaticLymphedema_4_23_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpCurrentTreatmentStatus_following_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_following_E.i18n' ),
                    "hint": "Geben Sie bitte den aktuellen Behandlungsstatus des lokoregionären Rezidivs bzw. der Fernmetastasen an. Die Angaben sollen sich immer auf den jüngsten, also aktuellen Befund beziehen.",
                    "list": [
                        {
                            "val": "TOTAL_REMISSION",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_following_E.TOTAL_REMISSION.i18n' ),
                            "-de": "Vollremission"
                        },
                        {
                            "val": "PARTIAL_REMISSION",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_following_E.PARTIAL_REMISSION.i18n' ),
                            "-de": "Teilremission"
                        },
                        {
                            "val": "NO_CHANGE",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_following_E.NO_CHANGE.i18n' ),
                            "-de": "No change"
                        },
                        {
                            "val": "PROGRESS",
                            i18n: i18n( 'activity-schema.DmpCurrentTreatmentStatus_following_E.PROGRESS.i18n' ),
                            "-de": "Progress"
                        }
                    ]
                },
                "DmpTherapyOfLocoregionalRecurrence_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind dabei möglich.<br>Bitte geben Sie an, ob bei Ihrem Patienten in der Vergangenheit eines der aufgeführten Ereignisse eingetreten ist.<br><br>Handelt es sich um eine <strong>Erstdokumentation</strong>, sind hier Ereignisse aus der Vergangenheit einzubeziehen.<br>Erfolgt die Angabe im Rahmen einer <strong>Folgedokumentation</strong>, sind jeweils nur Ereignisse seit der letzten Dokumentation zu berücksichtigen.<br>Sollte in der Vergangenheit bzw. seit der letzten Dokumentation keines der aufgeführten Ereignisse stattgefunden haben, geben Sie bitte zur Vollständigkeit „nein“ an.",
                    "list": [
                        {
                            "val": "PREOPERATIVE",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.PREOPERATIVE.i18n' ),
                            "-de": "Präoperativ"
                        },
                        {
                            "val": "EXCISION",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.EXCISION.i18n' ),
                            "-de": "Exzision"
                        },
                        {
                            "val": "MASTECTOMY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.MASTECTOMY.i18n' ),
                            "-de": "Mastektomie"
                        },
                        {
                            "val": "RADIOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.RADIOTHERAPY.i18n' ),
                            "-de": "Strahlentherapie"
                        },
                        {
                            "val": "CHEMOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.CHEMOTHERAPY.i18n' ),
                            "-de": "Chemotherapie"
                        },
                        {
                            "val": "ENDOCRINE_THERAPY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.ENDOCRINE_THERAPY.i18n' ),
                            "-de": "Endokrine Therapie"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpTherapyOfLocoregionalRecurrence_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpTherapyOfRemoteMetastases_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind dabei möglich.<br>Bitte geben Sie an, ob bei Ihrem Patienten in der Vergangenheit eines der aufgeführten Ereignisse eingetreten ist.<br><br>Handelt es sich um eine <strong>Erstdokumentation</strong>, sind hier Ereignisse aus der Vergangenheit einzubeziehen.<br>Erfolgt die Angabe im Rahmen einer <strong>Folgedokumentation</strong>, sind jeweils nur Ereignisse seit der letzten Dokumentation zu berücksichtigen.<br>Sollte in der Vergangenheit bzw. seit der letzten Dokumentation keines der aufgeführten Ereignisse stattgefunden haben, geben Sie bitte zur Vollständigkeit „nein“ an.",
                    "list": [
                        {
                            "val": "OPERATIVE",
                            i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.OPERATIVE.i18n' ),
                            "-de": "Operativ"
                        },
                        {
                            "val": "RADIOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.RADIOTHERAPY.i18n' ),
                            "-de": "Strahlentherapie"
                        },
                        {
                            "val": "CHEMOTHERAPY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.CHEMOTHERAPY.i18n' ),
                            "-de": "Chemotherapie"
                        },
                        {
                            "val": "ENDOCRINE_THERAPY",
                            i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.ENDOCRINE_THERAPY.i18n' ),
                            "-de": "Endokrine Therapie"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NONE",
                            i18n: i18n( 'activity-schema.DmpTherapyOfRemoteMetastases_E.NONE.i18n' ),
                            "-de": "Keine"
                        }
                    ]
                },
                "DmpBisphosphonateTherapy_following_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_following_E.i18n' ),
                    "hint": "Eine Angabe ist verpflichtend.<br>Mehrfachnennungen sind dabei möglich.<br>Bitte geben Sie an, ob bei Ihrem Patienten in der Vergangenheit eines der aufgeführten Ereignisse eingetreten ist.<br><br>Handelt es sich um eine <strong>Erstdokumentation</strong>, sind hier Ereignisse aus der Vergangenheit einzubeziehen.<br>Erfolgt die Angabe im Rahmen einer <strong>Folgedokumentation</strong>, sind jeweils nur Ereignisse seit der letzten Dokumentation zu berücksichtigen.<br>Sollte in der Vergangenheit bzw. seit der letzten Dokumentation keines der aufgeführten Ereignisse stattgefunden haben, geben Sie bitte zur Vollständigkeit „nein“ an.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_following_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_following_E.NO.i18n' ),
                            "-de": "Nein"
                        },
                        {
                            "val": "CONTRAINDICATION",
                            i18n: i18n( 'activity-schema.DmpBisphosphonateTherapy_following_E.CONTRAINDICATION.i18n' ),
                            "-de": "Kontraindikation"
                        }
                    ]
                },
                "DmpManifestationOfLocoregionalRecurrence_following_text_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpManifestationOfLocoregionalRecurrence_following_text_E.i18n' ),
                    "list": [
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpManifestationOfLocoregionalRecurrence_following_text_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpManifestationOfContralateralBreastCancer_following_text_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpManifestationOfContralateralBreastCancer_following_text_E.i18n' ),
                    "list": [
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpManifestationOfContralateralBreastCancer_following_text_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpManifestationOfRemoteMetastases_following_text_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_E.i18n' ),
                    "list": [
                        {
                            "val": "LIVER",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_E.LIVER.i18n' ),
                            "-de": "Leber"
                        },
                        {
                            "val": "LUNG",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_E.LUNG.i18n' ),
                            "-de": "Lunge"
                        },
                        {
                            "val": "BONE",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_E.BONE.i18n' ),
                            "-de": "Knochen"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpManifestationOfRemoteMetastases_following_text_4_23_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_4_23_E.i18n' ),
                    "list": [
                        {
                            "val": "BONE",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_4_23_E.BONE.i18n' ),
                            "-de": "Knochen"
                        },
                        {
                            "val": "VISCERAL",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_4_23_E.VISCERAL.i18n' ),
                            "-de": "viszeral"
                        },
                        {
                            "val": "CNS",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_4_23_E.CNS.i18n' ),
                            "-de": "ZNS"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_4_23_E.OTHER.i18n' ),
                            "-de": "Andere"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpManifestationOfRemoteMetastases_following_text_4_23_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpBiopticConfirmationOfVisceralMetastases_4_23": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpBiopticConfirmationOfVisceralMetastases_4_23.i18n' ),
                    "hint": "Geben Sie bitte an, ob eine bioptische Sicherung der viszeralen Metastasen erfolgt ist. Sollte eine Biopsie geplant aber zum Zeitpunkt der Dokumentation noch nicht erfolgt sein, geben Sie bitte „geplant“ an.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpBiopticConfirmationOfVisceralMetastases_4_23.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpBiopticConfirmationOfVisceralMetastases_4_23.NO.i18n' ),
                            "-de": "Nein"
                        },
                        {
                            "val": "PLANNED",
                            i18n: i18n( 'activity-schema.DmpBiopticConfirmationOfVisceralMetastases_4_23.PLANNED.i18n' ),
                            "-de": "Geplant"
                        }
                    ]
                },
                "DmpLymphedema_following_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpLymphedema_following_E.i18n' ),
                    "hint": "Geben Sie bitte an, ob bei der Patientin ein Lymphödem besteht. Sollte dies nicht der Fall sein, kreuzen Sie bitte „Nein“ an.",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpLymphedema_following_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpLymphedema_following_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                // HGV
                "DmpHearingAidFirstMedication_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHearingAidFirstMedication_E.i18n' ),
                    "hint": "Pflichtfeld",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpHearingAidFirstMedication_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "UNKNOWN",
                            i18n: i18n( 'activity-schema.DmpHearingAidFirstMedication_E.UNKNOWN.i18n' ),
                            "-de": "nicht bekannt"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpHearingAidFirstMedication_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpHearingAidType_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHearingAidType_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "IO",
                            i18n: i18n( 'activity-schema.DmpHearingAidType_E.IO.i18n' ),
                            "-de": "IO"
                        },
                        {
                            "val": "HDO",
                            i18n: i18n( 'activity-schema.DmpHearingAidType_E.HDO.i18n' ),
                            "-de": "HdO"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpHearingAidType_E.OTHER.i18n' ),
                            "-de": "andere"
                        }
                    ]
                },
                "DmpSpeechDevelopmentDisturbance_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSpeechDevelopmentDisturbance_E.i18n' ),
                    "hint": "Pflichtfeld",
                    "list": [
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpSpeechDevelopmentDisturbance_E.NO.i18n' ),
                            "-de": "Nein"
                        },
                        {
                            "val": "YES_AUDIOGEN",
                            i18n: i18n( 'activity-schema.DmpSpeechDevelopmentDisturbance_E.YES_AUDIOGEN.i18n' ),
                            "-de": "Ja, audiogen"
                        },
                        {
                            "val": "YES_OTHER_CAUSE",
                            i18n: i18n( 'activity-schema.DmpSpeechDevelopmentDisturbance_E.YES_OTHER_CAUSE.i18n' ),
                            "-de": "Ja, andere Ursache"
                        },
                        {
                            "val": "NOT_ASSESSABLE",
                            i18n: i18n( 'activity-schema.DmpSpeechDevelopmentDisturbance_E.NOT_ASSESSABLE.i18n' ),
                            "-de": "nicht beurteilbar"
                        }
                    ]
                },
                "DmpCentralAuditoryDefectExcluded_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCentralAuditoryDefectExcluded_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpCentralAuditoryDefectExcluded_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpCentralAuditoryDefectExcluded_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpSpeakingTestPossible_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSpeakingTestPossible_E.i18n' ),
                    "hint": "Pflichtfeld",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpSpeakingTestPossible_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpSpeakingTestPossible_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "dmpSpeechComprehensionMaterial_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterial_E.i18n' ),
                    "hint": "Freiburger Einsilber: Sprachverständnistest <br /> Freiburger Zahlen: Sprachverständnistest <br /> OLSA: Sprachverständnistest (Oldenburger Satztest) <br /> GÖSA: Sprachverständnistest (Göttinger Satztest)",
                    "list": [
                        {
                            "val": "FREIBURGER_SHORT",
                            i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterial_E.FREIBURGER_SHORT.i18n' ),
                            "-de": "Freiburger Einsilber"
                        },
                        {
                            "val": "FREIBURGER_NUMBERS",
                            i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterial_E.FREIBURGER_NUMBERS.i18n' ),
                            "-de": "Freiburger Zahlen"
                        },
                        {
                            "val": "OLSA",
                            i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterial_E.OLSA.i18n' ),
                            "-de": "OLSA"
                        },
                        {
                            "val": "GOESA",
                            i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterial_E.GOESA.i18n' ),
                            "-de": "GÖSA"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpSpeechComprehensionMaterial_E.OTHER.i18n' ),
                            "-de": "anderes"
                        }
                    ]
                },
                "dmpNoiseReceptionAmblyacousia_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpNoiseReceptionAmblyacousia_E.i18n' ),
                    "hint": "H90.3, H90.4, H90.5",
                    "list": [
                        {
                            "val": "LEFT",
                            i18n: i18n( 'activity-schema.DmpNoiseReceptionAmblyacousia_E.LEFT.i18n' ),
                            "-de": "links"
                        },
                        {
                            "val": "RIGHT",
                            i18n: i18n( 'activity-schema.DmpNoiseReceptionAmblyacousia_E.RIGHT.i18n' ),
                            "-de": "rechts"
                        }
                    ]
                },
                "dmpNoiseFlowAmblyacousia_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpNoiseFlowAmblyacousia_E.i18n' ),
                    "hint": "H90.0, H90.1, H90.2",
                    "list": [
                        {
                            "val": "LEFT",
                            i18n: i18n( 'activity-schema.DmpNoiseFlowAmblyacousia_E.LEFT.i18n' ),
                            "-de": "links"
                        },
                        {
                            "val": "RIGHT",
                            i18n: i18n( 'activity-schema.DmpNoiseFlowAmblyacousia_E.RIGHT.i18n' ),
                            "-de": "rechts"
                        }
                    ]
                },
                "dmpCombinedAmblyacousia_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCombinedAmblyacousia_E.i18n' ),
                    "hint": "H90.6, H90.7, H90.8",
                    "list": [
                        {
                            "val": "LEFT",
                            i18n: i18n( 'activity-schema.DmpCombinedAmblyacousia_E.LEFT.i18n' ),
                            "-de": "links"
                        },
                        {
                            "val": "RIGHT",
                            i18n: i18n( 'activity-schema.DmpCombinedAmblyacousia_E.RIGHT.i18n' ),
                            "-de": "rechts"
                        }
                    ]
                },
                "dmpAmblyacousiaSeverity_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.i18n' ),
                    "hint": "Nach WHO 2001 (Grades of hearing impairment)\n" +
                            "oder nach Ihrer Einschätzung",
                    "list": [
                        {
                            "val": "NORMAL",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.NORMAL.i18n' ),
                            "-de": "normalhörig"
                        },
                        {
                            "val": "LITTLE",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.LITTLE.i18n' ),
                            "-de": "geringgradig schwerhörig"
                        },
                        {
                            "val": "MIDDLE",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.MIDDLE.i18n' ),
                            "-de": "mittelgradig schwerhörig"
                        },
                        {
                            "val": "SEVERE",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.SEVERE.i18n' ),
                            "-de": "hochgradig schwerhörig"
                        },
                        {
                            "val": "REMAINS",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.REMAINS.i18n' ),
                            "-de": "Hörreste"
                        },
                        {
                            "val": "ANACOUSIA",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.ANACOUSIA.i18n' ),
                            "-de": "Taubheit"
                        }
                    ]
                },
                "dmpAmblyacousiaSeverityChild_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.i18n' ),
                    "hint": "Nach WHO 2001 (Grades of hearing impairment)\n" +
                            "oder nach Ihrer Einschätzung",
                    "list": [
                        {
                            "val": "NORMAL",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.NORMAL.i18n' ),
                            "-de": "normalhörig"
                        },
                        {
                            "val": "LITTLE",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.LITTLE.i18n' ),
                            "-de": "geringgradig schwerhörig"
                        },
                        {
                            "val": "MIDDLE",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.MIDDLE.i18n' ),
                            "-de": "mittelgradig schwerhörig"
                        },
                        {
                            "val": "SEVERE",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.SEVERE.i18n' ),
                            "-de": "hochgradig schwerhörig"
                        },
                        {
                            "val": "REMAINS_OR_ANACOUSIA",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverity_E.REMAINS_OR_ANACOUSIA.i18n' ),
                            "-de": "Hörreste oder Taubheit"
                        }
                    ]
                },
                "dmpAmblyacousiaSeverityWHO_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverityWHO_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "LEFT",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverityWHO_E.LEFT.i18n' ),
                            "-de": "links"
                        },
                        {
                            "val": "RIGHT",
                            i18n: i18n( 'activity-schema.DmpAmblyacousiaSeverityWHO_E.RIGHT.i18n' ),
                            "-de": "rechts"
                        }
                    ]
                },
                "dmpFurtherDiagnosis_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpFurtherDiagnosis_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "Tinnitus: H93.1, Otitis externa: H60.-",
                    "list": [
                        {
                            "val": "TINNITUS",
                            i18n: i18n( 'activity-schema.DmpFurtherDiagnosis_E.TINNITUS.i18n' ),
                            "-de": "Tinnitus"
                        },
                        {
                            "val": "OTITIS_EXTERNA",
                            i18n: i18n( 'activity-schema.DmpFurtherDiagnosis_E.OTITIS_EXTERNA.i18n' ),
                            "-de": "Otitis externa"
                        },
                        {
                            "val": "RADICAL_CAVE",
                            i18n: i18n( 'activity-schema.DmpFurtherDiagnosis_E.RADICAL_CAVE.i18n' ),
                            "-de": "Radikalhöhle"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpFurtherDiagnosis_E.OTHER.i18n' ),
                            "-de": "andere"
                        }
                    ]
                },
                "dmpAirLine_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpAirLine_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "HDO",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.HDO.i18n' ),
                            "hide": "",
                            "-de": "HdO"
                        },
                        {
                            "val": "CROS",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.CROS.i18n' ),
                            "hide": "ADULT",
                            "-de": "CROS"
                        },
                        {
                            "val": "BiCROS",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.BICROS.i18n' ),
                            "hide": "ADULT",
                            "-de": "BiCROS"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.OTHER.i18n' ),
                            "hide": "ADULT",
                            "-de": "andere"
                        },
                        {
                            "val": "IO",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.IO.i18n' ),
                            "hide": "CHILD",
                            "-de": "IO"
                        },
                        {
                            "val": "OPEN_SUPPLY",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.OPEN_SUPPLY.i18n' ),
                            "hide": "CHILD",
                            "-de": "offene Versorgung"
                        },
                        {
                            "val": "CLOSED_SUPPLY",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.CLOSED_SUPPLY.i18n' ),
                            "hide": "CHILD",
                            "-de": "geschlossene Versorgung"
                        },
                        {
                            "val": "EX_LISTENER",
                            i18n: i18n( 'activity-schema.DmpAirLine_E.EX_LISTENER.i18n' ),
                            "hide": "CHILD",
                            "-de": "Ex Hörer"
                        }
                    ]
                },
                "dmpBoneLine_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpBoneLine_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "HEAD_HOOP",
                            i18n: i18n( 'activity-schema.DmpBoneLine_E.HEAD_HOOP.i18n' ),
                            "hide": "ADULT",
                            "-de": "Kopfbügel / Stirnband"
                        },
                        {
                            "val": "BONE_LINE_HOOP",
                            i18n: i18n( 'activity-schema.DmpBoneLine_E.BONE_LINE_HOOP.i18n' ),
                            "hide": "CHILD",
                            "-de": "Knochenleitungsbügel"
                        },
                        {
                            "val": "BONE_LINE_DEVICE",
                            i18n: i18n( 'activity-schema.DmpBoneLine_E.BONE_LINE_DEVICE.i18n' ),
                            "hide": "",
                            "-de": "teilimplantiertes Knochenleitungsgerät"
                        }
                    ]
                },
                "dmpSpecialMedication_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpSpecialMedication_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "CROS_BICROS",
                            i18n: i18n( 'activity-schema.DmpSpecialMedication_E.CROS_BICROS.i18n' ),
                            "-de": "CROS / BiCROS"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpSpecialMedication_E.OTHER.i18n' ),
                            "-de": "andere"
                        }
                    ]
                },
                "dmpMedicationConform_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpMedicationConform_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpMedicationConform_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpMedicationConform_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpMedicationForFixedAmount_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpMedicationForFixedAmount_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpMedicationForFixedAmount_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpMedicationForFixedAmount_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpHearingAidSuccessDetectable_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHearingAidSuccessDetectable_E.i18n' ),
                    "hint": "Pflichtfeld",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpHearingAidSuccessDetectable_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpHearingAidSuccessDetectable_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpHearingAidSuccessMeasurementThrough_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHearingAidSuccessMeasurementThrough_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "SPEECH_AUDIOMETRY",
                            i18n: i18n( 'activity-schema.DmpHearingAidSuccessMeasurementThrough_E.SPEECH_AUDIOMETRY.i18n' ),
                            "-de": "Sprachaudiometrie"
                        },
                        {
                            "val": "PLAY_AUDIOMETRY",
                            i18n: i18n( 'activity-schema.DmpHearingAidSuccessMeasurementThrough_E.PLAY_AUDIOMETRY.i18n' ),
                            "-de": "Spielaudiometrie"
                        },
                        {
                            "val": "OTHER",
                            i18n: i18n( 'activity-schema.DmpHearingAidSuccessMeasurementThrough_E.OTHER.i18n' ),
                            "-de": "andere altersgerechte Testverfahren"
                        }
                    ]
                },
                "DmpMedicationForFree_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpMedicationForFree_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "YES",
                            i18n: i18n( 'activity-schema.DmpMedicationForFree_E.YES.i18n' ),
                            "-de": "Ja"
                        },
                        {
                            "val": "NO",
                            i18n: i18n( 'activity-schema.DmpMedicationForFree_E.NO.i18n' ),
                            "-de": "Nein"
                        }
                    ]
                },
                "DmpCooperation_E": {
                    "type": ["String"],
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpCooperation_E.i18n' ),
                    "hintLevel": "OPTIONAL",
                    "hint": "optional",
                    "list": [
                        {
                            "val": "LOGOPATH",
                            i18n: i18n( 'activity-schema.DmpCooperation_E.LOGOPATH.i18n' ),
                            "-de": "Logopäde"
                        },
                        {
                            "val": "EDUCATOR",
                            i18n: i18n( 'activity-schema.DmpCooperation_E.EDUCATOR.i18n' ),
                            "-de": "Pädagoge"
                        },
                        {
                            "val": "INSTITUTE",
                            i18n: i18n( 'activity-schema.DmpCooperation_E.INSTITUTE.i18n' ),
                            "-de": "Betreuungseinrichtung"
                        }
                    ]
                },
                "KBVMedicationPlan_T": {
                    // will set if MP was scanned
                    "identificationName": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.identificationName.i18n' ),
                        "-en": "identificationName",
                        "-de": "identificationName"
                    },
                    "medicationPlanVersion": {
                        "default": '026',
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.medicationPlanVersion.i18n' ),
                        "-en": "medicationPlanVersion",
                        "-de": "medicationPlanVersion"
                    },
                    "patientWeight": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientWeight.i18n' ),
                        "validate": "kbv.KBVMedicationPlan_T_patientWeight",
                        "-en": "Weight",
                        "-de": "Gewicht"
                    },
                    "patientHeight": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientHeight.i18n' ),
                        "validate": "kbv.KBVMedicationPlan_T_patientHeight",
                        "-en": "Height",
                        "-de": "Körpergröße"
                    },
                    "patientCreatinineValue": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientCreatinineValue.i18n' ),
                        "validate": "kbv.KBVMedicationPlan_T_patientCreatinineValue",
                        "-en": "Creatinine value",
                        "-de": "Kreatininwert"
                    },
                    "patientGender": {
                        "default": "",
                        "complex": "eq",
                        "type": "DmpGender_E",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientGender.i18n' ),
                        "lib": "person",
                        "-en": "Gender",
                        "-de": "Geschlecht"
                    },
                    "patientAllergiesAndIntolerances": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientAllergiesAndIntolerances.i18n' ),
                        "validate": "kbv.KBVMedicationPlan_T_patientAllergiesAndIntolerances",
                        "-en": "Allergies & Intolerances",
                        "-de": "Allergien & Unverträglichkeiten"
                    },
                    "patientLactation": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientLactation.i18n' ),
                        "-en": "Lactation",
                        "-de": "Stillend"
                    },
                    "patientPregnant": {
                        "type": "Boolean",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientPregnant.i18n' ),
                        "-en": "Pregnant",
                        "-de": "Schwanger"
                    },
                    "patientParameter1": {
                        "type": "String",
                        "validate": "kbv.KBVMedicationPlan_T_tildeNotAllowed",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientParameter1.i18n' ),
                        "-en": "Parameter 1",
                        "-de": "Parameter 1"
                    },
                    "patientParameter2": {
                        "type": "String",
                        "validate": "kbv.KBVMedicationPlan_T_tildeNotAllowed",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientParameter2.i18n' ),
                        "-en": "Parameter 2",
                        "-de": "Parameter 2"
                    },
                    "patientParameter3": {
                        "type": "String",
                        "validate": "kbv.KBVMedicationPlan_T_tildeNotAllowed",
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.patientParameter3.i18n' ),
                        "-en": "Parameter 3",
                        "-de": "Parameter 3"
                    },
                    "medicationPlanEntries": {
                        "complex": "inc",
                        "type": "MedicationPlanEntries_T",
                        "lib": types,
                        i18n: i18n( 'activity-schema.KBVMedicationPlan_T.medicationPlanEntries.i18n' ),
                        "-en": "Medicationplan Entries",
                        "-de": "Medikationsplaneinträge"
                    },
                    "comment": {
                        "type": "String",
                        i18n: MEDICATION_PLAN_SOURCE
                    }
                },
                "MedicationPlanEntries_T": {
                    "type": {
                        "complex": "eq",
                        "type": "MedicationPlanEntryType_E",
                        "lib": types
                    },
                    "freeText": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.MedicationPlanEntries_T.freeText.i18n' ),
                        "validate": "kbv.MedicationPlanEntries_T_freeText",
                        "-en": "Free text",
                        "-de": "Freitext"
                    },
                    "bindText": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.MedicationPlanEntries_T.bindText.i18n' ),
                        "validate": "kbv.MedicationPlanEntries_T_bindText",
                        "-en": "Bind text",
                        "-de": "Gebundener Text"
                    },
                    "medicationRecipeText": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.MedicationPlanEntries_T.medicationRecipeText.i18n' ),
                        "validate": "kbv.MedicationPlanEntries_T_medicationRecipeText",
                        "-en": "Medication recipe text",
                        "-de": "Rezeptur Text"
                    },
                    "subHeadingCode": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.MedicationPlanEntries_T.subHeadingCode.i18n' ),
                        "-en": "Sub heading code",
                        "-de": "Zwischenüberschrift Code"
                    },
                    "subHeadingText": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.MedicationPlanEntries_T.subHeadingText.i18n' ),
                        "validate": "kbv.MedicationPlanEntries_T_subHeadingText",
                        "-en": "Sub heading text",
                        "-de": "Zwischenüberschrift Text"
                    },
                    "medicationRef": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.MedicationPlanEntries_T.medicationRef.i18n' ),
                        "-en": "Medication reference",
                        "-de": "Medikament Referenz"
                    },
                    "timestamp": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.Activity_T.timestamp.i18n' ),
                        "rule-engine": {},
                        "-en": "Date",
                        "-de": "Datum"
                    },
                    "phNLabel": {
                        "default": '',
                        "validate": "kbv.MedicationPlanEntries_T_phNLabel",
                        "type": "String",
                        "apiv": {v: 2, queryParam: false},
                        i18n: i18n( 'activity-schema.Medication_T.phNLabel.i18n' ),
                        "-en": "N-labeling",
                        "-de": "N-Kennzeichnung"
                    },
                    "medicationBase": {
                        complex: "ext",
                        type: "Medication_T",
                        lib: types
                    }
                },
                "MedicationPlanEntryType_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.MedicationPlanEntryType_E.i18n' ),
                    "list": [
                        {
                            "val": "MEDICATION",
                            i18n: i18n( 'activity-schema.MedicationPlanEntryType_E.MEDICATION.i18n' ),
                            "-de": i18n( 'activity-schema.MedicationPlanEntryType_E.MEDICATION.i18n' ),
                            "-en": i18n( 'activity-schema.MedicationPlanEntryType_E.MEDICATION.i18n' )
                        },
                        {
                            "val": "FREETEXT",
                            i18n: i18n( 'activity-schema.MedicationPlanEntryType_E.FREETEXT.i18n' ),
                            "-de": i18n( 'activity-schema.MedicationPlanEntryType_E.FREETEXT.i18n' ),
                            "-en": i18n( 'activity-schema.MedicationPlanEntryType_E.FREETEXT.i18n' )
                        },
                        {
                            "val": "BINDTEXT",
                            i18n: i18n( 'activity-schema.MedicationPlanEntryType_E.BINDTEXT.i18n' ),
                            "-de": i18n( 'activity-schema.MedicationPlanEntryType_E.BINDTEXT.i18n' ),
                            "-en": i18n( 'activity-schema.MedicationPlanEntryType_E.BINDTEXT.i18n' )
                        },
                        {
                            "val": "MEDICATION_RECIPE",
                            i18n: i18n( 'activity-schema.MedicationPlanEntryType_E.MEDICATION_RECIPE.i18n' ),
                            "-de": i18n( 'activity-schema.MedicationPlanEntryType_E.MEDICATION_RECIPE.i18n' ),
                            "-en": i18n( 'activity-schema.MedicationPlanEntryType_E.MEDICATION_RECIPE.i18n' )
                        },
                        {
                            "val": "SUB_HEADING",
                            i18n: i18n( 'activity-schema.MedicationPlanEntryType_E.SUB_HEADING.i18n' ),
                            "-de": i18n( 'activity-schema.MedicationPlanEntryType_E.SUB_HEADING.i18n' ),
                            "-en": i18n( 'activity-schema.MedicationPlanEntryType_E.SUB_HEADING.i18n' )
                        }
                    ]
                },
                "QDOCU_T": {
                    "module": {
                        "complex": "eq",
                        "type": "QDocuModule_E",
                        "lib": types
                    },
                    "programmzk": {
                        "type": "String",
                        "default": "ZK",
                        "validate": 'QDocu_T_programmzk',
                        i18n: i18n( 'activity-schema.QDocu_T.programmzk.i18n' )
                    },
                    "kasseiknr": {
                        "type": "String",
                        "validate": 'QDocu_T_kasseiknr',
                        i18n: i18n( 'activity-schema.QDocu_T.kasseiknr.i18n' )
                    },
                    "versichertenstatusgkv": {
                        "type": "String",
                        "validate": 'QDocu_T_versichertenstatusgkv',
                        i18n: i18n( 'activity-schema.QDocu_T.versichertenstatusgkv.i18n' )
                    },
                    "versichertenidneu": {
                        "type": "String",
                        "validate": 'QDocu_T_versichertenidneu',
                        i18n: i18n( 'activity-schema.QDocu_T.versichertenidneu.i18n' )
                    },
                    "bsnrambulant": {
                        "type": "String",
                        "validate": 'QDocu_T_bsnrambulant',
                        i18n: i18n( 'activity-schema.QDocu_T.bsnrambulant.i18n' )
                    },
                    "nbsnrambulant": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.QDocu_T.nbsnrambulant.i18n' )
                    },
                    "lanr": {
                        "type": "String",
                        "validate": 'QDocu_T_lanr',
                        i18n: i18n( 'activity-schema.QDocu_T.lanr.i18n' )
                    },
                    "idnrpat": {
                        "type": "String",
                        "validate": 'QDocu_T_idnrpat',
                        i18n: i18n( 'activity-schema.QDocu_T.idnrpat.i18n' )
                    },
                    "gebdatum": {
                        "type": "Date",
                        "validate": 'QDocu_T_gebdatum',
                        i18n: i18n( 'activity-schema.QDocu_T.gebdatum.i18n' )
                    },
                    "datumunt": {
                        "type": "Date",
                        "validate": 'QDocu_T_datumunt',
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.datumunt.i18n' )
                    },
                    "ZKA_T": {
                        "complex": "ext",
                        "type": "ZKA_T",
                        "lib": types
                    },
                    "ZKH_T": {
                        "complex": "ext",
                        "type": "ZKH_T",
                        "lib": types
                    },
                    "ZKP_T": {
                        "complex": "ext",
                        "type": "ZKP_T",
                        "lib": types
                    },
                    "ZKZ_T": {
                        "complex": "ext",
                        "type": "ZKZ_T",
                        "lib": types
                    }
                },
                "ZKA_T": {
                    "zytbefundvorunt": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvorunt_E",
                        "validate": "QDocu_T_zytbefundvorunt",
                        "lib": types
                    },
                    "zytbefundvorunt01": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvorunt01_E",
                        "validate": 'QDocu_T_zytbefundvorunt01',
                        "lib": types
                    },
                    "zytbefundvoruntii": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntii_E",
                        "validate": 'QDocu_T_zytbefundvoruntii',
                        "lib": types
                    },
                    "zytbefundvoruntiii": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntiii_E",
                        "validate": 'QDocu_T_zytbefundvoruntiii',
                        "lib": types
                    },
                    "zytbefundvoruntiiid": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntiiid_E",
                        "validate": 'QDocu_T_zytbefundvoruntiiid',
                        "lib": types
                    },
                    "zytbefundvoruntiv": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntiv_E",
                        "validate": 'QDocu_T_zytbefundvoruntiv',
                        "lib": types
                    },
                    "zytbefundvoruntv": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntv_E",
                        "validate": 'QDocu_T_zytbefundvoruntv',
                        "lib": types
                    },
                    "hpvtvoruntvorhand": {
                        "complex": "eq",
                        "validate": "QDocu_T_hpvtvoruntvorhand",
                        "type": "QDocuJanein_E",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.hpvtvoruntvorhand.i18n' )
                    },
                    "hpvtvorbefund": {
                        "complex": "eq",
                        "type": "QDocuHpvtvorbefund_E",
                        "validate": "QDocu_T_hpvtvorbefund",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.hpvtvorbefund.i18n' )
                    },
                    "hpvvirustypvorbefund": {
                        "complex": "eq",
                        "type": "QDocuHpvvirustypvorbefund_E",
                        "validate": "QDocu_T_hpvvirustypvorbefund",
                        "lib": types
                    },
                    "zervixeinstellbar": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "lib": types,
                        "validate": "QDocu_T_zervixeinstellbar",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zervixeinstellbar.i18n' )
                    },
                    "kolposkbefund": {
                        "complex": "eq",
                        "type": "QDocuKolposkbefund_E",
                        "lib": types
                    },
                    "pzgsichtbar": {
                        "complex": "eq",
                        "type": "QDocuPzgsichtbar_E",
                        "validate": "QDocu_T_pzgsichtbar",
                        "lib": types
                    },
                    "tztyp": {
                        "complex": "eq",
                        "type": "QDocuTztyp_E",
                        "validate": "QDocu_T_tztyp",
                        "lib": types
                    },
                    "normalbefund": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_normalbefund",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.normalbefund.i18n' )
                    },
                    "gradabnbefunde": {
                        "complex": "eq",
                        "type": "QDocuGradabnbefunde_E",
                        "validate": "QDocu_T_gradabnbefunde",
                        "lib": types
                    },
                    "verdachtais": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_verdachtais",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.verdachtais.i18n' )
                    },
                    "lokalabnbefunde": {
                        "complex": "eq",
                        "type": "QDocuLokalabnbefunde_E",
                        "validate": "QDocu_T_lokalabnbefunde",
                        "lib": types
                    },
                    "groesselaesion": {
                        "complex": "eq",
                        "type": "QDocuGroesselaesion_E",
                        "validate": "QDocu_T_groesselaesion",
                        "lib": types
                    },
                    "verdachtinvasion": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_verdachtinvasion",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.verdachtinvasion.i18n' )
                    },
                    "weiterebefunde": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_weiterebefunde",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.weiterebefunde.i18n' )
                    },
                    "kongenanomalie": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_kongenanomalie",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.kongenanomalie.i18n' )
                    },
                    "kondylome": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_kondylome",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.kondylome.i18n' )
                    },
                    "endometriose": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_endometriose",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.endometriose.i18n' )
                    },
                    "ektoendopolypen": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_ektoendopolypen",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.ektoendopolypen.i18n' )
                    },
                    "entzuendung": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_entzuendung",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.entzuendung.i18n' )
                    },
                    "stenose": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_stenose",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.stenose.i18n' )
                    },
                    "postopveraend": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_postopveraend",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.postopveraend.i18n' )
                    },
                    "sonstweitbefunde": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_sonstweitbefunde",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstweitbefunde.i18n' )
                    },
                    "sonstbefunde": {
                        "type": "String",
                        "validate": "QDocu_T_sonstbefunde",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstbefunde.i18n' )
                    },
                    "sonstbef": {
                        "type": "String",
                        "validate": "QDocu_T_sonstbef",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstbefunde.i18n' )
                    },
                    "massnahmen": {
                        "complex": "eq",
                        "type": "QDocuMassnahmen_E",
                        "lib": types
                    },
                    "anzahlbiopsien": {
                        "type": "String",
                        "validate": "QDocu_T_anzahlbiopsien",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.anzahlbiopsien.i18n' )
                    },
                    "befundbiopskueret": {
                        "complex": "eq",
                        "type": "QDocuBefundbiopskueret_E",
                        "validate": "QDocu_T_befundbiopskueret",
                        "lib": types
                    },
                    "histobef": {
                        "complex": "eq",
                        "type": "QDocuBefundbiopskueret_E",
                        "validate": "QDocu_T_histobef",
                        "lib": types
                    },
                    "metaplasievorgaenge": {
                        "complex": "eq",
                        "type": "QDocuMetaplasievorgaenge_E",
                        "validate": "QDocu_T_metaplasievorgaenge",
                        "lib": types
                    },
                    "adenocarcinomainsitu": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_adenocarcinomainsitu",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.adenocarcinomainsitu.i18n' )
                    },
                    "invasivplattenepithelkarz": {
                        "type": "String",
                        "validate": "QDocu_T_invasivplattenepithelkarz",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.invasivplattenepithelkarz.i18n' )
                    },
                    "invasivadenokarz": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_invasivadenokarz",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.invasivadenokarz.i18n' )
                    },
                    "sonstmetaplasiebefunde": {
                        "complex": "eq",
                        "type": "QDocuJa_E",
                        "validate": "QDocu_T_sonstmetaplasiebefunde",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstmetaplasiebefunde.i18n' )
                    },
                    "sonstbefbiopskueret": {
                        "type": "String",
                        "validate": "QDocu_T_sonstbefbiopskueret",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstbefbiopskueret.i18n' )
                    },
                    "empfohlenemassnahmebiops": {
                        "complex": "eq",
                        "type": "QDocuEmpfohlenemassnahmebiops_E",
                        "lib": types
                    },
                    "empfohlenekontrabkl": {
                        "complex": "eq",
                        "type": "QDocuEmpfohlenekontrabkl_E",
                        "validate": "QDocu_T_empfohlenekontrabkl",
                        "lib": types
                    },
                    "zeithorizontkontrabkl": {
                        "complex": "eq",
                        "type": "QDocuZeithorizontkontrabkl_E",
                        "validate": "QDocu_T_zeithorizontkontrabkl",
                        "lib": types
                    },
                    "zeithorizont": {
                        "type": "String",
                        "validate": "QDocu_T_zeithorizont",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zeithorizont.i18n' )
                    },
                    "therapieempfehlung": {
                        "complex": "eq",
                        "type": "QDocuTherapieempfehlung_E",
                        "validate": "QDocu_T_therapieempfehlung",
                        "lib": types
                    },
                    "op": {
                        "complex": "eq",
                        "type": "QDocuAnamabweichvorunt_E",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.op.i18n' ),
                        "validate": "QDocu_T_op",
                        "lib": types
                    },
                    "opeingriff": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.opeingriff.i18n' ),
                        "validate": "QDocu_T_opeingriff",
                        "lib": types
                    },
                    "sonstopeingr": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstopeingr.i18n' ),
                        "validate": "QDocu_T_sonstopeingr"
                    },
                    "weiteretherapieempf": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.weiteretherapieempf.i18n' ),
                        "validate": "QDocu_T_weiteretherapieempf"
                    },
                    "opdatum": {
                        "type": "Date",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.opdatum.i18n' ),
                        "validate": "QDocu_T_opdatum"
                    },
                    "artopeingriff": {
                        "complex": "eq",
                        "type": "QDocuArtopeingriff_E",
                        "validate": "QDocu_T_artopeingriff",
                        "lib": types
                    },
                    "methokonisation": {
                        "complex": "eq",
                        "type": "QDocuMethokonisation_E",
                        "validate": "QDocu_T_methokonisation",
                        "lib": types
                    },
                    "tiefekonus": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.tiefekonus.i18n' ),
                        "validate": "QDocu_T_tiefekonus"
                    },
                    "methoexzision": {
                        "complex": "eq",
                        "type": "QDocuMethoexzision_E",
                        "validate": "QDocu_T_methoexzision",
                        "lib": types
                    },
                    "umfangexzision": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.umfangexzision.i18n' ),
                        "validate": "QDocu_T_umfangexzision"
                    },
                    "sonstopeingr2": {
                        "type": "String",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.sonstopeingr2.i18n' ),
                        "validate": "QDocu_T_sonstopeingr2"
                    },
                    "endhistolbefundvorh": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_endhistolbefundvorh",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.endhistolbefundvorh.i18n' )
                    },
                    "grading": {
                        "complex": "eq",
                        "type": "QDocuGrading_E",
                        "validate": "QDocu_T_grading",
                        "lib": types
                    },
                    "stagingfigo": {
                        "complex": "eq",
                        "type": "QDocuStagingfigo_E",
                        "validate": "QDocu_T_stagingfigo",
                        "lib": types
                    },
                    "residualstatus": {
                        "complex": "eq",
                        "type": "QDocuResidualstatus_E",
                        "validate": "QDocu_T_residualstatus",
                        "lib": types
                    },
                    "tnmpt": {
                        "complex": "eq",
                        "type": "QDocuTnmpt_E",
                        "validate": "QDocu_T_tnmpt",
                        "lib": types
                    },
                    "tnmpn": {
                        "complex": "eq",
                        "type": "QDocuTnmpn_E",
                        "validate": "QDocu_T_tnmpn",
                        "lib": types
                    },
                    "tnmpm": {
                        "complex": "eq",
                        "type": "QDocuTnmpm_E",
                        "validate": "QDocu_T_tnmpm",
                        "lib": types
                    }
                },
                "ZKH_T": {
                    "untersuchungsnummer": {
                        "type": "String",
                        "validate": 'QDocu_T_untersuchungsnummer',
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.untersuchungsnummer.i18n' )
                    },
                    "untersuchung": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": 'QDocu_T_untersuchung',
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.untersuchung.i18n' )
                    },
                    "pznvorhanden": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": 'QDocu_T_pznvorhanden',
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.pznvorhanden.i18n' )
                    },
                    "pzn": {
                        "type": "String",
                        "validate": 'QDocu_T_pzn',
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.pzn.i18n' )
                    },
                    "produkt": {
                        "type": "String",
                        "validate": 'QDocu_T_produkt',
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.produkt.i18n' )
                    },
                    "hpvtergebnis": {
                        "complex": "eq",
                        "type": "QDocuHpvtergebnis_E",
                        "lib": types,
                        "validate": 'QDocu_T_hpvtergebnis',
                        i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.hpvtergebnis.i18n' )
                    },
                    "hpvvirustyp": {
                        "complex": "eq",
                        "type": "QDocuHpvvirustyp_E",
                        "validate": 'QDocu_T_hpvvirustyp',
                        "lib": types
                    },
                    "welchhpvtyp": {
                        "complex": "eq",
                        "type": "QDocuWelchhpvtyp_E",
                        "validate": 'QDocu_T_welchhpvtyp',
                        "lib": types
                    }
                },
                "ZKP_T": {
                    "plz3stellig": {
                        "type": "String",
                        "validate": "QDocu_T_plz3stellig",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.plz3stellig.i18n' )
                    },
                    "hpvimpfung": {
                        "complex": "eq",
                        "type": "QDocuHpvimpfung_E",
                        "lib": types
                    },
                    "herkunftimpfstatus": {
                        "complex": "eq",
                        "type": "QDocuHerkunftimpfstatus_E",
                        "validate": "QDocu_T_herkunftimpfstatus",
                        "lib": types
                    },
                    "artuanlunt": {
                        "complex": "eq",
                        "type": "QDocuArtuanlunt_E",
                        "lib": types
                    },
                    "befundevoruntvorh": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_befundevoruntvorh",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.befundevoruntvorh.i18n' )
                    },
                    "herkunftergebvoru": {
                        "complex": "eq",
                        "type": "QDocuHerkunftergebvoru_E",
                        "validate": "QDocu_T_herkunftergebvoru",
                        "lib": types
                    },
                    "voruntdatum": {
                        "type": "String",
                        "validate": "QDocu_T_voruntdatum",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.voruntdatum.i18n' )
                    },
                    "zytbefundvoruntvorh": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_zytbefundvoruntvorh",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefundvoruntvorh.i18n' )
                    },
                    "sonstbefunde": {
                        "type": "String",
                        "validate": "QDocu_T_sonstbefunde",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.sonstbefunde.i18n' )
                    },
                    "karzinomtyp": {
                        "type": "String",
                        "validate": "QDocu_T_karzinomtyp",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.karzinomtyp.i18n' )
                    },
                    "karzinomtyp2": {
                        "type": "String",
                        "validate": "QDocu_T_karzinomtyp2",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.karzinomtyp.i18n' )
                    },
                    "anamabweichvorunt": {
                        "complex": "eq",
                        "type": "QDocuAnamabweichvorunt_E",
                        "validate": "QDocu_T_anamabweichvorunt",
                        "lib": types
                    },
                    "ausflusspathblutung": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_ausflusspathblutung",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.ausflusspathblutung.i18n' )
                    },
                    "iup": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_uip",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.iup.i18n' )
                    },
                    "hormonanwendungen": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_hormonanwendungen",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.hormonanwendungen.i18n' )
                    },
                    "gynopradiatio": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_gynopradiatio",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.gynopradiatio.i18n' )
                    },
                    "graviditaet": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "lib": types,
                        "validate": "QDocu_T_graviditaet",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.graviditaet.i18n' )
                    },
                    "klinischerbefund": {
                        "complex": "eq",
                        "type": "QDocuKlinischerbefund_E",
                        "lib": types
                    },
                    "zytbefund": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvorunt_E",
                        "lib": types,
                        "validate": "QDocu_T_zytbefund",
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefund.i18n' )
                    },
                    "zytbefund01": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvorunt01_E",
                        "validate": "QDocu_T_zytbefund01",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefund01.i18n' )
                    },
                    "zytbefundii": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntii_E",
                        "validate": "QDocu_T_zytbefundii",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefundii.i18n' )
                    },
                    "zytbefundiii": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntiii_E",
                        "validate": "QDocu_T_zytbefundiii",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefundiii.i18n' )
                    },
                    "zytbefundiiid": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntiiid_E",
                        "validate": "QDocu_T_zytbefundiiid",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefundiiid.i18n' )
                    },
                    "zytbefundiv": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntiv_E",
                        "validate": "QDocu_T_zytbefundiv",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefundiv.i18n' )
                    },
                    "zytbefundv": {
                        "complex": "eq",
                        "type": "QDocuZytbefundvoruntv_E",
                        "validate": "QDocu_T_zytbefundv",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.zytbefundv.i18n' )
                    },
                    "hpvtest": {
                        "complex": "eq",
                        "type": "QDocuJanein_E",
                        "validate": "QDocu_T_hpvtest",
                        "lib": types,
                        i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.hpvtest.i18n' )
                    },
                    "histologvorbefundvorunt": {
                        "complex": "eq",
                        "type": "QDocuHistologvorbefundvorunt_E",
                        "validate": "QDocu_T_histologvorbefundvorunt",
                        "lib": types
                    },
                    "empfohlenemassnahme": {
                        "complex": "eq",
                        "type": "QDocuEmpfohlenemassnahme_E",
                        "lib": types
                    }
                },
                "ZKZ_T": {
                    "methoabstrentnahme": {
                        "complex": "eq",
                        "type": "QDocuMethoabstrentnahme_E",
                        "lib": types
                    }
                },
                "QDocuMethoabstrentnahme_E": {
                    "type": "String",
                    "validate": "QDocu_T_methoabstrentnahme",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKZ_T.methoabstrentnahme.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHistologvorbefundvorunt_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.1.i18n' ),
                            "-de": "Konventioneller Abstrich"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.2.i18n' ),
                            "-de": "Dünnschichtzytologie"
                        }
                    ]
                },
                "QDocuHistologvorbefundvorunt_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.histologvorbefundvorunt.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHistologvorbefundvorunt_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.3.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "es liegt kein histologischer Vorbefund vor"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.1.i18n' ),
                            "-de": "Normalbefund"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Dysplasievorgänge"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "es liegt kein histologischer Vorbefund vor"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.9.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "unbekannt"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.1_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "CIN1 (LSIL)"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.2_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "CIN2 (HSIL)"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.3_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "CIN3 (HSIL)"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.5.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Adenocarcinoma in situ (AIS)"
                        },
                        {
                            "val": "6",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.6.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Plattenepithelkarzinom"
                        },
                        {
                            "val": "7",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.7.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Adenokarzinom"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.8.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "anderes Karzinom"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.9_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "nicht beurteilbar"
                        },
                        {
                            "val": "88",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.88.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "sonstige Befunde"
                        }
                    ]
                },
                "QDocuKlinischerbefund_E": {
                    "type": "String",
                    "validate": "QDocu_T_klinischerbefund",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.klinischerbefund.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuKlinischerbefund_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuKlinischerbefund_E.1.i18n' ),
                            "-de": "auffällig"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuKlinischerbefund_E.2.i18n' ),
                            "-de": "unauffällig"
                        }
                    ]
                },
                "QDocuAnamabweichvorunt_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.anamabweichvorunt.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuAnamabweichvorunt_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuAnamabweichvorunt_E.1.i18n' ),
                            "-de": "nein"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuAnamabweichvorunt_E.2.i18n' ),
                            "-de": "ja"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuAnamabweichvorunt_E.3.i18n' ),
                            "-de": "unbekannt"
                        }
                    ]
                },
                "QDocuHerkunftergebvoru_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.herkunftergebvoru.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHerkunftergebvoru_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHerkunftergebvoru_E.1.i18n' ),
                            "-de": "durch Arztdokumentation"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHerkunftergebvoru_E.2.i18n' ),
                            "-de": "durch Patientenangabe"
                        }
                    ]
                },
                "QDocuArtuanlunt_E": {
                    "type": "String",
                    "validate": "QDocu_T_artuanlunt",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.artuanlunt.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuArtuanlunt_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuArtuanlunt_E.1.i18n' ),
                            "-de": "Primärscreening mittels zytologischer Untersuchung"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuArtuanlunt_E.2.i18n' ),
                            "-de": "Primärscreening mittels Ko-Testung (Zytologie und HPV-Test)"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuArtuanlunt_E.3.i18n' ),
                            "-de": "Abklärungsuntersuchung"
                        }
                    ]
                },
                "QDocuHerkunftimpfstatus_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.herkunftimpfstatus.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHerkunftimpfstatus_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHerkunftimpfstatus_E.1.i18n' ),
                            "-de": "durch schriftl. Dokumentation"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHerkunftimpfstatus_E.2.i18n' ),
                            "-de": "durch Selbstauskunft der Versicherten"
                        }
                    ]
                },
                "QDocuHpvimpfung_E": {
                    "type": "String",
                    "validate": "QDocu_T_hpvimpfung",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.hpvimpfung.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHpvimpfung_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvimpfung_E.1.i18n' ),
                            "-de": "vollständig"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvimpfung_E.2.i18n' ),
                            "-de": "unvollständig"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvimpfung_E.3.i18n' ),
                            "-de": "keine"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvimpfung_E.9.i18n' ),
                            "-de": "unklar"
                        }
                    ]
                },
                "QDocuEmpfohlenemassnahme_E": {
                    "type": "String",
                    "validate": "QDocu_T_empfohlenemassnahme",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKP_T.empfohlenemassnahme.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.ObservationTherapyStatus_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenemassnahme_E.0.i18n' ),
                            "-de": "keine zusätzlichen Untersuchungen"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenemassnahme_E.1.i18n' ),
                            "-de": "weitere Kontrolle/Abklärung"
                        }
                    ]
                },
                "QDocuTnmpm_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.tnmpm.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuTnmpm_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpm_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "M0"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpm_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "M1"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpm_E.9.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "unbekannt"
                        },
                        {
                            "val": "M0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpm_E.1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "M0"
                        },
                        {
                            "val": "M1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpm_E.2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "M1"
                        }
                    ]
                },
                "QDocuTnmpn_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.tnmpn.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuTnmpn_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "N0"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "N1"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Nx"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.9.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "unbekannt"
                        },
                        {
                            "val": "N0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "N0"
                        },
                        {
                            "val": "N1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "N1"
                        },
                        {
                            "val": "Nx",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpn_E.3.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Nx"
                        }
                    ]
                },
                "QDocuTnmpt_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.tnmpt.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuTnmpt_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Tis"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "T1"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "T2"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.4.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "T3"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.5.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "T4"
                        },
                        {
                            "val": "6",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.5.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Tx"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.9.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "unbekannt"
                        },
                        {
                            "val": "T1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1"
                        },
                        {
                            "val": "T1a",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1a.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1a"
                        },
                        {
                            "val": "T1a1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1a1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1a1"
                        },
                        {
                            "val": "T1a2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1a2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1a2"
                        },
                        {
                            "val": "T1b",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1b.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1b"
                        },
                        {
                            "val": "T1b1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1b1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1b1"
                        },
                        {
                            "val": "T1b2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T1b2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T1b2"
                        },
                        {
                            "val": "T2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T2"
                        },
                        {
                            "val": "T2a1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T2a1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T2a1"
                        },
                        {
                            "val": "T2a2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T2a2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T2a2"
                        },
                        {
                            "val": "T2b",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T2b.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T2b"
                        },
                        {
                            "val": "T3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T3.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T3"
                        },
                        {
                            "val": "T3a",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T3a.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T3a"
                        },
                        {
                            "val": "T3b",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T3b.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T3b"
                        },
                        {
                            "val": "T4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.T4.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "T4"
                        },
                        {
                            "val": "Tis",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.Tis.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Tis"
                        },
                        {
                            "val": "Tx",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTnmpt_E.Tx.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Tx"
                        }
                    ]
                },
                "QDocuStagingfigo_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.stagingfigo.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuStagingfigo_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Stadium 0"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Stadium I"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Stadium II"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.4.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Stadium III"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.5.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Stadium IV"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.9.i18n' ),
                            "-de": "unbekannt"
                        },
                        {
                            "val": "I",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.I.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "I"
                        },
                        {
                            "val": "IA",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IA.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IA"
                        },
                        {
                            "val": "IA1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IA1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IA1"
                        },
                        {
                            "val": "IA2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IA2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IA2"
                        },
                        {
                            "val": "IB",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IB.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IB"
                        },
                        {
                            "val": "IB1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IB1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IB1"
                        },
                        {
                            "val": "IB2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IB2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IB2"
                        },
                        {
                            "val": "IB3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IB3.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IB3"
                        },
                        {
                            "val": "II",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.II.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "II"
                        },
                        {
                            "val": "IIA",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIA.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIA"
                        },
                        {
                            "val": "IIA1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIA1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIA1"
                        },
                        {
                            "val": "IIA2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIA2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIA2"
                        },
                        {
                            "val": "IIB",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIB.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIB"
                        },
                        {
                            "val": "III",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.III.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "III"
                        },
                        {
                            "val": "IIIA",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIIA.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIIA"
                        },
                        {
                            "val": "IIIB",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIIB.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIIB"
                        },
                        {
                            "val": "IIIC",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIC.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIIC"
                        },
                        {
                            "val": "IIIC1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIIC1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIIC1"
                        },
                        {
                            "val": "IIIC2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IIIC2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IIIC2"
                        },
                        {
                            "val": "IV",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IV.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IV"
                        },
                        {
                            "val": "IVA",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IVA.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IVA"
                        },
                        {
                            "val": "IVB",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuStagingfigo_E.IVB.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "IVB"
                        }
                    ]
                },
                "QDocuResidualstatus_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.residualstatus.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuResidualstatus_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "R0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuResidualstatus_E.R0.i18n' ),
                            "-de": "R0"
                        },
                        {
                            "val": "R1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuResidualstatus_E.R1.i18n' ),
                            "-de": "R1"
                        },
                        {
                            "val": "R2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuResidualstatus_E.R2.i18n' ),
                            "-de": "R2"
                        },
                        {
                            "val": "Rx",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuResidualstatus_E.Rx.i18n' ),
                            "-de": "Rx"
                        }
                    ]
                },
                "QDocuGrading_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.grading.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuGrading_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "G1"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "G2"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "G3"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.4.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "G4"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.5.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Gx"
                        },
                        {
                            "val": "G1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.1.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "G1"
                        },
                        {
                            "val": "G2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "G2"
                        },
                        {
                            "val": "G3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.3.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "G3"
                        },
                        {
                            "val": "G4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.4.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "G4"
                        },
                        {
                            "val": "Gx",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGrading_E.5.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Gx"
                        }
                    ]
                },
                "QDocuMethoexzision_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.methoexzision.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuMethoexzision_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethoexzision_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Spindelförmige Exzision"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethoexzision_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Keilexzision"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethoexzision_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Shave-Exzision"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethoexzision_E.4.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Exzisionstyp 1"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethoexzision_E.5.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Exzisionstyp 2"
                        },
                        {
                            "val": "6",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethoexzision_E.6.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Exzisionstyp 3"
                        }
                    ]
                },
                "QDocuMethokonisation_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.methokonisation.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuMethokonisation_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethokonisation_E.1.i18n' ),
                            "-de": "Messer-/Skalpellkonisation"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethokonisation_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Elektr. Schlingenkonisation"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethokonisation_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Laserkonisation"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethokonisation_E.2_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Schlingenexzision"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethokonisation_E.3_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Laserexzision"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMethokonisation_E.8.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Sonstige"
                        }
                    ]
                },
                "QDocuArtopeingriff_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.artopeingriff.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuArtopeingriff_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuArtopeingriff_E.1.i18n' ),
                            "-de": "Konisation"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuArtopeingriff_E.2.i18n' ),
                            "-de": "Exzision"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuArtopeingriff_E.3.i18n' ),
                            "-de": "Sonstiger"
                        }
                    ]
                },
                "QDocuZeithorizontkontrabkl_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zeithorizontkontrabkl.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZeithorizontkontrabkl_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZeithorizontkontrabkl_E.1_2021.i18n' ),
                            "notYearAndModule": ['ZKA-2021'],
                            "-de": "unverzüglich"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZeithorizontkontrabkl_E.1.i18n' ),
                            "yearAndModule": ['ZKA-2021'],
                            "-de": "sofort"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZeithorizontkontrabkl_E.2.i18n' ),
                            "-de": "in einem/mehreren Monat/en"
                        }
                    ]
                },
                "QDocuTherapieempfehlung_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.therapieempfehlung.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuTherapieempfehlung_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTherapieempfehlung_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Konisation"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTherapieempfehlung_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Exzision"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTherapieempfehlung_E.3.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Sonstige operative Eingriffe"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTherapieempfehlung_E.2.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Exzision"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTherapieempfehlung_E.3.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Sonstige operative Eingriffe"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTherapieempfehlung_E.8.i18n' ),
                            "-de": "Weitere Therapieempfehlungen"
                        }
                    ]
                },
                "QDocuMetaplasievorgaenge_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.metaplasievorgaenge.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuMetaplasievorgaenge_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.1.i18n' ),
                            "-de": "CIN1"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.2.i18n' ),
                            "-de": "CIN2"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.3.i18n' ),
                            "-de": "CIN3"
                        }
                    ]
                },
                "QDocuBefundbiopskueret_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.befundbiopskueret.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuBefundbiopskueret_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuBefundbiopskueret_E.1.i18n' ),
                            "-de": "Normalbefund"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuBefundbiopskueret_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "Dysplasievorgänge"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.1_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "CIN1 (LSIL)"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.2_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "CIN2 (HSIL)"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMetaplasievorgaenge_E.3_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "CIN3 (HSIL)"
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.5.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Adenocarcinoma in situ (AIS)"
                        },
                        {
                            "val": "6",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.6.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Plattenepithelkarzinom"
                        },
                        {
                            "val": "7",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.7.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Adenokarzinom"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.8.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "anderes Karzinom"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.9_2021.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "nicht beurteilbar"
                        },
                        {
                            "val": "88",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHistologvorbefundvorunt_E.88.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "sonstige Befunde"
                        }
                    ]
                },
                "QDocuMassnahmen_E": {
                    "type": "String",
                    "validate": "QDocu_T_massnahmen",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.massnahmen.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuMassnahmen_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMassnahmen_E.1.i18n' ),
                            "-de": "Biopsie"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMassnahmen_E.2.i18n' ),
                            "-de": "endozervikale Kürettage"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMassnahmen_E.3.i18n' ),
                            "-de": "Keine"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMassnahmen_E.4.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Biopsie und endozervikale Kürettage"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuMassnahmen_E.8.i18n' ),
                            "-de": "Sonstige"
                        }
                    ]
                },
                "QDocuJa_E": {
                    "type": "String",
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuJa_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJa_E.1.i18n' ),
                            "-de": "ja"
                        }
                    ]
                },
                "QDocuGroesselaesion_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.groesselaesion.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuGroesselaesion_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGroesselaesion_E.1.i18n' ),
                            "-de": "1"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGroesselaesion_E.2.i18n' ),
                            "-de": "2"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGroesselaesion_E.3.i18n' ),
                            "-de": "3"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGroesselaesion_E.4.i18n' ),
                            "-de": "4"
                        }
                    ]
                },
                "QDocuGradabnbefunde_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.gradabnbefunde.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuGradabnbefunde_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGradabnbefunde_E.1.i18n' ),
                            "-de": "Minor Changes"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGradabnbefunde_E.2.i18n' ),
                            "-de": "Major Changes"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuGradabnbefunde_E.8.i18n' ),
                            "-de": "unspezifisch"
                        }
                    ]
                },
                "QDocuEmpfohlenemassnahmebiops_E": {
                    "type": "String",
                    "validate": "QDocu_T_empfohlenemassnahmebiops",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.empfohlenemassnahmebiops.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuEmpfohlenemassnahmebiops_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenemassnahmebiops_E.1.i18n' ),
                            "-de": "keine zusätzlichen Untersuchungen"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenemassnahmebiops_E.2.i18n' ),
                            "-de": "weitere Kontrolle/Abklärung"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenemassnahmebiops_E.3.i18n' ),
                            "-de": "Therapie"
                        }
                    ]
                },
                "QDocuTztyp_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.tztyp.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuTztyp_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTztyp_E.1.i18n' ),
                            "-de": "TZ1"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTztyp_E.2.i18n' ),
                            "-de": "TZ2"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuTztyp_E.3.i18n' ),
                            "-de": "TZ3"
                        }
                    ]
                },
                "QDocuLokalabnbefunde_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.lokalabnbefunde.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuLokalabnbefunde_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuLokalabnbefunde_E.1.i18n' ),
                            "-de": "Lokalisation innerhalb TZ"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuLokalabnbefunde_E.2.i18n' ),
                            "-de": "Lokalisation außerhalb TZ"
                        }
                    ]
                },
                "QDocuEmpfohlenekontrabkl_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.empfohlenekontrabkl.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuEmpfohlenekontrabkl_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenekontrabkl_E.1.i18n' ),
                            "-de": "zytologische Untersuchung"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenekontrabkl_E.2.i18n' ),
                            "-de": "HPV-Test"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenekontrabkl_E.3.i18n' ),
                            "-de": "Ko-Testung (Zytologie und HPV-Test)"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuEmpfohlenekontrabkl_E.4.i18n' ),
                            "-de": "Kolposkopie"
                        }
                    ]
                },
                "QDocuPzgsichtbar_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.pzgsichtbar.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuPzgsichtbar_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuPzgsichtbar_E.1.i18n' ),
                            "-de": "vollständig sichtbar"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuPzgsichtbar_E.2.i18n' ),
                            "-de": "teilweise sichtbar"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuPzgsichtbar_E.3.i18n' ),
                            "-de": "nicht sichtbar"
                        }
                    ]
                },
                "QDocuKolposkbefund_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.kolposkbefund.i18n' ),
                    "validate": "QDocu_T_kolposkbefund",
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuKolposkbefund_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuKolposkbefund_E.0.i18n' ),
                            "-de": "inadäquat"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuKolposkbefund_E.1.i18n' ),
                            "-de": "adäquat"
                        }
                    ]
                },
                "QDocuHpvvirustypvorbefund_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.hpvvirustypvorbefund.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHpvvirustypvorbefund_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustypvorbefund_E.1.i18n' ),
                            "-de": "HPV-Typen 16"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustypvorbefund_E.2.i18n' ),
                            "-de": "HPV-Typen 18"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustypvorbefund_E.3.i18n' ),
                            "-de": "weitere High Risk HPV-Typen"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustypvorbefund_E.4.i18n' ),
                            "-de": "unbekannt"
                        }
                    ]

                },
                "QDocuZytbefundvoruntv_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvoruntv.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvoruntv_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.1.i18n' ),
                            "-de": "V-p"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.2.i18n' ),
                            "-de": "V-g"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.3.i18n' ),
                            "-de": "V-e"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.4.i18n' ),
                            "-de": "V-x"
                        }
                    ]
                },
                "QDocuZytbefundvoruntiv_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvoruntiv.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvoruntiv_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.1.i18n' ),
                            "-de": "IVa-p"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.2.i18n' ),
                            "-de": "IVa-g"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.3.i18n' ),
                            "-de": "IVb-p"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.4.i18n' ),
                            "-de": "IVb-g"
                        }
                    ]
                },
                "QDocuZytbefundvoruntiiid_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvoruntiiid.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvoruntiiid_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiiid_E.1.i18n' ),
                            "-de": "IIID1"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiiid_E.2.i18n' ),
                            "-de": "IIID2"
                        }
                    ]
                },
                "QDocuZytbefundvoruntiii_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvoruntiii.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvoruntiii_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.1.i18n' ),
                            "-de": "III-p"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.2.i18n' ),
                            "-de": "III-g"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.3.i18n' ),
                            "-de": "III-e"
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.4.i18n' ),
                            "-de": "III-x"
                        }
                    ]
                },
                "QDocuZytbefundvoruntii_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvoruntii.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvoruntii_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntii_E.1.i18n' ),
                            "-de": "II-p"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntii_E.2.i18n' ),
                            "-de": "II-g"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntii_E.3.i18n' ),
                            "-de": "II-e"
                        }
                    ]
                },
                "QDocuZytbefundvorunt01_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvorunt01.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvorunt01_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt01_E.1.i18n' ),
                            "-de": "0"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt01_E.2.i18n' ),
                            "-de": "I"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt01_E.3.i18n' ),
                            "-de": "II-a"
                        }
                    ]
                },
                "QDocuZytbefundvorunt_E": {
                    "type": "String",
                    "validate": 'QDocu_T_zytbefundvorunt',
                    i18n: i18n( 'activity-schema.QDocu_T.ZKA_T.zytbefundvorunt.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuZytbefundvorunt_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt_E.1.i18n' ),
                            "-de": "Gruppe 0/I",
                            "yearsNotAvailable": ['2021']
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt_E.2.i18n' ),
                            "-de": "Gruppe II",
                            "yearsNotAvailable": ['2021']
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt_E.3.i18n' ),
                            "-de": "Gruppe III",
                            "yearsNotAvailable": ['2021']
                        },
                        {
                            "val": "4",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt_E.4.i18n' ),
                            "-de": "Gruppe IIID",
                            "yearsNotAvailable": ['2021']
                        },
                        {
                            "val": "5",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt_E.5.i18n' ),
                            "-de": "Gruppe IV",
                            "yearsNotAvailable": ['2021']
                        },
                        {
                            "val": "6",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt_E.6.i18n' ),
                            "-de": "Gruppe V",
                            "yearsNotAvailable": ['2021']
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt01_E.1.i18n' ),
                            "-de": "0",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "I",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt01_E.2.i18n' ),
                            "-de": "I",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "II-a",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvorunt01_E.3.i18n' ),
                            "-de": "II-a",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "II-e",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntii_E.3.i18n' ),
                            "-de": "II-e",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "II-g",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntii_E.2.i18n' ),
                            "-de": "II-g",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "II-p",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntii_E.1.i18n' ),
                            "-de": "II-p",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "III-e",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.3.i18n' ),
                            "-de": "III-e",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "III-g",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.2.i18n' ),
                            "-de": "III-g",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "III-p",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.1.i18n' ),
                            "-de": "III-p",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "III-x",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiii_E.4.i18n' ),
                            "-de": "III-x",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "IIID1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiiid_E.1.i18n' ),
                            "-de": "IIID1",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "IIID2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiiid_E.2.i18n' ),
                            "-de": "IIID2",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "IVa-g",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.2.i18n' ),
                            "-de": "IVa-g",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "IVa-p",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.1.i18n' ),
                            "-de": "IVa-p",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "IVb-g",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.4.i18n' ),
                            "-de": "IVb-g",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "IVb-p",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntiv_E.3.i18n' ),
                            "-de": "IVb-p",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "V-e",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.3.i18n' ),
                            "-de": "V-e",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "V-g",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.2.i18n' ),
                            "-de": "V-g",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "V-p",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.1.i18n' ),
                            "-de": "V-p",
                            "yearsAvailable": ['2021']
                        },
                        {
                            "val": "V-x",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuZytbefundvoruntv_E.4.i18n' ),
                            "-de": "V-x",
                            "yearsAvailable": ['2021']
                        }
                    ]
                },
                "QDocuHpvvirustyp_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.hpvvirustyp.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHpvvirustyp_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustyp_E.1.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "HPV-Typen 16"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustyp_E.2.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "HPV-Typen 18"
                        },
                        {
                            "val": "8",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvvirustyp_E.8.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "weitere High Risk HPV-Typen"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJanein_E.nein.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "nein"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJanein_E.ja.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "ja"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuWelchhpvtyp_E.9.i18n' ),
                            "yearsAvailable": ['2021'],
                            "-de": "Nicht differenzierbar"
                        }
                    ]
                },
                "QDocuWelchhpvtyp_E": {
                    "type": "String",
                    i18n: i18n( 'activity-schema.QDocu_T.ZKH_T.welchhpvtyp.i18n' ),
                    list: [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHpvvirustyp_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuWelchhpvtyp_E.1.i18n' ),
                            "-de": "16"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuWelchhpvtyp_E.2.i18n' ),
                            "-de": "18"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuWelchhpvtyp_E.3.i18n' ),
                            "-de": "Beide"
                        },
                        {
                            "val": "9",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuWelchhpvtyp_E.9.i18n' ),
                            "-de": "Nicht differenzierbar"
                        }
                    ]
                },
                "QDocuHpvtvorbefund_E": {
                    "type": "String",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHpvtergebnis_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.positiv.i18n' ),
                            "-de": "positiv"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.negativ.i18n' ),
                            "-de": "negativ"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.nichtVerwendbar.i18n' ),
                            "yearsNotAvailable": ['2021'],
                            "-de": "nicht verwertbar"
                        }
                    ]
                },
                "QDocuHpvtergebnis_E": {
                    "type": "String",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuHpvtergebnis_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.positiv.i18n' ),
                            "-de": "positiv"
                        },
                        {
                            "val": "2",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.negativ.i18n' ),
                            "-de": "negativ"
                        },
                        {
                            "val": "3",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.nichtVerwendbar.i18n' ),
                            "-de": "nicht verwertbar"
                        }
                    ]
                },
                "QDocuJanein_E": {
                    "type": "String",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuJanein_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJanein_E.nein.i18n' ),
                            "-de": "nein"
                        },
                        {
                            "val": "1",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJanein_E.ja.i18n' ),
                            "-de": "ja"
                        }
                    ]
                },
                "QDocuHpvtvoruntvorhand_E": {
                    "type": "String",
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'activity-schema.QDocuJanein_E.' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "0",
                            "yearsNotAvailable": ['2021'],
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJanein_E.nein.i18n' ),
                            "-de": "nein"
                        },
                        {
                            "val": "1",
                            "yearsNotAvailable": ['2021'],
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuJanein_E.ja.i18n' ),
                            "-de": "ja"
                        },
                        {
                            "val": "1",
                            "yearsNotAvailable": ['2021'],
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.positiv.i18n' ),
                            "-de": "positiv"
                        },
                        {
                            "val": "2",
                            "yearsAvailable": ['2021'],
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.negativ.i18n' ),
                            "-de": "negativ"
                        },
                        {
                            "val": "3",
                            "yearsNotAvailable": ['2021'],
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuHpvtergebnis_E.nichtVerwendbar.i18n' ),
                            "-de": "nicht verwertbar"
                        }
                    ]
                },
                "QDocuModule_E": {
                    "type": "String",
                    "validate": 'QDocu_T_module',
                    "list": [
                        {
                            "val": "",
                            "-de": "Bitte wählen …",
                            i18n: i18n( 'general.message.PLEASE_SELECT' ),
                            "-en": "Please Choose …"
                        },
                        {
                            "val": "ZKA",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuModule_E.ZKA.i18n' ),
                            "-de": "ZKA"
                        },
                        {
                            "val": "ZKH",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuModule_E.ZKH.i18n' ),
                            "-de": "ZKH"
                        },
                        {
                            "val": "ZKP",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuModule_E.ZKP.i18n' ),
                            "-de": "ZKP"
                        },
                        {
                            "val": "ZKZ",
                            i18n: i18n( 'activity-schema.QDocu_T.QDocuModule_E.ZKZ.i18n' ),
                            "-de": "ZKZ"
                        }
                    ]
                },
                // Zervix Zytologie
                "dmpZytologicalFinding_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpZytologicalFinding_E.i18n' ),
                    "validate": 'kbv.ZervixZytologie_T_dmpZytologicalFinding',
                    "default": 'unusable',
                    "hint": "optional",
                    "list": [
                        {
                            "val": "unusable",
                            i18n: i18n( 'activity-schema.DmpZytologicalFinding_E.unusable.i18n' ),
                            "-de": "unbrauchbar"
                        },
                        {
                            "val": "finding",
                            i18n: i18n( 'activity-schema.DmpZytologicalFinding_E.finding.i18n' ),
                            "-de": "Befund"
                        }
                    ]
                },
                "dmpZytologicalFindingSelection_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.i18n' ),
                    "validate": 'kbv.ZervixZytologie_T_dmpZytologicalFindingSelection',
                    "list": [
                        {
                            "val": "I",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.I.i18n' ),
                            "-de": "I"
                        },
                        {
                            "val": "II_a",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.II_a.i18n' ),
                            "-de": "II-a"
                        },
                        {
                            "val": "II_p",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.II_p.i18n' ),
                            "-de": "II-p"
                        },
                        {
                            "val": "II_g",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.II_g.i18n' ),
                            "-de": "II-g"
                        },
                        {
                            "val": "II_e",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.II_e.i18n' ),
                            "-de": "II-e"
                        },
                        {
                            "val": "III_p",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.III_p.i18n' ),
                            "-de": "III-p"
                        },
                        {
                            "val": "III_g",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.III_g.i18n' ),
                            "-de": "III-g"
                        },
                        {
                            "val": "III_e",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.III_e.i18n' ),
                            "-de": "III-e"
                        },
                        {
                            "val": "III_x",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.III_x.i18n' ),
                            "-de": "III-x"
                        },
                        {
                            "val": "IIID1",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.IIID1.i18n' ),
                            "-de": "IIID1"
                        },
                        {
                            "val": "IIID2",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.IIID2.i18n' ),
                            "-de": "IIID2"
                        },
                        {
                            "val": "IVa_p",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.IVa_p.i18n' ),
                            "-de": "IVa_p"
                        },
                        {
                            "val": "IVa_g",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.IVa_g.i18n' ),
                            "-de": "IVa-g"
                        },
                        {
                            "val": "IVb_p",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.IVb_p.i18n' ),
                            "-de": "IVb-p"
                        },
                        {
                            "val": "IVb_g",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.IVb_g.i18n' ),
                            "-de": "IVb-g"
                        },
                        {
                            "val": "V_p",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.V_p.i18n' ),
                            "-de": "V-p"
                        },
                        {
                            "val": "V_g",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.V_g.i18n' ),
                            "-de": "V-g"
                        },
                        {
                            "val": "V_e",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.V_e.i18n' ),
                            "-de": "V-e"
                        },
                        {
                            "val": "V_x",
                            i18n: i18n( 'activity-schema.DmpZytologicalFindingSelection_E.V_x.i18n' ),
                            "-de": "V-x"
                        }
                    ]
                },
                "dmpHistologicalClarificationSelection_E": {
                    "type": "String",
                    "apiv": {v: 2, queryParam: false},
                    i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.i18n' ),
                    "validate": "kbv.ZervixZytologie_T_dmpHistologicalClarificationSelection",
                    "list": [
                        {
                            "val": "Ca_Vorstufe_oder_CA",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.CaOrCaPreStage.i18n' ),
                            "-de": "kein Hinweis auf Ca-Vorstufe oder CA"
                        },
                        {
                            "val": "CIN_I",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.CIN_I.i18n' ),
                            "-de": "CIN I"
                        },
                        {
                            "val": "CIN_II",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.CIN_II.i18n' ),
                            "-de": "CIN II"
                        },
                        {
                            "val": "CIN_III",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.CIN_III.i18n' ),
                            "-de": "CIN III inlk. plattenephithales CA in situ"
                        },
                        {
                            "val": "Adenocarcinoma_in_situ",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.Adenocarcinoma_in_situ.i18n' ),
                            "-de": "Adenocarcinoma in situ"
                        },
                        {
                            "val": "Plattenepithalkarzinom_der_Cervix_uteri",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.Plattenepithalkarzinom_der_Cervix_uteri.i18n' ),
                            "-de": "Plattenepithalkarzinom der Cervix uteri"
                        },
                        {
                            "val": "Adenokarzinom_der_Cervix_uteri",
                            i18n: i18n( 'activity-schema.DmpHistologicalClarificationSelection_E.Adenokarzinom_der_Cervix_uteri.i18n' ),
                            "-de": "Adenokarzinom_der_Cervix_uteri"
                        }
                    ]
                }
            } );
        })();

        function getActivityTypes() {
            var i, result = [];
            for( i = 0; i < types.Activity_E.list.length; i++ ) {
                result.push( types.Activity_E.list[i].val );
            }
            return result;
        }

        /**
         * Deduplicate Activity_E by nameGroup if present to combine multiple actTypes.
         */
        function getNameGroupedActivityTypeConfigs() {
            var nameGroups = {};

            //should be called here to handle MEDICATIONPLAN based on countryMode
            runOnStart();

            return types.Activity_E.list.filter( function( config ) {
                if( config.nameGroup && config.nameGroup !== config.val ) {
                    return false;
                } else if( config.nameGroup ) {
                    nameGroups[config.nameGroup] = 1;
                }
                return true;
            } );
        }

        //
        // Here we set up a link between the
        // actType and its sub types, so that
        // it is clearly marked which actType
        // has which fields.
        actTypeDefns = {
            MEDICATION: ["Medication_T", "Catalog_T"],
            FROMPATIENT: ["Measurement_T"],
            MEASUREMENT: [
                "Measurement_T",
                "Catalog_T"
            ],
            SCHEIN: [
                "Schein_T",
                "BillingTrackSchein_T",
                "HasDiagnosis_T",
                "GKVSchein_T",
                "Fk4235_T",
                "Fk4244_T",
                "ScheinFlags_T"
            ],
            INVOICE: ["HasDiagnosis_T", "Price_T", "Invoice_T", "PutOnHold_T"],
            FORM: [
                "FormExtra_T",
                "FormExtraRehabilitation_T", //  for BFB 61
                "FormExtraContact_T",        //  MOJ-11944
                "HasDiagnosis_T",
                "Price_T",
                "Invoice_T",
                "KinderKrankengeld_T", //  for BFB 21
                "AU_T", //  arbeitsunfall for BFB 4
                "VerordKrankenhaus_T", //  notfall for BFB 2,
                "ScheinFlags_T", //  belegarztbehandlung for BFB 2
                "Measurement_T",
                "BaseETS_T",
                "PTV11_T"
            ],
            DOCLETTER: ["HasDiagnosis_T", "Price_T", "Invoice_T", "FormExtraContact_T", "EDocLetter_T", "KimBase_T"],
            DIAGNOSIS: ["Diagnosis_T", "Catalog_T"],
            PKVSCHEIN: [
                "Schein_T", "HasDiagnosis_T", "Fk4235_T", "BillingTrackSchein_T",
                "Fk4244_T", "PutOnHold_T", "PKVSchein_CH", "PRIVATE_CH_UVG", "PRIVATE_CH_MVG", " PRIVATE_CH_IVG", "PRIVATE_CH_VVG"],
            BGSCHEIN: [
                "Schein_T", "BGSchein_T", "HasDiagnosis_T", "Fk4235_T", "BillingTrackSchein_T",
                "Fk4244_T", "HasUvGoaeType_T"],
            AMTSSCHEIN: ["Schein_T", "AMTSSchein_T"],
            PRIVPRESCR: ["Prescription_T", "HasDiagnosis_T"],
            LONGPRESCR: ["Prescription_T", "HasDiagnosis_T"],
            PUBPRESCR: ["Prescription_T", "HasDiagnosis_T"],
            PRESCRBTM: ["Prescription_T", "HasDiagnosis_T"],
            PRESCRG: ["Prescription_T", "HasDiagnosis_T"],
            PRESCRT: ["Prescription_T", "HasDiagnosis_T"],
            PRESASSISTIVE: ["Prescription_T", "HasDiagnosis_T"],
            OBSERVATION: ["Observation_T"],
            OPHTHALMOLOGY_TONOMETRY: ["OphthalmologyTonometry_T"],
            OPHTHALMOLOGY_REFRACTION: ["OphthalmologyRefraction_T"],
            TREATMENT: [
                "Treatment_T", "Treatment_D_T", "Price_T", "HasDiagnosis_T", "Catalog_T", "Treatment_CH_T",
                "Fk5011_T",
                "Fk5012_T",
                "Fk5020_T",
                "Fk5035_T",
                "Fk5036_T",
                "Fk5042_T",
                "HasUvGoaeType_T"
            ],
            UTILITY: ["Utility_T", "Catalog_T", "HasDiagnosis_T"],
            KBVUTILITY: ["KBVUtility_T", "Utility_T", "Catalog_T", "Prescription_T"],
            KBVUTILITY2: ["KBVUtility2Base_T", "KBVUtility2_T"], // TODO: [HM] do we need all these types?
            TELECONSULT: ["Teleconsult_T", "TeleconsultParticipant_T"],
            LABREQUEST: ["LabRequest_T", "LabRequestReferral_T", "LabData_T", "Labor_T", "ScheinFlags_T", "HasDiagnosis_T"],
            LABDATA: ["LabData_T", "Labor_T"],
            REFERRAL: ["Referral_T", "Labor_T", "LabRequestReferral_T", "FormExtraContact_T", "ScheinFlags_T", "HasDiagnosis_T", "BaseETS_T", "ETSReferral_T"],
            AU: ["AU_T", "Prescription_T", "HasDiagnosis_T", "FormExtraContact_T"],
            ASSISTIVE: ["Assistive_T", "Catalog_T"],
            FINDING: ["Finding_T"],
            RECEIPT: ["Receipt_T"],
            PUBRECEIPT: ["HasDiagnosis_T"],
            QUOTATION: ["Quotation_T", "Price_T","HasDiagnosis_T"],
            CAVE: ["Cave_T"],
            MEDICATIONPLAN: ["MedicationPlan_T"],
            KBVMEDICATIONPLAN: ["KBVMedicationPlan_T"],
            HEALTHSURVEY: ["HealthExaminationSurvey_T"],
            SURGERY: ["Surgery", "Fk5035_T", "LinkedTreatment_T"],
            GRAVIDOGRAMM: ["Gravidogramm_T"],
            INGREDIENTPLAN: ["IngredientPlan_T"],
            PROCESS: ["Measurement_T", "Catalog_T"],
            INVOICEREFPVS: [ "InvoiceRefPVS_T" ],
            INVOICEREFGKV: [ "InvoiceRefGKV_T" ],
            INVOICEREF: [ "InvoiceRef_T", "HasDiagnosis_T", "PutOnHold_T" ],
            STOCKDISPENSE: ['StockDispense_T'],
            HGV: ['HGV_T'],
            HGVK: ['HGV_T'],
            ZERVIX_ZYTOLOGIE: ['ZERVIX_ZYTOLOGIE_T'],
            QDOCU: ["QDOCU_T"]
        };

        // These define the basic state machines used by different activity types.  They are common to client and server
        // and specify:
        //
        //      STATES a particular activity type may inhabit, generally.  These correspond to allowed values of the
        //      'status' property of an activity.
        //
        //      TRANSITIONS which are possible from one state to others for this activity type.  Correspond to
        //      validation methods of FSM helper object.  Clients invoke these via a REST API on CaseFileMojit
        //
        //      UI metadata, used only on the client to draw buttons, may be
        //
        transitionList = {
            delete: {
                transition: 'delete',
                i18n: i18n( 'activity-schema.transitionList.delete.i18n' ),
                '-en': 'Delete',
                '-de': 'Löschen',
                '-de-ch': 'Löschen',
                icon: 'fa-trash-o',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN

                ],
                newStatus: 'DELETED'

            },
            //  MOJ-8650 - New transition to store but not validate activities which are missing form fields
            store: {
                transition: 'store',
                i18n: i18n( 'activity-schema.transitionList.store.i18n' ),
                '-en': 'Save',
                '-de': 'Speichern',
                '-de-ch': 'Speichern',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'CREATED'
            },
            medidataFix: {
                transition: 'medidataFix',
                i18n: i18n( 'activity-schema.transitionList.medidataFix.i18n' ),
                '-en': 'Changed',
                '-de': 'Geändert',
                '-de-ch': 'Geändert',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'MEDIDATAFIXED'
            },
            validate: {
                transition: 'validate',
                i18n: i18n( 'activity-schema.transitionList.validate.i18n' ),
                '-en': 'Save',
                '-de': 'Speichern',
                '-de-ch': 'Speichern',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'VALID'
            },
            create: {
                transition: 'create',
                i18n: i18n( 'activity-schema.transitionList.create.i18n' ),
                '-en': 'Temp Save',
                '-de': 'Zwischenspeichern',
                '-de-ch': 'Zwischenspeichern',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'VALID'
            },
            approve: {
                transition: 'approve',
                i18n: i18n( 'activity-schema.transitionList.approve.i18n' ),
                '-en': 'Approve',
                '-de': 'Freigeben',
                '-de-ch': 'Freigeben',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'APPROVED'
            },
            approveandprint: {
                transition: 'approveanndprint',
                i18n: i18n( 'activity-schema.transitionList.approve.i18n' ),
                '-en': 'Approve and print',
                '-de': 'Freigeben+Druck',
                '-de-ch': 'Freigeben+Druck',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'APPROVED'
            },
            cancel: {
                transition: 'cancel',
                i18n: i18n( 'activity-schema.transitionList.cancel.i18n' ),
                '-en': 'Cancel',
                '-de': 'Stornieren',
                '-de-ch': 'Stornieren',
                icon: 'fa-trash-o',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'CANCELLED'
            },
            bill: {
                transition: 'bill',
                i18n: i18n( 'activity-schema.transitionList.bill.i18n' ),
                '-en': 'Bill',
                '-de': 'Abrechnen',
                '-de-ch': 'Abrechnen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'BILLED'
            },
            reject: {
                transition: 'reject',
                i18n: i18n( 'activity-schema.transitionList.reject.i18n' ),
                '-en': 'Reject',
                '-de': 'Ablehnen',
                '-de-ch': 'Ablehnen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'REJECTED'
            },
            pay: {
                transition: 'pay',
                i18n: i18n( 'activity-schema.transitionList.pay.i18n' ),
                '-en': 'Pay',
                '-de': 'Bezahlen',
                '-de-ch': 'Bezahlen',
                icon: 'fa-trash-o',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'PAID'
            },
            encrypt: {
                transition: 'encrypt',
                i18n: i18n( 'activity-schema.transitionList.encrypt.i18n' ),
                '-en': 'Encrypt',
                '-de': 'Verschlüsseln',
                '-de-ch': 'Verschlüsseln',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'ENCRYPTED'
            },
            send: {
                transition: 'send',
                i18n: i18n( 'activity-schema.transitionList.send.i18n' ),
                '-en': 'Send',
                '-de': 'Senden',
                '-de-ch': 'Senden',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'KBVBILLED'
            },
            repeat: {
                transition: 'repeat',
                i18n: i18n( 'activity-schema.transitionList.repeat.i18n' ),
                '-en': 'Repeat',
                '-de': 'Folgeverordnung',
                '-de-ch': 'Folgeverordnung',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: '' // does not change status
            },
            archive: {
                transition: 'archive',
                i18n: i18n( 'activity-schema.transitionList.archive.i18n' ),
                '-en': 'Archive',
                '-de': 'Archivieren',
                '-de-ch': 'Archivieren',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'ARCHIVED'
            },
            remind: {
                transition: 'remind',
                i18n: i18n( 'activity-schema.transitionList.remind.i18n' ),
                '-en': 'Remind',
                '-de': 'Erinnern',
                '-de-ch': '1. Mahnen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'REMINDED'
            },
            warn1: {
                transition: 'warn1',
                i18n: i18n( 'activity-schema.transitionList.warn1.i18n' ),
                '-en': 'Warn I',
                '-de': 'Mahnen I',
                '-de-ch': '2. Mahnen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'WARN1'
            },
            warn2: {
                transition: 'warn2',
                i18n: i18n( 'activity-schema.transitionList.warn2.i18n' ),
                '-en': 'Warn II',
                '-de': 'Mahnen II',
                '-de-ch': '3. Mahnen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'WARN2'
            },
            credit: {
                transition: 'credit',
                i18n: i18n( 'activity-schema.transitionList.credit.i18n' ),
                '-en': 'Credit',
                '-de': 'Gutschreiben',
                '-de-ch': 'Gutschreiben',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'CREDITED'
            },
            derecognize: {
                transition: 'derecognize',
                i18n: i18n( 'activity-schema.transitionList.derecognize.i18n' ),
                '-en': 'Derecognize',
                '-de': 'Ausbuchen',
                '-de-ch': 'Ausbuchen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'DERECOGNIZED'
            },
            debtcollect: {
                transition: 'debtcollect',
                i18n: i18n( 'activity-schema.transitionList.debtcollect.i18n' ),
                '-en': 'Debtcollect',
                '-de': 'Inkasso',
                '-de-ch': 'Inkasso',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'DEBTCOLLECT'
            },
            partialpay: {
                transition: 'partialpay',
                i18n: i18n( 'activity-schema.transitionList.partialpay.i18n' ),
                '-en': 'Partial Payment',
                '-de': 'Teilzahlung',
                '-de-ch': 'Teilzahlung',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'PARTIALPAYMENT'
            },
            decline: {
                transition: 'decline',
                i18n: i18n( 'activity-schema.transitionList.decline.i18n' ),
                '-en': 'Decline',
                '-de': 'Ablehnen',
                '-de-ch': 'Ablehnen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER
                ],
                newStatus: 'MEDIDATAREJECTED'
            },
            order: {
                transition: 'order',
                i18n: i18n( 'activity-schema.transitionList.order.i18n' ),
                '-en': 'Order',
                '-de': 'Bestellen',
                '-de-ch': 'Bestellen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'ORDERED'
            },
            removeFromOrder: {
                transition: 'removeFromOrder',
                i18n: i18n( 'activity-schema.transitionList.removeFromOrder.i18n' ),
                '-en': 'Remove from order',
                '-de': 'Abbestellen',
                '-de-ch': 'Abbestellen',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'VALID'
            },
            dispense: {
                transition: 'dispense',
                i18n: i18n( 'activity-schema.transitionList.dispense.i18n' ),
                '-en': 'Dispensed',
                '-de': 'Abgeben',
                '-de-ch': 'Abgeben',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'DISPENSED'
            },
            onHold: {
                transition: 'onHold',
                i18n: i18n( 'activity-schema.transitionList.onHold.i18n' ),
                '-en': 'On hold',
                '-de': 'Sperren',
                '-de-ch': 'Sperren',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'ONHOLD'
            },
            revokeWarn: {
                transition: 'revokeWarn',
                i18n: i18n( 'activity-schema.transitionList.revokeWarn.i18n' ),
                '-en': 'Revoke Warning',
                '-de': 'Mahnstopp',
                '-de-ch': 'Mahnstopp',
                icon: 'fa-check',
                accessGroups: [
                    Y.doccirrus.schemas.identity.userGroups.ADMIN,
                    Y.doccirrus.schemas.identity.userGroups.SUPPORT,
                    Y.doccirrus.schemas.identity.userGroups.CONTROLLER,
                    Y.doccirrus.schemas.identity.userGroups.USER,
                    Y.doccirrus.schemas.identity.userGroups.SUPERUSER,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACIST,
                    Y.doccirrus.schemas.identity.userGroups.PHARMACY_STAFF,
                    Y.doccirrus.schemas.identity.userGroups.PHYSICIAN
                ],
                newStatus: 'REVOKEWARN'
            }
        };
        stateMachines = {

            // General activities which do not have their own special business logic
            // NOTE: changes made here should be also made in the dc-fsm-default-created
            'dc-fsm-default': {
                'EXT_IMPORT': [
                    transitionList.delete
                ],
                'DISPATCHED': [
                    transitionList.delete,
                    transitionList.validate
                ],
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.store
                ],
                'APPROVED': [
                    transitionList.cancel
                    //transitionList.archive
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'DELETED': [], //  no leaving this state
                'CANCELLED': [], //  no leaving this state
                'ARCHIVED': [], //  no leaving this state
                'LOCKED': [] //  no leaving this state with transition change
            },

            // General activities which do not have their own special business logic, but may be stored in CREATED state
            'dc-fsm-default-created': {
                'EXT_IMPORT': [
                    transitionList.delete
                ],
                'DISPATCHED': [
                    transitionList.delete,
                    transitionList.validate
                ],
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.create,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.create,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.create,
                    transitionList.approve,
                    transitionList.store
                ],
                'APPROVED': [
                    transitionList.cancel
                    //transitionList.archive
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'DELETED': [], //  no leaving this state
                'CANCELLED': [], //  no leaving this state
                'ARCHIVED': [], //  no leaving this state
                'LOCKED': [] //  no leaving this state with transition change
            },

            //  Private treatments may now be billed outside of the CaseFile, interacting with InvoiceMojit

            'dc-fsm-treatment': {
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.store
                ],
                'APPROVED': [
                    transitionList.cancel,
                    transitionList.bill
                    //transitionList.archive
                ],
                'BILLED': [
                    //transitionList.pay        //  disabled for MOJ-9078
                    //transitionList.reject,    //  disabled for MOJ-9078
                    //transitionList.archive
                ],
                'PAID': [
                    //transitionList.archive
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'BILLINGREJECTED': [],
                'DELETED': [], //  no leaving this state
                'CANCELLED': [], //  no leaving this state
                'ARCHIVED': [] //  no leaving this state
            },

            'dc-fsm-edoc': {
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.create,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.create,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.create,
                    transitionList.store
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'APPROVED': [], // SENT this not handled by fsm
                'SENT': [],// this is set by via mongoose.update after edmp delivery was sent and also be reverted by edmp delivery if corrections needed
                'BILLED': [],
                'PAID': [],
                'BILLINGREJECTED': [],
                'DELETED': [], //  no leaving this state
                'CANCELLED': [], //  no leaving this state
                'ARCHIVED': [] //  no leaving this state
            },

            //  Some schein transitions will be invoked by backend processes interacting with KBV  TODO: update

            'dc-fsm-schein': {
                'CREATED': [
                    transitionList.validate,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.validate,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.onHold
                ],
                'APPROVED': [
                    transitionList.cancel,
                    transitionList.onHold
                ],
                'BILLED': [
                    transitionList.onHold
                ],
                'CRYPT_ERR': [
                    transitionList.encrypt
                ],
                'ENCRYPTED': [
                    transitionList.send
                ],
                'KBVERROR': [
                    transitionList.send
                ],
                'KBVBILLED': [
                    transitionList.reject
                    //transitionList.archive
                ],
                'KBVREJECTED': [
                    transitionList.renew
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'ONHOLD': [
                    transitionList.validate,
                    transitionList.delete
                ],
                'ARCHIVED': [] //  no leaving this state
            },

            //  Prescrition transitions are like the default, but can be copied with Weitere / Rezept

            'dc-fsm-prescription': {
                'EXT_IMPORT': [
                    transitionList.delete
                ],
                'DISPATCHED': [
                    transitionList.delete,
                    transitionList.validate
                ],
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.repeat,
                    transitionList.store
                ],
                'APPROVED': [
                    transitionList.cancel,
                    transitionList.repeat
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'DELETED': [], //  no leaving this state
                'CANCELLED': [], //  no leaving this state
                'ARCHIVED': [] //  no leaving this state
            },

            'dc-fsm-invoice': {
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.medidataFix,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.store,
                    transitionList.revokeWarn
                ],
                'APPROVED': [
                    transitionList.cancel,
                    transitionList.bill,
                    transitionList.partialpay,
                    transitionList.revokeWarn
                ],
                'BILLED': [
                    transitionList.credit,
                    transitionList.pay,
                    transitionList.partialpay,
                    transitionList.derecognize,
                    transitionList.remind,
                    transitionList.warn1,
                    transitionList.revokeWarn,
                    transitionList.decline
                ],
                'CREDITED': [
                    transitionList.archive,
                    transitionList.bill
                ],
                'REMINDED': [
                    transitionList.credit,
                    transitionList.derecognize,
                    transitionList.warn1,
                    transitionList.pay,
                    transitionList.bill
                ],
                'WARN1': [
                    transitionList.warn2,
                    transitionList.derecognize,
                    transitionList.debtcollect,
                    transitionList.pay,
                    transitionList.bill,
                    transitionList.credit
                ],
                'PAID': [
                    transitionList.archive,
                    transitionList.bill
                ],
                'PARTIALPAYMENT': [
                    transitionList.credit,
                    transitionList.pay,
                    transitionList.derecognize,
                    transitionList.remind,
                    transitionList.warn1,
                    transitionList.bill
                ],
                'WARN2': [
                    transitionList.debtcollect,
                    transitionList.derecognize,
                    transitionList.pay,
                    transitionList.bill,
                    transitionList.credit
                ],
                'DEBTCOLLECT': [
                    transitionList.derecognize,
                    transitionList.pay,
                    transitionList.bill
                ],
                'DERECOGNIZED': [
                    transitionList.archive,
                    transitionList.bill
                ],
                'CANCELLED': [
                    transitionList.archive
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'MEDIDATAREJECTED': [
                    transitionList.medidataFix,
                    transitionList.validate
                ],
                'MEDIDATAFIXED': [
                    transitionList.medidataFix,
                    transitionList.validate,
                    transitionList.delete
                ],
                'REVOKEWARN': [
                    transitionList.validate,
                    transitionList.delete
                ],
                'DELETED': [],                  //  no leaving this state
                'ARCHIVED': [],                 //  no leaving this state

                //  special for following invoicelog FSM states, no activity transitions triggered directly
                //  only used by INVOICEREFPKV, INVOICEREFGKV
                'ACCEPTED': [],
                'REPLACED': []

            },

            'dc-fsm-receipt': {
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.store
                ],
                'APPROVED': [
                    transitionList.cancel
                ],
                'CANCELLED': [
                    transitionList.archive
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'DELETED': [], //  no leaving this state
                'ARCHIVED': [] //  no leaving this state
            },
            'dc-fsm-kbvutility': {
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.store,
                    transitionList.repeat
                ],
                'APPROVED': [
                    transitionList.cancel,
                    transitionList.repeat
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                'DELETED': [],
                'CANCELLED': [],
                'ARCHIVED': []
            },
            'dc-fsm-medication': {
                'EXT_IMPORT': [
                    transitionList.delete
                ],
                'DISPATCHED': [
                    transitionList.delete,
                    transitionList.validate
                ],
                'CREATED': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'INVALID': [
                    transitionList.delete,
                    transitionList.validate,
                    transitionList.store,
                    transitionList.cancel
                ],
                'VALID': [
                    transitionList.delete,
                    transitionList.approve,
                    transitionList.store,
                    transitionList.dispense,
                    transitionList.order
                ],
                'APPROVED': [
                    transitionList.cancel,
                    transitionList.dispense,
                    transitionList.order,
                    transitionList.bill
                    //transitionList.archive
                ],
                'BILLED': [
                    transitionList.cancel
                ],
                'PREPARED': [
                    transitionList.delete
                ],
                "ORDERED": [
                    transitionList.dispense,
                    transitionList.cancel,
                    transitionList.removeFromOrder
                ],
                'DISPENSED': [
                    transitionList.cancel
                ],
                'DELETED': [], //  no leaving this state
                'CANCELLED': [], //  no leaving this state
                'ARCHIVED': [], //  no leaving this state
                'LOCKED': [] //  no leaving this state with transition change
            }

        };

        /*
         *  This mapping determines which types of activity may be linked to another activity
         *
         *  For example, treatments may have diagnoses, prescriptions may have medications, etc.
         *
         *  '*' wildcard may be used to allow any type
         *
         *  This does not override other rules on whether an activity is editable.
         */

        linkingRules = {
            'AU': ['DIAGNOSIS'],
            'DOCLETTER': [
                'TREATMENT', 'DIAGNOSIS', 'MEDICATION', 'FINDING', 'OBSERVATION', 'HISTORY', 'EXTERNAL', 'FROMPATIENT',
                'THERAPY', 'PROCEDERE', 'COMMUNICATION', 'PROCESS', 'FORM', 'DOCLETTERDIAGNOSIS', 'MEDICATIONPLAN', 'SURGERY', 'KBVUTILITY2'
            ],
            'DOCLETTERDIAGNOSIS': [
                'TREATMENT', 'DIAGNOSIS', 'MEDICATION', 'FINDING', 'OBSERVATION', 'HISTORY', 'EXTERNAL', 'VACCINATION', 'FROMPATIENT',
                'THERAPY', 'PROCEDERE', 'COMMUNICATION', 'PROCESS', 'FORM', 'DOCLETTERDIAGNOSIS', 'MEDICATIONPLAN', 'SURGERY'
            ],
            'FORM': [
                'TREATMENT', 'DIAGNOSIS', 'MEDICATION', 'FINDING', 'OBSERVATION', 'HISTORY', 'EXTERNAL', 'VACCINATION',
                'FROMPATIENT', 'THERAPY', 'PROCEDERE', 'UTILITY', 'ASSISTIVE', 'OPHTHALMOLOGY_TONOMETRY',
                'OPHTHALMOLOGY_REFRACTION', 'COMMUNICATION', 'FORM', 'PROCESS', 'SURGERY', 'KBVUTILITY2', "DOCLETTERDIAGNOSIS"
            ],
            'INVOICE': [
                //  contents of invoice
                'TREATMENT', 'DIAGNOSIS', 'MEDICATION',
                //  billing related activities can be linked after approval
                'RECEIPT', 'CREDITNOTE', 'REMINDER', 'WARNING1', 'WARNING2', 'BADDEBT'
            ],
            'INVOICEREF': [
                //  contents of invoice
                'TREATMENT', 'DIAGNOSIS',
                //  billing related activities can be linked after approval
                'RECEIPT', 'CREDITNOTE', 'REMINDER', 'WARNING1', 'WARNING2', 'BADDEBT'
            ],
            'INVOICEREFGKV': ['TREATMENT', 'DIAGNOSIS' ],
            'INVOICEREFPVS': ['TREATMENT', 'DIAGNOSIS' ],
            'KBVUTILITY': ['DIAGNOSIS'], // TODOOO do we allow selection from here?
            'LABREQUEST': ['DIAGNOSIS', 'FINDING', 'MEDICATION'],
            'MEDICATION': ['PRESCRT', 'PRESCRG', 'PRESCRBTM', 'PRIVPRESCR', 'LONGPRESCR', 'PUBPRESCR', 'STOCKDISPENSE', 'INVOICE'],
            'MEDICATIONPLAN': ['MEDICATION'],
            'KBVMEDICATIONPLAN': ['MEDICATION'],
            'PRESASSISTIVE': ['ASSISTIVE', 'DIAGNOSIS'],
            'PRESCRBTM': ['MEDICATION'],
            'PRESCRG': ['MEDICATION'],
            'PRESCRT': ['MEDICATION'],
            'LONGPRESCR': ['MEDICATION', 'DIAGNOSIS'],
            'PRIVPRESCR': ['MEDICATION', 'DIAGNOSIS', 'ASSISTIVE'],
            'PUBPRESCR': ['MEDICATION', 'DIAGNOSIS'],
            'PUBRECEIPT': ['TREATMENT', 'DIAGNOSIS'],
            'QUOTATION': ['TREATMENT', 'DIAGNOSIS'],
            'REFERRAL': ['DIAGNOSIS', 'FINDING', 'MEDICATION', 'HISTORY', 'PROCEDERE'],
            'SURGERY': ['TREATMENT'],
            'THERAPY': [
                'TREATMENT', 'DIAGNOSIS', 'MEDICATION', 'FINDING', 'OBSERVATION', 'HISTORY', 'EXTERNAL', 'FROMPATIENT',
                'THERAPY', 'PROCEDERE', 'COMMUNICATION', 'PROCESS', 'FORM', 'THERAPYSTEP'
            ],
            'TREATMENT': ['TREATMENT'],
            'UTILITY': ['DIAGNOSIS']
        };

        /**
         *  The following activity types are collapsed by default when turning on 'compact mode' in the casefile activity table
         *  @type {string[]}
         */

        collapseByDefaultActTypes = [
            'PRESASSISTIVE', 'PRESCRBTM', 'PRESCRG',  'PRESCRT', 'PRIVPRESCR', 'PUBPRESCR', 'LONGPRESCR',
            'MEDICATIONPLAN', 'KBVMEDICATIONPLAN', 'TREATMENT', 'INVOICE', "INVOICEREFPVS", "INVOICEREFGKV", "INVOICEREF"
        ];

        /**
         * creates content markup for Schein
         * @param {Array} fk4235Set
         * @param {String} title
         * @param {Boolean} scheinNotes
         * @return {Markup|string}
         */
        function generateSchein( fk4235Set, title, scheinNotes ) {
            const sumTreatments = function( sum, entry ){ return sum + Number( entry.fk4246 || 0 ); };
            const renderFk244Set = function( item ){
                const fk4244 = item.fk4244,
                    fk4246 = item.fk4246;
                if( fk4244 && (fk4246 || 0 === fk4246) ) {
                    return fk4244 + '/' + fk4246;
                }
            };
            var renderSchein = scheinNotes ? scheinNotes : (title || ''),
                renderBlSchein = '';

            fk4235Set.forEach( function( fk4235 ) {
                const maxTreatmentsOfInsuredPerson = fk4235.fk4252 || 0;
                const maxTreatmentsOfCareGiver = fk4235.fk4255 || 0;
                const sumTreatmentsOfInsuredPerson = (fk4235.fk4244Set || []).reduce( sumTreatments, 0 );
                const sumTreatmentsOfCareGiver = (fk4235.fk4256Set || []).reduce( sumTreatments, 0 );
                if( maxTreatmentsOfInsuredPerson ) {
                    renderBlSchein += 'Versicherter: ' + maxTreatmentsOfInsuredPerson + '/' + (maxTreatmentsOfInsuredPerson - sumTreatmentsOfInsuredPerson);
                    renderBlSchein += ' (' + fk4235.fk4244Set.map( renderFk244Set ).filter( Boolean ).join( ' ' ) + ')';
                }
                if( maxTreatmentsOfCareGiver ) {
                    if( renderBlSchein.length ) {
                        renderBlSchein += ', ';
                    }
                    renderBlSchein += 'Bezugsperson: ' + maxTreatmentsOfCareGiver + '/' + (maxTreatmentsOfCareGiver - sumTreatmentsOfCareGiver);
                    renderBlSchein += ' (' + fk4235.fk4256Set.map( renderFk244Set ).filter( Boolean ).join( ' ' ) + ')';
                }
            } );

            return renderBlSchein.length ? 'BL ' + renderBlSchein : renderSchein;
        }

        /**
         * Handles KBVMEDICATIONPLAN and MEDICATIONPLAN in actTypes list based on countryMode
         *
         * @param {Function} callback
         */
        function runOnStart( callback ) {
            var
                kbvMedicationPlanIndex = -1,
                medicationPlanIndex = -1,
                scheinIndex = -1,
                amtsScheinIndex = -1,
                bgScheinIndex = -1,
                paperDosisTypeIndex = -1;

            const DE = ' (DE)';
            const CH = ' (CH)';

            Y.doccirrus.commonutils.waitUntilCountryModeCheckAvailable( function( err ) {
                if( err ) {
                    Y.log( 'could not check country code is available ' + err, 'error', NAME );
                }
                if( Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland() ) {
                    ( types.Activity_E && types.Activity_E.list || [] ).some( function( entry, index ) {
                        if( entry.val === 'KBVMEDICATIONPLAN' ) {
                            if( Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                                if( entry.i18n.indexOf( DE ) < 0 ) {
                                    entry.i18n += DE;
                                    entry['-en'] += DE;
                                    entry['-de'] += DE;
                                }
                            } else {
                                kbvMedicationPlanIndex = index;
                            }
                            return true;
                        }
                    } );
                    if( kbvMedicationPlanIndex >= 0 ) {
                        types.Activity_E.list.splice( kbvMedicationPlanIndex, 1 );
                    }
                    ( types.Activity_E && types.Activity_E.list || [] ).some( function( entry, index ) {
                        if( !Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                            if( 'SCHEIN' === entry.val ) {
                                scheinIndex = index;
                                return true;
                            }
                        }
                    } );
                    if( scheinIndex >= 0 ) {
                        types.Activity_E.list.splice( scheinIndex, 1 );
                    }
                    ( types.Activity_E && types.Activity_E.list || [] ).some( function( entry, index ) {
                        if( !Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                            if( 'AMTSSCHEIN' === entry.val ) {
                                amtsScheinIndex = index;
                                return true;
                            }
                        }
                    } );
                    if( amtsScheinIndex >= 0 ) {
                        types.Activity_E.list.splice( amtsScheinIndex, 1 );
                    }
                    ( types.Activity_E && types.Activity_E.list || [] ).some( function( entry, index ) {
                        if( !Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                            if( 'BGSCHEIN' === entry.val ) {
                                bgScheinIndex = index;
                                return true;
                            }
                        }
                    } );
                    if( bgScheinIndex >= 0 ) {
                        types.Activity_E.list.splice( bgScheinIndex, 1 );
                    }
                    ( types.PhDosisType_E && types.PhDosisType_E.list || [] ).some( function( entry, index ) {
                        if( !Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                            if( 'PAPER' === entry.val ) {
                                paperDosisTypeIndex = index;
                                return true;
                            }
                        }
                    } );
                    if( paperDosisTypeIndex >= 0 ) {
                        types.PhDosisType_E.list.splice( paperDosisTypeIndex, 1 );
                    }
                }

                if( Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                    ( types.Activity_E && types.Activity_E.list || [] ).some( function( entry, index ) {
                        if( entry.val === 'MEDICATIONPLAN' ) {
                            if( Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland() ) {
                                if( entry.i18n.indexOf( CH ) < 0 ) {
                                    entry.i18n += CH;
                                    entry['-en'] += CH;
                                    entry['-de'] += CH;
                                }
                            } else {
                                medicationPlanIndex = index;
                            }
                            return true;
                        }
                    } );
                    if( medicationPlanIndex >= 0 ) {
                        types.Activity_E.list.splice( medicationPlanIndex, 1 );
                    }

                    _removeStatusFromList( 'MEDIDATAREJECTED', 'CH' );
                    _removeStatusFromList( 'MEDIDATAFIXED', 'CH' );
                    _removeStatusFromList( 'REVOKEWARN', 'CH' );
                    _removeStatusFromList( 'ONHOLD', 'CH' );
                }

                if( typeof callback === 'function' ) {
                    callback();
                }

                function _removeStatusFromList( status, countryMode ) {
                    var removeIndex = -1;
                    (types.ActStatus_E && types.ActStatus_E.list || []).some( function( entry, index ) {
                        if( entry.val === status ) {
                            if( !Y.doccirrus.commonutils.getCountryModeFromConfigs().includes( countryMode ) ) {
                                removeIndex = index;
                            }
                            return true;
                        }
                    } );

                    if( removeIndex >= 0 ) {
                        types.ActStatus_E.list.splice( removeIndex, 1 );
                    }
                }
            } );
        }

        utilsOphthalmology = (function initOphthalmology() {
            var
                exports = {},
                DATE_TIME_FORMAT = 'DD.MM.YYYY HH:mm',
                RE = 'RA',
                LE = 'LA',
                BE = 'BDS',
                OT_APPLIED_SET = i18n( 'InCaseMojit.casefile_detail.label.ADMINISTERED' ),
                OPHTHALMOLOGY = {
                    DATE_TIME_FORMAT: 'DD.MM.YYYY HH:mm',
                    MESSAGE_OUT_OF_RANGE: i18n( 'InCaseMojit.casefile_detailJS.message.MESSAGE_OUT_OF_RANGE' ),
                    FieldConfiguration: {
                        orSphL: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -22.25,
                            max: 17.25,
                            startAt: 0,
                            prefixedPositive: true,
                            fieldName: 'orSphL',
                            forFieldNames: ['orSphR']
                        },
                        orSphR: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -22.25,
                            max: 17.25,
                            startAt: 0,
                            prefixedPositive: true,
                            fieldName: 'orSphR',
                            forFieldNames: ['orSphL']
                        },
                        orCylL: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -8,
                            max: 8,
                            prefixedPositiveButZeroIsNegative: true,
                            fieldName: 'orCylL',
                            forFieldNames: ['orCylR']
                        },
                        orCylR: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -8,
                            max: 8,
                            prefixedPositiveButZeroIsNegative: true,
                            fieldName: 'orCylR',
                            forFieldNames: ['orCylL']
                        },
                        orAxsL: {
                            increment: 1,
                            toFixed: 0,
                            min: 0,
                            max: 180,
                            fieldName: 'orAxsL',
                            forFieldNames: ['orAxsR']
                        },
                        orAxsR: {
                            increment: 1,
                            toFixed: 0,
                            min: 0,
                            max: 180,
                            fieldName: 'orAxsR',
                            forFieldNames: ['orAxsL']
                        },
                        orAddL: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -8,
                            max: 8,
                            prefixedPositive: true,
                            fieldName: 'orAddL',
                            forFieldNames: ['orAddR']
                        },
                        orAddR: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -8,
                            max: 8,
                            prefixedPositive: true,
                            fieldName: 'orAddR',
                            forFieldNames: ['orAddL']
                        },
                        orPsmL: {
                            increment: 0.25,
                            toFixed: 2,
                            min: 0,
                            max: 20,
                            prefixedPositive: true,
                            fieldName: 'orPsmL',
                            forFieldNames: ['orPsmR']
                        },
                        orPsmR: {
                            increment: 0.25,
                            toFixed: 2,
                            min: 0,
                            max: 20,
                            prefixedPositive: true,
                            fieldName: 'orPsmR',
                            forFieldNames: ['orPsmL']
                        },
                        orAdd2L: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -8,
                            max: 8,
                            prefixedPositive: true,
                            fieldName: 'orAdd2L',
                            forFieldNames: ['orAdd2R']
                        },
                        orAdd2R: {
                            increment: 0.25,
                            toFixed: 2,
                            min: -8,
                            max: 8,
                            prefixedPositive: true,
                            fieldName: 'orAdd2R',
                            forFieldNames: ['orAdd2L']
                        },

                        orFarL: { increment: 0.1, toFixed: 1, fieldName: 'orFarL', forFieldNames: ['orFarR'] },
                        orFarR: { increment: 0.1, toFixed: 1, fieldName: 'orFarR', forFieldNames: ['orFarL'] },
                        orFarB: { increment: 0.1, toFixed: 1, fieldName: 'orFarB' },
                        orNearL: { increment: 0.1, toFixed: 1, fieldName: 'orNearL', forFieldNames: ['orNearR'] },
                        orNearR: { increment: 0.1, toFixed: 1, fieldName: 'orNearR', forFieldNames: ['orNearL'] },
                        orNearB: { increment: 0.1, toFixed: 1, fieldName: 'orNearB' },

                        orPD: { increment: 0.1, toFixed: 1, min: 50, max: 80, fieldName: 'orPD' },
                        orHSA: { increment: 0.1, toFixed: 1, min: 0, max: 20, fieldName: 'orHSA' },

                        otNCCTL: { min: 450, max: 650, toFixed: 0, fieldName: 'otNCCTL', prefixedPositive: true },
                        otNCCTR: { min: 450, max: 650, toFixed: 0, fieldName: 'otNCCTR', prefixedPositive: true },
                        otNFacL: { min: -5, max: 3, toFixed: 1, fieldName: 'otNFacL' },
                        otNFacR: { min: -5, max: 3, toFixed: 1, fieldName: 'otNFacR' },

                        otNR1: { toFixed: 0, fieldName: 'otNR1' },
                        otNL1: { toFixed: 0, fieldName: 'otNL1' },
                        otNR2: { toFixed: 0, fieldName: 'otNR2' },
                        otNL2: { toFixed: 0, fieldName: 'otNL2' },
                        otNR3: { toFixed: 0, fieldName: 'otNR3' },
                        otNL3: { toFixed: 0, fieldName: 'otNL3' },
                        otNR4: { toFixed: 0, fieldName: 'otNR4' },
                        otNL4: { toFixed: 0, fieldName: 'otNL4' },
                        otPR1: { toFixed: 0, fieldName: 'otPR1' },
                        otPL1: { toFixed: 0, fieldName: 'otPL1' },
                        otPR2: { toFixed: 0, fieldName: 'otPR2' },
                        otPL2: { toFixed: 0, fieldName: 'otPL2' },
                        otPR3: { toFixed: 0, fieldName: 'otPR3' },
                        otPL3: { toFixed: 0, fieldName: 'otPL3' },
                        otPR4: { toFixed: 0, fieldName: 'otPR4' },
                        otPL4: { toFixed: 0, fieldName: 'otPL4' },
                        otGR1: { toFixed: 0, fieldName: 'otGR1' },
                        otGL1: { toFixed: 0, fieldName: 'otGL1' },
                        otGR2: { toFixed: 0, fieldName: 'otGR2' },
                        otGL2: { toFixed: 0, fieldName: 'otGL2' },
                        otIR1: { toFixed: 0, fieldName: 'otIR1' },
                        otIL1: { toFixed: 0, fieldName: 'otIL1' },
                        otIR2: { toFixed: 0, fieldName: 'otIR2' },
                        otIL2: { toFixed: 0, fieldName: 'otIL2' }

                    }
                };

            function getOphthalmologyFieldConfiguration( fieldName ) {
                return OPHTHALMOLOGY.FieldConfiguration[fieldName];
            }

            function someEquals( value ) {
                return Boolean( value );
            }

            /**
             * compares two Arrays for same index values
             * @param {Array} left
             * @param {Array} right
             * @return {Boolean}
             */
            function doLeftEqualsRight( left, right ) {
                var
                    result = true;

                Y.each( left, function( item, index ) {
                    if( Y.Lang.isDate( item ) && Y.Lang.isDate( right[index] ) ) {
                        if( item.toJSON() !== right[index].toJSON() ) {
                            result = false;
                        }
                    }
                    else if( item !== right[index] ) {
                        result = false;
                    }
                } );
                return result;
            }

            /**
             * unknown fixed format
             * @param {Array} row
             * @param {*} value
             */
            function addIfIsValueAndFormatWithoutFixed( row, value ) {
                if( Y.Lang.isValue( value ) && '' !== value ) {
                    row.push( Y.doccirrus.comctl.numberToLocalString( value, { decimals: 1 } ) );
                }
            }

            /**
             * get an average value of those passed array entries that are values
             * @param {Array} array
             * @return {null|Number}
             */
            function getAverageValueOf( array ) {
                var
                    result = null,
                    entries = array.filter( function( entry ) {
                        return Y.Lang.isValue( entry ) && '' !== entry;
                    } ),
                    divider = entries.length;

                if( 0 !== divider ) {
                    result = entries.reduce( function( a, b ) {
                            var precision = Math.max( Y.doccirrus.comctl.numberGetPrecision( a ), Y.doccirrus.comctl.numberGetPrecision( b ) );
                            return Y.doccirrus.comctl.dcSum( a, b, precision );
                        } ) / divider;
                }

                return result;
            }

            /**
             * formats a value according to field config
             * @param {Object} parameters
             * @param {String} parameters.fieldName
             * @param {Number} parameters.value
             * @return {String}
             */
            function formatValueFromFieldConfig( parameters ) {
                var
                    fieldName = parameters.fieldName,
                    fieldConfig = getOphthalmologyFieldConfiguration( fieldName ),
                    toFixed = fieldConfig.toFixed,
                    prefixedPositive = fieldConfig.prefixedPositive,
                    prefixedPositiveButZeroIsNegative = fieldConfig.prefixedPositiveButZeroIsNegative,
                    value = parameters.value,
                    result = Y.doccirrus.comctl.numberToLocalString( value, {
                        decimals: toFixed
                    } );

                if( prefixedPositive && value >= 0 ) {
                    result = '+' + result;
                }

                if( prefixedPositiveButZeroIsNegative ) {
                    if( value === 0 ) {
                        result = '-' + result;
                    } else if( value > 0 ) {
                        result = '+' + result;
                    }
                }

                return result;

            }

            /**
             * creates NCT rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addNctRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    otNRead = model.otNRead,

                    otNR1 = model.otNR1,
                    otNR2 = model.otNR2,
                    otNR3 = model.otNR3,
                    otNR4 = model.otNR4,
                    otNCCTR = model.otNCCTR,
                    otNFacR = model.otNFacR,

                    otNL1 = model.otNL1,
                    otNL2 = model.otNL2,
                    otNL3 = model.otNL3,
                    otNL4 = model.otNL4,
                    otNCCTL = model.otNCCTL,
                    otNFacL = model.otNFacL,

                    fieldsR = [otNR1, otNR2, otNR3, otNR4, otNCCTR, otNFacR],
                    fieldsL = [otNL1, otNL2, otNL3, otNL4, otNCCTL, otNFacL],
                    leftEqualsRight = doLeftEqualsRight( fieldsL, fieldsR ),
                    row = [],
                    line,
                    tmp;

                // add left, right or both if same
                if( !leftEqualsRight && Y.Array.some( fieldsR, someEquals ) ) {
                    line = [RE + ':'];
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otNR1", "otNR2", "otNR3" & "otNR4"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otNR1, otNR2, otNR3, otNR4] ) );

                    if( tmp.length ) {
                        tmp = tmp.join( '' ) + ' mmHg';
                        line.push( tmp );
                    }
                    tmp = [];
                    if( Y.Lang.isValue( otNCCTR ) ) {
                        tmp.push( 'CCT', formatValueFromFieldConfig( { fieldName: 'otNCCTR', value: otNCCTR } ) + ' µm' );
                    }
                    if( Y.Lang.isValue( otNFacR ) ) {
                        tmp.push( 'Fak', formatValueFromFieldConfig( {
                                fieldName: 'otNFacR',
                                value: otNFacR
                            } ) + ' mmHg' );
                    }
                    if( tmp.length ) {
                        tmp = '(' + tmp.join( ' ' ) + ')';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }
                if( Y.Array.some( fieldsL, someEquals ) ) {
                    line = [];
                    if( leftEqualsRight ) {
                        line.push( BE + ':' );
                    }
                    else {
                        line.push( LE + ':' );
                    }
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otNL1", "otNL2", "otNL3" & "otNL4"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otNL1, otNL2, otNL3, otNL4] ) );

                    if( tmp.length ) {
                        tmp = tmp.join( '' ) + ' mmHg';
                        line.push( tmp );
                    }
                    tmp = [];
                    if( Y.Lang.isValue( otNCCTL ) ) {
                        tmp.push( 'CCT', formatValueFromFieldConfig( { fieldName: 'otNCCTL', value: otNCCTL } ) + ' µm' );
                    }
                    if( Y.Lang.isValue( otNFacL ) ) {
                        tmp.push( 'Fak', formatValueFromFieldConfig( {
                                fieldName: 'otNFacL',
                                value: otNFacL
                            } ) + ' mmHg' );
                    }
                    if( tmp.length ) {
                        tmp = '(' + tmp.join( ' ' ) + ')';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }

                if( row.length ) {
                    line = ['NCT'];
                    if( otNRead ) {
                        line.push( momentLocal( otNRead ).format( DATE_TIME_FORMAT ) );
                    }
                    row.unshift( line.join( ' ' ) );
                    rows.push.apply( rows, row );
                }

            }

            /**
             * creates Pascal rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addPascalRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    otPRead = model.otPRead,

                    otPR1 = model.otPR1,
                    otPR2 = model.otPR2,
                    otPR3 = model.otPR3,
                    otPR4 = model.otPR4,

                    otPL1 = model.otPL1,
                    otPL2 = model.otPL2,
                    otPL3 = model.otPL3,
                    otPL4 = model.otPL4,

                    fieldsR = [otPR1, otPR2, otPR3, otPR4],
                    fieldsL = [otPL1, otPL2, otPL3, otPL4],
                    leftEqualsRight = doLeftEqualsRight( fieldsL, fieldsR ),
                    row = [],
                    line,
                    tmp;

                // add left, right or both if same
                if( !leftEqualsRight && Y.Array.some( fieldsR, someEquals ) ) {
                    line = [RE + ':'];
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otPR1" & "otPR2" / "otPR3" & "otPR4"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otPR1, otPR2] ) );
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otPR3, otPR4] ) );
                    if( tmp.length ) {
                        tmp = tmp.join( ' / ' ) + ' mmHg';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }
                if( Y.Array.some( fieldsL, someEquals ) ) {
                    line = [];
                    if( leftEqualsRight ) {
                        line.push( BE + ':' );
                    }
                    else {
                        line.push( LE + ':' );
                    }
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otPL1" & "otPL2" / "otPL3" & "otPL4"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otPL1, otPL2] ) );
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otPL3, otPL4] ) );
                    if( tmp.length ) {
                        tmp = tmp.join( ' / ' ) + ' mmHg';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }

                if( row.length ) {
                    line = ['Pascal'];
                    if( otPRead ) {
                        line.push( momentLocal( otPRead ).format( DATE_TIME_FORMAT ) );
                    }
                    row.unshift( line.join( ' ' ) );
                    rows.push.apply( rows, row );
                }
            }

            /**
             * creates Goldmann rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addGoldmannRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    otGRead = model.otGRead,

                    otGR1 = model.otGR1,
                    otGR2 = model.otGR2,

                    otGL1 = model.otGL1,
                    otGL2 = model.otGL2,

                    fieldsR = [otGR1, otGR2],
                    fieldsL = [otGL1, otGL2],
                    leftEqualsRight = doLeftEqualsRight( fieldsL, fieldsR ),
                    row = [],
                    line,
                    tmp;

                // add left, right or both if same
                if( !leftEqualsRight && Y.Array.some( fieldsR, someEquals ) ) {
                    line = [RE + ':'];
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otGR1" & "otGR2"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otGR1, otGR2] ) );
                    if( tmp.length ) {
                        tmp = tmp.join( '' ) + ' mmHg';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }
                if( Y.Array.some( fieldsL, someEquals ) ) {
                    line = [];
                    if( leftEqualsRight ) {
                        line.push( BE + ':' );
                    }
                    else {
                        line.push( LE + ':' );
                    }
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otGL1" & "otGL2"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otGL1, otGL2] ) );
                    if( tmp.length ) {
                        tmp = tmp.join( '' ) + ' mmHg';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }

                if( row.length ) {
                    line = ['Goldmann'];
                    if( otGRead ) {
                        line.push( momentLocal( otGRead ).format( DATE_TIME_FORMAT ) );
                    }
                    row.unshift( line.join( ' ' ) );
                    rows.push.apply( rows, row );
                }
            }

            /**
             * creates iCare rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addIcareRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    otIRead = model.otIRead,

                    otIR1 = model.otIR1,
                    otIR2 = model.otIR2,

                    otIL1 = model.otIL1,
                    otIL2 = model.otIL2,

                    fieldsR = [otIR1, otIR2],
                    fieldsL = [otIL1, otIL2],
                    leftEqualsRight = doLeftEqualsRight( fieldsL, fieldsR ),
                    row = [],
                    line,
                    tmp;

                // add left, right or both if same
                if( !leftEqualsRight && Y.Array.some( fieldsR, someEquals ) ) {
                    line = [RE + ':'];
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otIR1" & "otIR2"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otIR1, otIR2] ) );
                    if( tmp.length ) {
                        tmp = tmp.join( '' ) + ' mmHg';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }
                if( Y.Array.some( fieldsL, someEquals ) ) {
                    line = [];
                    if( leftEqualsRight ) {
                        line.push( BE + ':' );
                    }
                    else {
                        line.push( LE + ':' );
                    }
                    tmp = [];
                    // since MOJ-3095 an average value is wanted of "otIL1" & "otIL2"
                    addIfIsValueAndFormatWithoutFixed( tmp, getAverageValueOf( [otIL1, otIL2] ) );
                    if( tmp.length ) {
                        tmp = tmp.join( '' ) + ' mmHg';
                        line.push( tmp );
                    }
                    row.push( line.join( ' ' ) );
                }

                if( row.length ) {
                    line = ['iCare'];
                    if( otIRead ) {
                        line.push( momentLocal( otIRead ).format( DATE_TIME_FORMAT ) );
                    }
                    row.unshift( line.join( ' ' ) );
                    rows.push.apply( rows, row );
                }
            }

            /**
             * creates applied medication rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addAppliedRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,
                    otAppliedSet = model.otAppliedSet;

                if( otAppliedSet.length ) {
                    // add left, right or both if same
                    Y.each( otAppliedSet, function( item ) {
                        var
                            otAppliedAtL = item.otAppliedAtL,
                            otAppliedContentL = item.otAppliedContentL,
                            otAppliedAtR = item.otAppliedAtR,
                            otAppliedContentR = item.otAppliedContentR,
                            leftEqualsRight = doLeftEqualsRight( [otAppliedAtL, otAppliedContentL], [otAppliedAtR, otAppliedContentR] ),
                            row = [OT_APPLIED_SET + ':'];

                        if( leftEqualsRight ) {
                            if( otAppliedAtL && otAppliedContentL ) {
                                row.push( [
                                    BE + ':',
                                    '(' + momentLocal( otAppliedAtL ).format( DATE_TIME_FORMAT ) + ')',
                                    otAppliedContentL
                                ].join( ' ' ) );
                                rows.push.apply( rows, row );
                            }
                        } else if( Y.Array.some( [otAppliedAtL, otAppliedContentL, otAppliedAtR, otAppliedContentR], someEquals ) ) {
                            if( otAppliedAtR && otAppliedContentR ) {
                                row.push( [
                                    RE + ':',
                                    '(' + momentLocal( otAppliedAtR ).format( DATE_TIME_FORMAT ) + ')',
                                    otAppliedContentR
                                ].join( ' ' ) );
                            }
                            if( otAppliedAtL && otAppliedContentL ) {
                                row.push( [
                                    LE + ':',
                                    '(' + momentLocal( otAppliedAtL ).format( DATE_TIME_FORMAT ) + ')',
                                    otAppliedContentL
                                ].join( ' ' ) );
                            }
                            rows.push.apply( rows, row );
                        }

                    } );
                }
            }

            /**
             * creates Refraction rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addRefractionRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    orType = model.orType,
                    orRead = model.orRead,

                    orSphR = model.orSphR,
                    orCylR = model.orCylR,
                    orAxsR = model.orAxsR,
                    orAddR = model.orAddR,
                    orPsmR = model.orPsmR,
                    orBasR = model.orBasR,
                    orAdd2R = model.orAdd2R,

                    orSphL = model.orSphL,
                    orCylL = model.orCylL,
                    orAxsL = model.orAxsL,
                    orAddL = model.orAddL,
                    orPsmL = model.orPsmL,
                    orBasL = model.orBasL,
                    orAdd2L = model.orAdd2L,

                    fieldsR = [orSphR, orCylR, orAxsR, orAddR, orPsmR, orBasR, orAdd2R],
                    fieldsL = [orSphL, orCylL, orAxsL, orAddL, orPsmL, orBasL, orAdd2L],
                    leftEqualsRight = doLeftEqualsRight( fieldsL, fieldsR ),
                    someR = Y.Array.some( fieldsR, someEquals ),
                    someL = Y.Array.some( fieldsL, someEquals ),
                    row = [],
                    tmp = [];

                // add list
                if( orType !== '' && Y.Lang.isValue( orType ) ) {
                    tmp.push( Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'orType_E', orType, 'i18n' ) );
                }

                // add date
                if( orRead ) {
                    tmp.push( momentLocal( orRead ).format( DATE_TIME_FORMAT ) );
                }

                if( tmp.length ) {
                    row.push( tmp.join( ' ' ) );
                }

                // add left, right or both if same
                if( !leftEqualsRight && someR ) {
                    tmp = [];
                    tmp.push( RE + ':' );
                    if( Y.Lang.isValue( orSphR ) ) {
                        tmp.push( 'SPH', formatValueFromFieldConfig( { fieldName: 'orSphR', value: orSphR } ) );
                    }
                    if( Y.Lang.isValue( orCylR ) ) {
                        tmp.push( i18n( 'activity-schema.OphthalmologyRefraction_T.orCylR.label' ), formatValueFromFieldConfig( {
                            fieldName: 'orCylR',
                            value: orCylR
                        } ) );
                    }
                    if( Y.Lang.isValue( orAxsR ) ) {
                        tmp.push( i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsR.label' ), formatValueFromFieldConfig( {
                                fieldName: 'orAxsR',
                                value: orAxsR
                            } ) + '°' );
                    }
                    if( Y.Lang.isValue( orAddR ) ) {
                        tmp.push( 'ADD', formatValueFromFieldConfig( { fieldName: 'orAddR', value: orAddR } ) );
                    }
                    if( Y.Lang.isValue( orPsmR ) ) {
                        tmp.push( 'PSM', formatValueFromFieldConfig( { fieldName: 'orPsmR', value: orPsmR } ) );
                    }
                    if( orBasR ) {
                        tmp.push( 'BAS', Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'orBas_E', orBasR, 'i18n' ) );
                    }
                    if( Y.Lang.isValue( orAdd2R ) ) {
                        tmp.push( 'ADD2', formatValueFromFieldConfig( { fieldName: 'orAdd2R', value: orAdd2R } ) );
                    }
                    tmp = tmp.join( ' ' );
                    row.push( tmp );
                }
                if( someL ) {
                    tmp = [];
                    if( leftEqualsRight ) {
                        tmp.push( BE + ':' );
                    }
                    else {
                        tmp.push( LE + ':' );
                    }
                    if( Y.Lang.isValue( orSphL ) ) {
                        tmp.push( 'SPH', formatValueFromFieldConfig( { fieldName: 'orSphL', value: orSphL } ) );
                    }
                    if( Y.Lang.isValue( orCylL ) ) {
                        tmp.push( i18n( 'activity-schema.OphthalmologyRefraction_T.orCylL.label' ), formatValueFromFieldConfig( {
                            fieldName: 'orCylL',
                            value: orCylL
                        } ) );
                    }
                    if( Y.Lang.isValue( orAxsL ) ) {
                        tmp.push( i18n( 'activity-schema.OphthalmologyRefraction_T.orAxsL.label' ), formatValueFromFieldConfig( {
                                fieldName: 'orAxsL',
                                value: orAxsL
                            } ) + '°' );
                    }
                    if( Y.Lang.isValue( orAddL ) ) {
                        tmp.push( 'ADD', formatValueFromFieldConfig( { fieldName: 'orAddL', value: orAddL } ) );
                    }
                    if( Y.Lang.isValue( orPsmL ) ) {
                        tmp.push( 'PSM', formatValueFromFieldConfig( { fieldName: 'orPsmL', value: orPsmL } ) );
                    }
                    if( orBasL ) {
                        tmp.push( 'BAS', Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'orBas_E', orBasL, 'i18n' ) );
                    }
                    if( Y.Lang.isValue( orAdd2L ) ) {
                        tmp.push( 'ADD2', formatValueFromFieldConfig( { fieldName: 'orAdd2L', value: orAdd2L } ) );
                    }
                    tmp = tmp.join( ' ' );
                    row.push( tmp );
                }

                rows.push.apply( rows, row );
            }

            /**
             * creates Visus rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addVisusRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    orVisAcuTyp = model.orVisAcuTyp,

                    orFarR = model.orFarR,
                    orNearR = model.orNearR,

                    orFarL = model.orFarL,
                    orNearL = model.orNearL,

                    orFarB = model.orFarB,
                    orNearB = model.orNearB,

                    fieldsR = [orFarR, orNearR],
                    fieldsL = [orFarL, orNearL],
                    fieldsB = [orFarB, orNearB],
                    leftEqualsRight = doLeftEqualsRight( fieldsL, fieldsR ),
                    someR = Y.Array.some( fieldsR, someEquals ),
                    someL = Y.Array.some( fieldsL, someEquals ),
                    someB = Y.Array.some( fieldsB, someEquals ),
                    row = [],
                    tmp;

                // add left, right or both if same
                if( !leftEqualsRight && someR ) {
                    tmp = [];
                    tmp.push( RE + ':' );
                    if( Y.Lang.isValue( orFarR ) ) {
                        tmp.push( 'F', formatValueFromFieldConfig( { fieldName: 'orFarR', value: orFarR } ) );
                    }
                    if( Y.Lang.isValue( orNearR ) ) {
                        tmp.push( 'N', formatValueFromFieldConfig( { fieldName: 'orNearR', value: orNearR } ) );
                    }
                    tmp = tmp.join( ' ' );
                    row.push( tmp );
                }
                if( someL ) {
                    tmp = [];
                    if( leftEqualsRight ) {
                        tmp.push( BE + ':' );
                    }
                    else {
                        tmp.push( LE + ':' );
                    }
                    if( Y.Lang.isValue( orFarL ) ) {
                        tmp.push( 'F', formatValueFromFieldConfig( { fieldName: 'orFarL', value: orFarL } ) );
                    }
                    if( Y.Lang.isValue( orNearL ) ) {
                        tmp.push( 'N', formatValueFromFieldConfig( { fieldName: 'orNearL', value: orNearL } ) );
                    }
                    tmp = tmp.join( ' ' );
                    row.push( tmp );
                }

                // add bin
                if( someB ) {
                    tmp = ['bin:'];
                    if( Y.Lang.isValue( orFarB ) ) {
                        tmp.push( 'F', formatValueFromFieldConfig( { fieldName: 'orFarB', value: orFarB } ) );
                    }
                    if( Y.Lang.isValue( orNearB ) ) {
                        tmp.push( 'N', formatValueFromFieldConfig( { fieldName: 'orNearB', value: orNearB } ) );
                    }
                    tmp = tmp.join( ' ' );
                    row.push( tmp );
                }

                // unshift list
                if( orVisAcuTyp ) {
                    row.unshift( 'Visus ' + Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'orVisAcuTyp_E', orVisAcuTyp, 'i18n' ) + ':' );
                }

                if( row.length ) {
                    if( !orVisAcuTyp ) {
                        row.unshift( 'Visus:' );
                    }
                    rows.push.apply( rows, row );
                }
            }

            /**
             * creates PD / HSA rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addPdHsaRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,

                    orPD = model.orPD,
                    orHSA = model.orHSA,

                    fields = [orPD, orHSA],
                    row = [];

                if( Y.Array.some( fields, someEquals ) ) {
                    if( Y.Lang.isValue( orPD ) ) {
                        row.push( 'PD: ' + formatValueFromFieldConfig( { fieldName: 'orPD', value: orPD } ) + ' mm' );
                    }
                    if( Y.Lang.isValue( orHSA ) ) {
                        row.push( 'HSA: ' + formatValueFromFieldConfig( { fieldName: 'orHSA', value: orHSA } ) + ' mm' );
                    }
                }
                if( row.length ) {
                    rows.push( row.join( ' / ' ) );
                }
            }

            /**
             * creates comment rows
             * @param {Object} parameters
             * @param {Array} parameters.rows
             * @param {Object} parameters.model
             */
            function addCommentRows( parameters ) {
                var
                    rows = parameters.rows,
                    model = parameters.model,
                    comment = model.comment;

                if( comment ) {
                    rows.push( comment );
                }
            }

            /**
             * creates content markup for Ophthalmology Tonometry
             * @param {Object} data
             * @return {string}
             */
            function generateContentOphthalmologyTonometry( data ) {
                var
                    rows = [];

                addNctRows( { rows: rows, model: data } );
                addPascalRows( { rows: rows, model: data } );
                addGoldmannRows( { rows: rows, model: data } );
                addIcareRows( { rows: rows, model: data } );
                addAppliedRows( { rows: rows, model: data } );
                addCommentRows( { rows: rows, model: data } );

                return rows.join( '\n' );
            }

            /**
             * creates content markup for Ophthalmology Refraction
             * @param {Object} data
             * @return {Markup|string}
             */
            function generateContentOphthalmologyRefraction( data ) {
                var
                    rows = [];

                addRefractionRows( { rows: rows, model: data } );
                addVisusRows( { rows: rows, model: data } );
                addPdHsaRows( { rows: rows, model: data } );
                addCommentRows( { rows: rows, model: data } );

                return rows.join( '\n' );
            }

            exports.getOphthalmologyFieldConfiguration = getOphthalmologyFieldConfiguration;
            exports.getOphthalmologyConfiguration = function getOphthalmologyConfiguration() {
                return OPHTHALMOLOGY;
            };

            exports.generateContentOphthalmologyTonometry = generateContentOphthalmologyTonometry;
            exports.generateContentOphthalmologyRefraction = generateContentOphthalmologyRefraction;

            exports.getOphthalmologyTonometrySections = function() {
                return {
                    nct: ['otNCCTL', 'otNCCTR', 'otNFacL', 'otNFacR', 'otNR1', 'otNL1', 'otNR2', 'otNL2', 'otNR3', 'otNL3', 'otNR4', 'otNL4', 'otNRead'],
                    pascal: ['otPR1', 'otPL1', 'otPR2', 'otPL2', 'otPR3', 'otPL3', 'otPR4', 'otPL4', 'otPRead'],
                    goldmann: ['otGR1', 'otGL1', 'otGR2', 'otGL2', 'otGRead'],
                    icare: ['otIR1', 'otIL1', 'otIR2', 'otIL2', 'otIRead']
                };
            };

            return exports;

        })();

        function generateTeleConsultNote( privateContent, consultNote, start, end, participants ) {
            var
                text = '';

            if( privateContent ) {
                return privateContent;
            }

            if( consultNote ) {
                text += consultNote + '\n';
                text += '---\n';
            }
            text += ' Zeit: ' + momentLocal( start ).format( 'DD.MM.YYYY HH:mm' ) + ' bis ' + momentLocal( end ).format( 'HH:mm' );
            text += '\n';
            if( participants && participants[0] ) {
                text += 'Host: ' + participants[0].firstname + ', ' + participants[0].lastname + ' ' + participants[0].locationName;
                text += '\n';
                text += 'Teilnehmer:';
                text += '\n';
                Y.Array.each( participants, function( item ) {
                    text += ' ' + item.firstname + ' ' + item.lastname + (item.locationName ? ', ' + item.locationName : '');
                    text += '\n';
                } );
            }
            return text;
        }

        /**
         * creates content markup for Prescription
         *  @param {Object} data            An activity object
         *  @param {Object} options
         * @return {Markup|string}
         */
        function generatePrescription( data, options ) {
            let result = '',
                _activitiesObj = data._activitiesObj || options && options._activitiesObj,
                medicationName,
                exactMed,
                dosis,
                toShow = [],
                alreadyAdded;

            if( _activitiesObj && _activitiesObj.length ) {
                _activitiesObj.forEach( function( activity ) {
                    medicationName = activity.phNLabel || activity.assDescription;
                    if( medicationName ) {
                        if( options && options.medicationsForPatient && options.medicationsForPatient.length > 0 ) {

                            dosis = ('MEDICATION' === activity.actType) ? Y.doccirrus.schemas.activity.getMedicationDosis( activity ) : '';

                            if( options && options.formElements ) {
                                exactMed = (options.formElements || []).find( function( el ) {
                                    const medication = (el.medication || '').replace( dosis, '' ).replace( /^\d+ x /, '' ).trim();
                                    return medication && -1 !== medicationName.indexOf( medication );
                                } );
                            }

                            alreadyAdded = toShow.find( function( el ) {
                                return el.medicationName === medicationName;
                            } );
                            if( alreadyAdded ) {
                                alreadyAdded.count += 1;
                            } else {
                                toShow.push( {
                                    count: 1,
                                    medicationName: medicationName,
                                    exactMed: exactMed && exactMed.value === true,
                                    dosis: dosis,
                                    _originalActivity: activity,
                                    _unfilteredMedications: options.medicationsForPatient.filter( med => momentLocal( med.timestamp ).isBefore( momentLocal( activity.timestamp ) ) )
                                } );
                            }
                        } else {
                            if( 'MEDICATION' === activity.actType ) {
                                dosis = Y.doccirrus.schemas.activity.getMedicationDosis( activity );
                                if( options && options.formElements ) {
                                    exactMed = (options.formElements || []).find( function( el ) {
                                        var medication = (el.medication || '').replace( dosis, '' ).replace( /^\d+ x /, '' ).trim();
                                        return medication && -1 !== medicationName.indexOf( medication );
                                    } );
                                }
                            } else {
                                dosis = null;
                                exactMed = null;
                            }
                            alreadyAdded = toShow.find( function( el ) {
                                return el.medicationName === medicationName;
                            } );
                            if( alreadyAdded ) {
                                alreadyAdded.count += 1;
                            } else {
                                toShow.push( {
                                    count: 1,
                                    medicationName: medicationName,
                                    exactMed: exactMed && exactMed.value === true,
                                    dosis: dosis,
                                    _originalActivity: activity,
                                    _unfilteredMedications: []
                                } );
                            }
                        }
                    }
                } );
            }

            if( data.userContent ) {
                result = data.userContent;
            } else {
                result = Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'Activity_E', data.actType, '-de', 'k.A.' );
                /**
                 * medication plans store their source in field medicationplan.comment
                 * => append that to the name of the activity
                 */
                if( data.actType === "KBVMEDICATIONPLAN" && data.comment ) {
                    result += ' (' + i18n( MEDICATION_PLAN_SOURCE ) + ' "' + data.comment + '")';
                }
            }
            result += ', <br/>';

            toShow.forEach( function( el, idx ) {
                el.range = calculateMedicationRangeWithCountAndPrescribedMedications( {
                    count: el.count,
                    medication: el._originalActivity,
                    filter: el._originalActivity && el._originalActivity.phPZN,
                    unfilteredMedications: el._unfilteredMedications
                } );

                result += (idx ? ' ' : '') +
                          '(' + (idx + 1) + ') ' +
                          (el.exactMed ? '<b>ai</b> ' : '') +
                          (el.count > 1 ? el.count.toString() + ' x ' : '') +
                          el.medicationName +
                          (el.dosis ? ' ' + el.dosis + ' ' : '') +
                          (el.range ? ' (' + el.range + ') ' : '');
            } );
            return result;
        }

        /**
         *  Creates default value of labdata
         *  @param {Object} data
         * @return {Markup|string}
         */

        function generateContentLabdata( data ) {
            var
                content = ( ( '' !== data.userContent ) ? data.userContent : 'Labordaten' ),
                findingText = Y.doccirrus.labdata.utils.makeFindingText( data );

            if ( '' !== findingText ) {
                content = content + ' {{...}}' + findingText;
            }

            return content;
        }

        /**
         * creates content without markup for activity
         *  @param {Object} data
         *  @param {Object} options
         * @return {Markup|string}
         */
        function generateContent( data, options ) {
            var
                content = data.userContent || '',
                catalogShort = data.catalogShort || '',
                actType = data.actType,
                countryMode = data.countryMode,
                opsEntries,
                i,
                labelInfectiousI18n = i18n( 'InCaseMojit.casefile_detail.checkbox.INFECTIOUS' ),
                labelFunctionalI18n = i18n( 'InCaseMojit.casefile_detail.checkbox.FUNCTIONAL' ),
                labelNeoplasiaI18n = i18n( 'InCaseMojit.casefile_detail.checkbox.NEOPLASIA' ),
                labelOcupationallyI18n = i18n( 'InCaseMojit.casefile_detail.checkbox.OCUPATIONALLY' ),
                labelExtraOptions = i18n( 'InCaseMojit.casefile_detail.label.EXTRA_OPTIONS' ),
                PKVSCHEIN_TITLE = i18n( 'InCaseMojit.activity_schema.title.PKVSCHEIN' ),
                BGSCHEIN_TITLE = i18n( 'InCaseMojit.activity_schema.title.BGSCHEIN' ),
                diagnosisInfectious,
                diagnosisFunctional,
                diagnosisNeoplasia,
                diagnosisOcupationally,
                string;

            switch( actType ) {
                case 'OPHTHALMOLOGY_TONOMETRY':
                    content = utilsOphthalmology.generateContentOphthalmologyTonometry( data );
                    break;
                case 'OPHTHALMOLOGY_REFRACTION':
                    content = utilsOphthalmology.generateContentOphthalmologyRefraction( data );
                    break;
                case 'SCHEIN':
                    content = generateSchein( data.fk4235Set || [], data.userContent, data.scheinNotes );
                    break;
                case 'PKVSCHEIN':
                    content = generateSchein( data.fk4235Set || [], PKVSCHEIN_TITLE, data.scheinNotes );
                    break;
                case 'AMTSSCHEIN':
                    content = generateSchein( data.fk4235Set || [], AMTSSCHEIN_TITLE, data.scheinNotes );
                    break;
                case 'BGSCHEIN':
                    content = generateSchein( data.fk4235Set || [], BGSCHEIN_TITLE, data.scheinNotes );
                    break;
                case 'TELECONSULT':
                    content = generateTeleConsultNote( data.userContent, data.teleConsultNote, data.start, data.end, data.participants );
                    break;

                case 'LABDATA':
                    //  MOJ-9389 Undoes changes of MOJ-9265
                    content = generateContentLabdata( data );
                    break;

                case 'MEDICATION':
                    // for medications, use phNLabel if present, MOJ-8658
                    if ( data.phNLabel && '' !== data.phNLabel ) {
                        content = data.phNLabel;
                    }
                    break;

                case 'SURGERY': // Fall-through
                case 'TREATMENT':
                    //  MOJ-9291 - add surgery codes to activity content to make them searchable in tables
                    if( !countryMode || countryMode.includes( 'D' ) ) {
                        opsEntries = [];
                        for( i = 0; i < data.fk5035Set.length; i++ ) {
                            opsEntries.push(
                                data.fk5035Set[i].fk5035 +
                                (data.fk5035Set[i].fk5041 ? ' ' + data.fk5035Set[i].fk5041 : '')
                            );
                        }
                        if( opsEntries.length > 0 ) {
                            content = content + ' (' + opsEntries.join( ', ' ) + ')';
                        }
                    }
                    break;
                case 'PUBPRESCR':
                case 'PRIVPRESCR':
                case 'PRESCRBTM':
                case 'PRESCRG':
                case 'PRESCRT':
                case 'PRESASSISTIVE':
                case 'MEDICATIONPLAN':
                case 'KBVMEDICATIONPLAN':
                case 'LONGPRESCR':
                    content = generatePrescription( data, options );
                    break;
                case 'DIAGNOSIS':
                    if ( 'TESS-KAT' === catalogShort ) {
                            diagnosisInfectious = data.diagnosisInfectious;
                            diagnosisFunctional = data.diagnosisFunctional;
                            diagnosisNeoplasia = data.diagnosisNeoplasia;
                            diagnosisOcupationally = data.diagnosisOcupationally;
                            string = '';

                        if( diagnosisInfectious || diagnosisFunctional || diagnosisNeoplasia || diagnosisOcupationally ) {
                            string += '(' + labelExtraOptions + ') ';
                            if( diagnosisInfectious ) {
                                string += labelInfectiousI18n + ' ';
                            }

                            if( diagnosisFunctional ) {
                                string += labelFunctionalI18n + ' ';
                            }

                            if( diagnosisNeoplasia ) {
                                string += labelNeoplasiaI18n + ' ';
                            }

                            if( diagnosisOcupationally ) {
                                string += labelOcupationallyI18n + ' ';
                            }
                        }

                        content += ' ' + string;
                    }
                    break;
                case 'FINDING':
                    if( data.g_extra && data.g_extra.records ) {
                        content = filterGdtText(data.userContent);
                    } else {
                        content = data.userContent || '';
                    }
                    break;
                case 'PROCESS':
                    if( data.d_extra && Object.keys(data.d_extra).length ) {
                        content = data.eventMessage || '';
                    }
                    break;
                case 'MEASUREMENT':
                    content = data.eventMessage || '';
                    break;
                case 'ASSISTIVE':
                    content = data.assDescription;
                    break;
                case 'DM1':
                case 'DM2':
                case 'BK':
                case 'HGV':
                case 'HGVK':
                case 'ZERVIX_ZYTOLOGIE':
                case 'KHK':
                case 'ASTHMA':
                case 'COPD':
                    content = Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'DmpType_E', data.dmpType, 'i18n', '' );
                    break;
                case 'QDOCU':
                    content = data.module;
                    break;
                case 'LABREQUEST':
                    content = "Labor-Auftrag";
                    if ( data.labRequestId ) {
                        content += " (" + data.labRequestId + ")";
                    }
                    break;
                case 'STOCKDISPENSE':
                    switch (data.status) {
                        case "VALID":
                            return i18n( 'activity-schema.StockDispense.notDispensedYet') + ' ' + data.comment;
                        case "APPROVED":
                             return i18n( 'activity-schema.StockDispense.dispensed') + ' ' + data.comment;
                        default:
                            return  data.comment;
                    }
                case 'KBVUTILITY':
                    content = Y.doccirrus.kbvutilitycatalogcommonutils.makeContent( data );
                    break;
                case 'KBVUTILITY2APPROVAL':
                    content = Y.doccirrus.schemas.v_kbvutility2.makeApprovalContent( data );
                    break;
                case 'KBVUTILITY2':
                    content = Y.doccirrus.schemas.v_kbvutility2.makeContent( data );
                    break;
                case 'RECEIPT':
                    if( data.invoiceNo && -1 === content.indexOf( INVOICENUM_TEXT ) ) {
                        content = INVOICENUM_TEXT + ' ' + data.invoiceNo + ' ' + content;
                    }
                    if( data.receiptNo && -1 === content.indexOf( RECEIPTNUM_TEXT ) ) {
                        content = RECEIPTNUM_TEXT + ' ' + data.receiptNo + ' ' + content;
                    }
                    break;
                case 'REFERRAL':
                    if( Y.doccirrus.commonutils.getCountryModeFromConfigs().includes( 'CH' ) ) { // don't use data.countryMode for this check
                        content = data.diagnosesText;
                    }
            }

            if( data.receiptNo && -1 === content.indexOf( RECEIPTNUM_TEXT ) ) {
                content = RECEIPTNUM_TEXT + ' ' + data.receiptNo + ' ' + content;
            }

            if( data.noOfRepetitions ) {
                if( data.parentPrescriptionId ) {
                    content = content + '<br/>' + actTypeRepeatString( actType ) + ' (' + data.noOfRepetitions + ')';
                }
                // else for the master show nothing
            }

            return content;

        }

        /**
         * [MOJ-12027]
         * Create a string for follow-up prescription, AU, etc.
         * individualized to the different actTypes,
         * @param {String} actType
         * @returns {String}
         */
        function actTypeRepeatString( actType ) {
            switch( actType ) {
                case 'AU':
                    return i18n( 'activity-schema.AU_T.repeatedAU.i18n' );
                case 'PUBPRESCR':
                case 'PRIVPRESCR':
                case 'PRESCRBTM':
                case 'PRESCRG':
                case 'PRESCRT':
                case 'LONGPRESCR':
                case 'MEDICATIONPLAN':
                case 'QDOCU':
                case 'KBVMEDICATIONPLAN':
                    return i18n( 'activity-schema.Prescription_T.repeatedPrescription.i18n' );
                case 'PRESASSISTIVE':
                case 'KBVUTILITY':
                    return i18n( 'activity-schema.Prescription_T.repeatedPrescriptionAlternative.i18n' );
            }
            // use a default for all others, the most general is with prescriptions = "Folgeverordnung"
            return i18n( 'activity-schema.Prescription_T.repeatedPrescriptionAlternative.i18n' );
        }

        function filterGdtText( gdtText ) {
            var filteredText = gdtText;
            var fieldBlackList = [
                "Satzidentifikation",
                "Satzlänge",
                "Verwendeter Zeichensatz",
                "GDT-ID",
                "Version GDT",
                "Patientennummer / Patientenkennung",
                "Name des Patienten",
                "Vorname des Patienten",
                "Geburtsdatum des Patienten",
                "Geschlecht des Patienten",
                "Versichertennummer des Patienten",
                "Datei-Archivierungskennung",
                "Software",
                "Release-Stand der Software",
                "Tag der Speicherung von Behandlungsdaten"
            ];

            var findingHeaderLine = 'Befund';

            filteredText = filteredText.split( "\n" );

            var lastLineDeleted = false;
            filteredText = filteredText.filter( function( line ) {
                var i;
                if ( lastLineDeleted && 0 === line.indexOf( "    " ) ) {
                    return false;
                }
                if ( line ) {
                    for (i = 0; i < fieldBlackList.length; i++) {
                        if (0 === line.indexOf( fieldBlackList[i] ) ) {
                            lastLineDeleted = true;
                            return false;
                        }
                    }
                }
                lastLineDeleted = false;
                return true;
            } );

            //  remove literal "Befund:" line, but not data under this key, MOJ-10595
            filteredText = filteredText.filter( function( line ) {
                return ( findingHeaderLine !== line.trim() && findingHeaderLine + ':' !== line.trim() );
            } );

            filteredText = filteredText.join( "\n" );

            return filteredText;
        }

        /**
         *  As of MOJ-9090 all activities can have backmapping, so this distinction is disabled
         *  until testing is complete.
         *
         *  TODO: delete if no longer needed after 4.0
         *
         *  @return {Boolean} True if form fields are added to activity.content
         */
        function actTypeHasBackmapping( /* actType */  ) {
            return true;
        }

        function actTypeHasDocTree( actType ) {
            var
                actTypeList = Y.doccirrus.schemas.activity.types.Activity_E.list,
                i;

            if ( 'KBVUTILITY' === actType ) {  return true; }

            for ( i = 0; i < actTypeList.length; i++ ){
                if ( actTypeList[i].val === actType ) {
                    switch( actTypeList[i].functionality ) {
                        case 'sd_ophthalmology_refraction': //
                        case 'sd_ophthalmology_tonometry': //
                        case 'sd2': //  MEDICATION
                        case 'sd3': //  DIAGNOSIS
                        case 'sd4': //  TREATMENT
                        case 'sd6': //  OBSERVATION
                        case 'sd11': //  KBVUTILITY
                        case 'sd12': //  TELECONSULT
                        case 'sd14': //  REFERRAL
                            return true;

                        case 'sd1':
                            //  add exceptions here if necessary
                            return true;
                        case 'sd18': // GRAVIDOGRAMMPROCESS / Untersuchung
                            return ( 'GRAVIDOGRAMMPROCESS' === actType );
                    }
                }

            }

            return false;
        }

        /**
         *  Used when populating activity content from form values (MOJ-7182)
         *  Note that this is only called on the server: separate client-side live mapping exists but is depreceted
         *  and may be removed before this feature is expended to all activity types.
         *
         *  @param {Object} user        REST user or equivalent
         *  @param {Object} data        An activity object
         *  @param {Function} callback  Of the form fn( err )
         */
        function generateContentAsync( user, data, callback ) {
            /** all activity types may not have backmapping, if they have custom userContent in activity settings
            if( !actTypeHasBackmapping( data.actType || '' ) ) {
                return callback( null );
            }
            */

            Y.doccirrus.api.document.contentFromForm( user, data, callback );
        }

        /**
         * code renderer
         * @param   {Object|ViewModel}  data
         * @param   {Function}          data.code
         * @param   {Function}          data.scheinType         If SCHEIN
         * @param   {Function}          data.scheinSubgroup     If SCHEIN
         * @param   {Function}          data.diagnosisCert      If DIAGNOSIS
         * @param   {Function}          data.diagnosisSite      If DIAGNOSIS
         * @param   {Function}          data.phPZN              If MEDICATION
         * @param   {Function}          data.isPrescribed       If MEDICATION
         * @param   {Function}          data.assId              If ASSISTIVE
         * @param   {Function}          data.utIndicationCode   If KBVUTILITY
         * @return  {string}
         */
        function displayCode( data ) {
            var
                actType = peek( data.actType ),
                additional = '',
                pznCode,
                isPrescribedLabel;

            switch( actType ) {
                case 'SCHEIN':
                    return unwrap( data.scheinType ) + (unwrap( data.scheinSubgroup ) ? ' / ' + unwrap( data.scheinSubgroup ) : '00');
                case 'DIAGNOSIS':
                    additional += unwrap( data.diagnosisCert ) ? ' ' + Y.doccirrus.kbvcommonutils.mapDiagnosisCert( unwrap( data.diagnosisCert ) ) : '';
                    additional += unwrap( data.diagnosisSite ) ? ' ' + unwrap( data.diagnosisSite )[0] : '';
                    return unwrap( data.code ) + additional;
                case 'MEDICATION':
                    isPrescribedLabel = ( unwrap( data.isPrescribed ) ? ' V' : ' D' );
                    pznCode = unwrap( data.phPZN );
                    if( pznCode ) {
                        if ( !data.isDispensed && !data.orderId  || unwrap( data.isPrescribed )) {
                            pznCode +=  isPrescribedLabel;
                        }

                        if ( data.status === 'DISPENSED' && !data.linkedAct ) {
                            Y.log( 'Medication is dispensed but does not have linked activity.', 'warn', NAME );
                        }

                        if ( ( data.status === 'DISPENSED' || data.isDispensed ) && data.linkedAct ) {
                            pznCode += ' '+ '<a target="_blank" href="#/activity/'+  (data.linkedAct.find(function( act ) {
                                return act.actType === "STOCKDISPENSE";
                            }) || {})._id  + '">A</a>';
                        }

                        if (data.status === 'ORDERED' && data.isArrived === false) {
                            pznCode += ' ' + '<a target="_blank" href="admin/instock#/orders/' + data.orderId  + '">B</a>';
                        }

                        if (data.status === 'ORDERED' && data.isArrived ) {
                            pznCode += ' ' + '<a target="_blank" href="admin/instock#/delivery/' + data.orderId  + '">B</a>';
                        }

                        return pznCode;
                    }
                    return ( unwrap( data.code ) || '' ) + ' ' + isPrescribedLabel;

                case 'ASSISTIVE':
                    if( !unwrap( data.code ) && unwrap( data.assId ) ) {
                        return unwrap( data.assId );
                    }
                    break;
                case 'KBVUTILITY':
                    return unwrap( data.utIndicationCode ) || '';

            }
            return unwrap( data.code ) || '';
        }

        /**
         * Returns status list for status filter
         * @param {Object} [config]
         * @param {Array} [config.blacklist] list of statuses to ignore.
         *      if list is undefined, default list is used.
         * @return {Array}
         */
        function getFilteredStatuses( config ) {
            var blacklist = [
                "DELETED",
                "INVALID",
                "EDITING",
                "ENCRYPTED",
                "CRYPT_ERR",
                "KBVBILLED",
                "KBVERROR",
                "KBVREJECTED",
                "BILLINGREJECTED",
                "ARCHIVED",
                "CHECKED",
                DIRTY_ENUM,
                FOREIGN_ENUM
            ];
            blacklist = (config && config.blacklist) || blacklist;
            return Y.doccirrus.schemas.activity.types.ActStatus_E.list.filter( function( status ) {
                return -1 === blacklist.indexOf( status.val );
            } );
        }

        /**
         * Gets all field names for schema path. Can be complex(dot-separated).
         * @param {String} path
         * @example '', 'Invoice_T', 'Invoice_T.invoiceNo'
         * @returns {Array}
         */
        function getAllFieldsFromSchemaPath( path ) {
            var
                result = [],
                schemaObj = types;
            if( path ) {
                path.split( '.' ).forEach( function( prop ) {
                    schemaObj = schemaObj[prop];
                } );
            }
            if( schemaObj ) {
                result = Object.keys( schemaObj );
            }
            return result;

        }

        function getRuleEngineSchema( actType, targetSchema ) {
            var schema = targetSchema ? Y.doccirrus.schemas[targetSchema].schema : Y.doccirrus.schemas.activity.schema,
                schemaFields = targetSchema ? Object.keys(schema) : Y.doccirrus.schemas.activity.getFieldsForActivityType( actType ),
                ruleEngineSchema = {},
                entry;

            if(!targetSchema && schema.employeeId){
                schema.employeeId.ref = 'employee';
                schema.employeeId['rule-engine'] = {};
            }

            if(targetSchema === 'task'){
                //extend with reference to patient
                schemaFields = Object.keys( Y.doccirrus.schemas[targetSchema].types.Task_T );
                if(!schema.patientId) {
                    schema.patientId = {
                        "type": "String",
                        "ref": "patient",
                        i18n: i18n( 'activity-schema.Activity_T.patientId.i18n' ),
                        "rule-engine": {}
                    };
                } else {
                    schema.patientId.ref = 'patient';
                    schema.patientId['rule-engine'] = {};
                }
            }

            function parseSubSchemaEntry( path, key, schemaEntry ) {
                if( schemaEntry['rule-engine'] ) {
                    ruleEngineSchema[path + '.' + key] = schemaEntry;
                }
            }

            function processNested( entry, key ) {
                Object.keys( entry ).forEach( function( subKey ) {
                    var subSchemaEntry = entry[subKey];

                    if( Array.isArray( subSchemaEntry ) ) {
                        Object.keys( subSchemaEntry[0] ).forEach( function( subSchemaEntryKey ) {
                            parseSubSchemaEntry( key + '.' + subKey, subSchemaEntryKey, subSchemaEntry[0][subSchemaEntryKey] );
                        } );
                    } else {
                        parseSubSchemaEntry( key, subKey, subSchemaEntry );
                    }

                } );
            }

            if( !actType ) {
                return null;
            }

            Object.keys( schema ).forEach( function( key ) {
                var subSchema;
                entry = schema[key];
                if( -1 !== schemaFields.indexOf( key ) && entry['rule-engine'] ) {
                    if( -1 !== ['patient', 'location', 'employee'].indexOf( entry.ref ) ) {
                        subSchema = Y.doccirrus.schemas[entry.ref].schema;

                        Object.keys( subSchema ).forEach( function( subKey ) {
                            var subSchemaEntry = subSchema[subKey];

                            if( Array.isArray( subSchemaEntry ) ) {
                                Object.keys( subSchemaEntry[0] ).forEach( function( subSchemaEntryKey ) {
                                    parseSubSchemaEntry( key + '.' + subKey, subSchemaEntryKey, subSchemaEntry[0][subSchemaEntryKey] );
                                } );
                            } else {
                                parseSubSchemaEntry( key, subKey, subSchemaEntry );
                            }

                        } );
                    } else if( -1 !== ['fk5035Set', 'fk5036Set'].indexOf( key ) ) {
                        if( Array.isArray( entry ) ) {
                            entry.forEach( function( subEntry ) {
                                processNested( subEntry, key );
                            } );
                        } else {
                            processNested( entry, key );
                        }

                    } else if( -1 !== ['status'].indexOf( key ) && targetSchema !== 'task' ) {
                        entry.list = ( entry.list || [] ).filter( function( el ){
                            return -1 !==['VALID', 'APPROVED', 'BILLED'].indexOf( el.val );
                        });
                        ruleEngineSchema[key] = entry;
                    } else {
                        ruleEngineSchema[key] = entry;
                    }
                }
            } );

            return ruleEngineSchema;
        }

        function associateFieldWithActType( callback ) {
            callback = callback || function() {
                };
            var
                at = getActivityTypes(),
                atf = actTypeDefns,
                result = {};

            Y.log( 'Get activity mapping Object.', 'info', NAME );

            at.forEach( function( type ) {
                var t;

                // get _T defns for the type
                t = atf[type] || [];

                t.unshift( 'Activity_T' );

                t.forEach( function( item ) {
                    var
                        f,
                        fields = types[item];

                    for( f in fields ) {
                        if( fields.hasOwnProperty( f ) &&
                            0 !== f.indexOf( 'base_' ) ) {
                            if( result[f] && -1 === result[f].indexOf( type ) ) {
                                result[f].push( type );
                            } else {
                                result[f] = [type];
                            }

                        }
                    }

                } );

            } );

            callback( result );
            return result;
        }

        /**
         * Returns dosis string based on dosis type.
         * @method getMedicationDosis
         * @param {Object} data
         * @param {Object} data.phDosisType
         * @param {Object} data.dosis
         * @param {Object} data.phDosisMorning
         * @param {Object} data.phDosisAfternoon
         * @param {Object} data.phDosisEvening
         * @param {Object} data.phDosisNight
         * @returns {string}
         */
        function getMedicationDosis( data ) {
            var
                phDosisType = data.phDosisType,
                schedule = [],
                result = '';
            switch( phDosisType ) {
                case phDosisTypes.TEXT:
                    result = data.dosis;
                    break;
                case phDosisTypes.SCHEDULE:
                    result = [];
                    schedule.push( data.phDosisMorning || '0' );
                    schedule.push( data.phDosisAfternoon || '0' );
                    schedule.push( data.phDosisEvening || '0' );
                    schedule.push( data.phDosisNight || '0' );
                    result = schedule.join( '-' );
                    break;
            }
            return result;
        }

        /**
         * @method calculateMedicationRange
         * @param {Object} args - Object of arguments.
         * @param {String} args.dosis - dosis.
         * @param {String} args.phDosisAfternoon - afternoon dosis.
         * @param {String} args.phDosisEvening - dosis evening.
         * @param {String} args.phDosisMorning - morning dosis.
         * @param {String} args.phDosisNight - dosis night.
         * @param {String} args.phDosisType - dosis type.
         * @param {Number} args.phPackQuantity - quantity.
         * @param {String} args.phPackSize - pack size.
         * @param {Date} args.timestamp - timestamp.
         * @return {Number} returns days.
         */
        function calculateMedicationRange( args ) {
            let
                {
                    dosis = '',
                    phDosisAfternoon = '',
                    phDosisEvening = '',
                    phDosisMorning = '',
                    phDosisNight = '',
                    phDosisType = '',
                    phPackQuantity = 1,
                    phPackSize = '',
                    timestamp
                } = args,
                tmp,
                prescriptionRangeInDays = 0;

            const
                dropsInMl = 20,
                convertCommaToPoint = new RegExp( /,/, 'g' ),
                dosisProvidedInDrops = (phDosisType === phDosisTypes.TEXT) ? dosis && dosis.includes( '°' ) : phDosisMorning.includes( '°' ) || phDosisAfternoon.includes( '°' ) || phDosisEvening.includes( '°' ) || phDosisNight.includes( '°' );

            if( !timestamp ) {
                return 0;
            }

            if( phDosisType === phDosisTypes.TEXT ) {
                const matches = dosis && dosis.split( '-' );
                if( matches && matches.length >= 4 ) {
                    phDosisMorning = matches[0];
                    phDosisAfternoon = matches[1];
                    phDosisEvening = matches[2];
                    phDosisNight = matches[3];
                } else {
                    return 0;
                }
            }

            if( phDosisMorning && phDosisMorning.includes( '/' ) ) {
                tmp = phDosisMorning.split( '/' );
                if( tmp.length > 1 ) {
                    phDosisMorning = parseFloat( tmp[0] ) / parseFloat( tmp[1] );
                }
            } else {
                phDosisMorning = phDosisMorning && parseFloat( phDosisMorning.replace( convertCommaToPoint, '.' ) );
            }

            if( phDosisAfternoon && phDosisAfternoon.includes( '/' ) ) {
                tmp = phDosisAfternoon.split( '/' );
                if( tmp.length > 1 ) {
                    phDosisAfternoon = parseFloat( tmp[0] ) / parseFloat( tmp[1] );
                }
            } else {
                phDosisAfternoon = phDosisAfternoon && parseFloat( phDosisAfternoon.replace( convertCommaToPoint, '.' ) );
            }

            if( phDosisEvening && phDosisEvening.includes( '/' ) ) {
                tmp = phDosisEvening.split( '/' );
                if( tmp.length > 1 ) {
                    phDosisEvening = parseFloat( tmp[0] ) / parseFloat( tmp[1] );
                }
            } else {
                phDosisEvening = phDosisEvening && parseFloat( phDosisEvening.replace( convertCommaToPoint, '.' ) );
            }

            if( phDosisNight && phDosisNight.includes( '/' ) ) {
                tmp = phDosisNight.split( '/' );
                if( tmp.length > 1 ) {
                    phDosisNight = parseFloat( tmp[0] ) / parseFloat( tmp[1] );
                }
            } else {
                phDosisNight = phDosisNight && parseFloat( phDosisNight.replace( convertCommaToPoint, '.' ) );
            }

            let
                dailyUsage = (phDosisMorning + phDosisAfternoon + phDosisEvening + phDosisNight),
                packSizeValue = phPackSize && parseFloat( phPackSize ),
                packSizeType = phPackSize && phPackSize.split( ' ' ).length && phPackSize.split( ' ' )[1];

            if( dailyUsage > 0 && packSizeType ) {
                switch( packSizeType.toLowerCase() ) {
                    case 'ml':
                        if( dosisProvidedInDrops ) {
                            prescriptionRangeInDays = (packSizeValue * phPackQuantity) * (dropsInMl / dailyUsage);
                        } else {
                            prescriptionRangeInDays = (packSizeValue * phPackQuantity) / dailyUsage;
                        }
                        break;
                    case 'stk':
                    case 'st':
                        prescriptionRangeInDays = (packSizeValue * phPackQuantity) / dailyUsage;
                        break;
                    default:
                        prescriptionRangeInDays = 0;
                        break;
                }
            }
            return prescriptionRangeInDays;
        }

        /**
         * @method calculateMedicationRangeWithPrescribedMedications
         * @param {Object} args - Object of arguments.
         * @param {String} args.filter - Filter.
         * @param {Array<module:v_medicationSchema.v_medication>} args.medications - unfilteredMedications.
         * @return {Number} returns days.
         */
        function calculateMedicationRangeWithPrescribedMedications( args ) {
            let {
                filter,
                medications: unfilteredMedications
            } = args;

            if( !Array.isArray( unfilteredMedications ) || unfilteredMedications.length === 0 || !filter ) {
                return 0;
            }

            unfilteredMedications.reverse();
            return unfilteredMedications
                .filter( medication => {
                    return medication.isPrescribed && medication.phPZN === filter;
                } )
                .reduce( ( sumOfDays, currentMedication, indexInArray, filteredMedications ) => {
                    const medicationRangeOfCurrentMedication = Y.doccirrus.schemas.activity.calculateMedicationRange( currentMedication );

                    //evaluate if medication carries over days to next prescribed medication
                    //calculate diff of m1.timestamp and m2.timestamp
                    //  if < 0: not in range (dont add days) [if acc > 0: remove days]
                    //  else: in range (add days)

                    let comparedMedication = {
                        timestamp: momentLocal()
                    };

                    if( indexInArray < (filteredMedications.length - 1) ) {
                        //is not last item in array / more items to come
                        comparedMedication = filteredMedications[indexInArray + 1];
                    }
                    const diffInDaysBetweenMedications = momentLocal( currentMedication.timestamp ).diff( momentLocal( comparedMedication.timestamp ), 'days' );
                    let medicationRangeMinusDiff = medicationRangeOfCurrentMedication - Math.abs( diffInDaysBetweenMedications );

                    if( medicationRangeMinusDiff < 0 ) {
                        //not in range (dont add days)
                        medicationRangeMinusDiff = Math.abs( medicationRangeMinusDiff );
                        if( sumOfDays > 0 ) {
                            //subtract days
                            if( sumOfDays - medicationRangeMinusDiff < 0 ) {
                                return 0;
                            }
                            return sumOfDays - medicationRangeMinusDiff;
                        }
                        return sumOfDays;
                    } else {
                        //in range (add days)
                        return sumOfDays + medicationRangeMinusDiff;
                    }
                }, 0 );
        }

        /**
         * @method calculateMedicationRangeWithCount
         * @param {Object} args - Object of arguments.
         * @param {String|Number} args.count - Count.
         * @param {module:v_medicationSchema.v_medication} args.medication - Medication.
         * @return {Number} returns days.
         */
        function calculateMedicationRangeWithCount( args ) {
            const {
                count,
                medication
            } = args;

            if( !medication || !count ) {
                return 0;
            }

            const
                numOfDays = Y.doccirrus.schemas.activity.calculateMedicationRange( medication ),
                countAsNumber = parseFloat( count );

            return countAsNumber * numOfDays;
        }

        /**
         * @method calculateMedicationRangeWithCountAndPrescribedMedications
         * @param {Object} args - Object of arguments.
         * @param {String|Number} args.count - Count.
         * @param {String} args.filter - Filter.
         * @param {module:v_medicationSchema.v_medication} args.medication - Medication.
         * @param {Array<module:v_medicationSchema.v_medication>} args.unfilteredMedications - unfilteredMedications.
         * @return {String} returns Date as String.
         */
        function calculateMedicationRangeWithCountAndPrescribedMedications( args ) {
            const {
                count,
                filter,
                medication,
                unfilteredMedications
            } = args;

            const TIMESTAMP_FORMAT = i18n( 'general.TIMESTAMP_FORMAT' );

            const numOfDaysWithCount = calculateMedicationRangeWithCount( {
                count: count,
                medication: medication
            } );
            const numOfDaysWithPrescribedMedications = calculateMedicationRangeWithPrescribedMedications( {
                filter: filter,
                medications: unfilteredMedications
            } );

            const
                numOfDaysWithCountNumber = Math.ceil( numOfDaysWithCount ),
                numOfDaysWithPrescribedMedicationsNumber = Math.ceil( numOfDaysWithPrescribedMedications ),
                sum = numOfDaysWithCountNumber + numOfDaysWithPrescribedMedicationsNumber;

            return momentLocal().add( sum, 'days' ).format( TIMESTAMP_FORMAT );
        }

        NAME = Y.doccirrus.schemaloader.deriveSchemaName( NAME );

        /**
         * Class case Schemas -- gathers all the schemas that the case Schema works with.
         */

        Y.namespace( 'doccirrus.schemas' )[NAME] = {

            types: types,

            indexes: [
                {
                    "key": {
                        "actType": 1
                    }
                },
                {
                    "key": {
                        "status": 1
                    }
                },
                {
                    "key": {
                        "caseFolderId": 1
                    }
                },
                {
                    "key": {
                        "patientId": 1
                    }
                },
                {
                    "key": {
                        "employeeId": 1
                    }
                },
                {
                    "key": {
                        "timestamp": 1
                    }
                },
                {
                    "key": {
                        "code": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "studyId": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "invoiceLogId": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "labText": "hashed"
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "labRequestId": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "labRequestRef": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "invoiceId": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "rootPrescriptionId": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "invoiceNo": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "receipts": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "autoGenID": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "timestamp": -1,
                        "code": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        catalogShort: 1,
                        code: 1,
                        locationId: 1,
                        actType: 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "referencedBy": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "restRequestId": 1
                    },
                    indexType: {sparse: true}
                },
                {
                    "key": {
                        "mediaImportError": 1
                    },
                    indexType: {sparse: true}
                },
                {
                    "key": {
                        "formId": 1
                    },
                    indexType: { sparse: true, background: true }
                },
                {
                    "key": {
                        "attachedMediaTags": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "attachedMedia": 1
                    },
                    indexType: {
                        partialFilterExpression: {
                            "attachedMedia._id": {$type: 'objectId'}
                        }
                    }
                },
                {
                    "key": {
                        "activities": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    "key": {
                        "orderId": 1
                    },
                    indexType: { sparse: true }
                },
                {
                    key: {
                        locationId: 1
                    },
                    indexType: {sparse: true}
                }
            ],

            apiMethods: [
                {
                    name: 'getActivity',
                    operationType: 'read'
                },
                {
                    name: 'createFindingForPatient',
                    operationType: 'write'
                },
                {
                    name: 'createActivityForPatient',
                    operationType: 'write'
                },
                {
                    name: 'createCommunicationFromMediport',
                    operationType: 'write'
                }
            ],

            ramlConfig: ramlConfig,

            name: NAME,

            /**
             * Returns the enum used throughout the system to mark imported data
             * that is not 100% compatible with our data and may in fact fail
             * validation checks.  (i.e. be unsavable via DB Layer without changes)
             *
             * @method getDirtyEnum
             * @returns {string} 'DIRTY_IMPORT' is the current string
             */
            getDirtyEnum: function() {
                return DIRTY_ENUM;
            },
            /**
             * Returns the enum used throughout the system to mark imported data
             * that comes from a foreign PRCS and is 100% validated by another PRCS,
             * but which is not 100% compatible with our data because of the dependencies
             * missing.  Such Data is always READONLY.
             *
             * @method getForeignEnum
             * @returns {string} 'EXT_IMPORT' is the current string
             */
            getForeignEnum: function() {
                return FOREIGN_ENUM;
            },

            /**
             * States commonly considered read only.
             * @type {array}
             */
            readOnlyStates: readOnlyStates,

            /**
             *  Parent-child relationships which are allowed between activities
             *  @type {array}
             */
            linkingRules: linkingRules,

            /**
             *  Activity types which are collapsed by default when enabling compact mode
             *  @type {array}
             */

            collapseByDefaultActTypes: collapseByDefaultActTypes,

            /**
             *  get array of activity fields which can be changed in a given state, or ['*'] for all
             *
             *  @param {Object} data current data
             *  @param {Object} options
             *  @returns {Array}
             */
            getReadOnlyFields: function( data, options ) {

                var
                    isTimestampBeforeQ12020 = Y.doccirrus.commonutils.isDateBeforeQ12020( data.timestamp ),
                    locationsList = options && options.locations,
                    actType = data.actType,
                    result = [],
                    correctLocation = true;

                if( locationsList && data.locationId ) {
                    correctLocation = -1 !== locationsList.indexOf( data.locationId );
                }

                if( 'KBVUTILITY' === actType ) {
                    result.push( 'subType' );
                }

                if(
                    //  activity is locked in states following approval
                (-1 !== readOnlyStates.indexOf( data.status )) ||
                //  external imports are 100% read-only MOJ-1642
                FOREIGN_ENUM === data.status ||
                // on isd side should be readonly
                Y.doccirrus.auth.isISD() || data.mirrorActivityId ||
                // activity location is not in locationList
                !correctLocation
                ) {
                    return ['*'];
                }
                else {
                    // MOJ-1330: Case 2: edit an already saved activity > activity type is read-only and cannot be changed by the user
                    if( actType && data._id ) {
                        result.push( 'actType' );
                    }
                    // TODO: KBV Q1 2020 - remove UUU stuff after Q4 2019 invoicing is done
                    // New regulations starting Q1 2020 do not allow UUU code.
                    // MOJ-2140: at diagnosis replacement value UUU security and localization must be disabled
                    if( (isTimestampBeforeQ12020 && 'DIAGNOSIS' === actType && Y.Object.owns( data, 'code' ) && Y.Lang.isString( data.code ) && 'UUU' === data.code.toUpperCase()) ||
                        (!isTimestampBeforeQ12020 && 'DIAGNOSIS' === actType && data.code && 'Z01.7' === data.code.toUpperCase()) ) {
                        result.push( 'diagnosisCert', 'diagnosisSite' );
                    }
                }
                if( ('SCHEIN' === data.actType || 'PKVSCHEIN' === data.actType || 'BGSCHEIN' === data.actType) && (1 === data.activities.length) ) {
                    return ['fk4235Set*'];
                }

                return Y.Array.dedupe( result );

            },
            getFieldsForActivityType: function( actType ) {
                var
                    atf = actTypeDefns,
                    result = [];

                var t;

                // get _T defns for the type
                t = atf[actType] || [];

                t.unshift( 'Activity_T' );

                t.forEach( function( item ) {
                    var
                        f,
                        fields = types[item];

                    for( f in fields ) {
                        if( fields.hasOwnProperty( f ) &&
                            0 !== f.indexOf( 'base_' ) ) {
                            result.push( f );
                        }
                    }
                } );

                return result;
            },
            generateEmptyActivityData: function generateEmptyActivityData( caseData ) {
                var
                    data = Y.merge( caseData );
                data = Y.merge( Y.doccirrus.schemaloader.getEmptyDataForSchema( Y.doccirrus.schemaloader.getSchemaForSchemaName( 'activity' ) ), data );
                if( !data.locationId ) {
                    delete data.locationId; //mongoose tries to val to ObejctId and fails
                }
                if( !data.schedule ) {
                    delete data.schedule; //mongoose tries to val to ObejctId and fails
                }
                data.timestamp = data.timestamp || (new Date()).toJSON();
                data.start = data.start || data.timestamp;
                data.end = data.end || data.timestamp;
                return data;
            },

            'getDefaultFSMName': function() {
                return 'dc-fsm-default';
            },

            /**
             * Given an activity type, get the appropriate state machine for that type
             *
             * TODO: move FSM names to ActType_E
             *
             * @param activityType
             */

            'getFSMName': function( activityType ) {
                var fsmName = this.getDefaultFSMName();

                switch( activityType ) {
                    case 'INVOICE':
                    case 'INVOICEREF':
                    case 'INVOICEREFGKV':
                    case 'INVOICEREFPVS':
                        fsmName = 'dc-fsm-invoice';
                        break;
                    case 'TREATMENT':
                        fsmName = 'dc-fsm-treatment';
                        break;

                    case 'PUBPRESCR':
                    case 'PRIVPRESCR':
                    case 'PRESCRBTM':
                    case 'PRESCRG':
                    case 'PRESCRT':
                    case 'AU':
                    case 'PRESASSISTIVE':
                    case 'LONGPRESCR':
                        fsmName = 'dc-fsm-prescription';
                        break;
                    case 'PKVSCHEIN':
                    case 'BGSCHEIN':
                    case 'SCHEIN':
                        fsmName = 'dc-fsm-schein';
                        break;
                    case 'DM1':
                    case 'DM2':
                    case 'BK':
                    case 'HGV':
                    case 'HGVK':
                    case 'ZERVIX_ZYTOLOGIE':
                    case 'KHK':
                    case 'COPD':
                    case 'ASTHMA':
                    case 'EHKSD':
                    case 'EHKSND':
                    case 'QDOCU':
                        fsmName = 'dc-fsm-edoc';
                        break;
                    case 'KBVUTILITY':
                        fsmName = 'dc-fsm-kbvutility';
                        break;

                    case 'RECEIPT':
                        fsmName = 'dc-fsm-receipt';
                        break;
                    case 'STOCKDISPENSE':
                        fsmName ='dc-fsm-default';
                        break;
                    case 'MEDICATION':
                        fsmName = 'dc-fsm-medication';
                        break;

                    // MEDDATA activities may be stored in the CREATED state
                    case 'MEDDATA':
                    case 'INGREDIENTPLAN':
                    case 'GRAVIDOGRAMMPROCESS':
                    case 'PERCENTILECURVE':
                    case 'AMTSSCHEIN':
                        fsmName = 'dc-fsm-default-created';
                        break;
                }

                return fsmName;
            },

            /**
             * Used in post-method of virtual activity to allow to submit activities in the status 'CREATED'
             * instead of 'VALID', if the state machine of that activity allows to do so.
             * Data input form REST/2 is usually allowed only to come in as state 'VALID'.
             *
             * @param {String} fsmName
             * @returns {boolean}
             */
            isFSMAllowingCreatedStatus: function( fsmName ) {
                switch( fsmName ) {
                    case 'dc-fsm-default-created':
                        return true;
                    default:
                        return false;
                }
            },

            /**
             * Get a FSM definition, given its name
             *
             * @param   fsmNameOrActivity   {String}    FSM name or activity type
             */

            'getFSM': function( fsmNameOrActivity ) {
                if( !stateMachines.hasOwnProperty( fsmNameOrActivity ) ) {
                    fsmNameOrActivity = this.getFSMName( fsmNameOrActivity );
                }
                return stateMachines[fsmNameOrActivity];
            },

            /**
             * Get set of transitions this flow from the given state, for a given activity type
             *
             * @param   activityType    {String}    In ActType_E
             * @param   currentState    {String}    Name of current state
             */

            'getTransitions': function( activityType, currentState ) {
                var
                    fsmName = this.getFSMName( activityType ),
                    fsm = this.getFSM( fsmName ),

                    transitions = [];
                if( fsm.hasOwnProperty( currentState ) ) {
                    transitions = fsm[currentState];
                }

                return transitions;
            },

            /**
             * Returns list of all transitions
             * @returns {Object}
             */
            'getTransitionList': function() {
                return JSON.parse( JSON.stringify( transitionList ) );
            },

            /**
             * Returns description for transition
             * @param {String} transition key into transitionlist
             * @returns {Object | null}
             */
            'getTransitionDescription': function( transition ) {
                return JSON.parse( JSON.stringify( transitionList[transition] || null ) );
            },

            /**
             * Returns list of all available transitions for provided activities
             * @param {Array} activityData array of activity data [ {actType:'', status:''}, {...} ]
             * @param {Object} [forbiddenTransitions={}] object with forbiddenTransitions e.g. { 'delete': true, 'validate': true }
             * @return {Array}
             */
            'getAvailableTransition': function( activityData, forbiddenTransitions ) {
                var availableTransitions = [],
                    init = false;
                forbiddenTransitions = forbiddenTransitions || {};
                activityData.every( function( invoice ) {
                    var stateTransitions = Y.doccirrus.schemas.activity.getTransitions( invoice.actType, invoice.status )
                        .map( function( data ) {
                            return data.transition;
                        } )
                        .filter( function( tansition ) {
                            return !forbiddenTransitions[tansition];
                        } );
                    if( !init ) {
                        init = true;
                        if( stateTransitions && stateTransitions.length ) {
                            availableTransitions = JSON.parse( JSON.stringify( stateTransitions ) );
                        }
                        return true;
                    }
                    if( 0 === availableTransitions.length ) {
                        return false;
                    }
                    availableTransitions = stateTransitions.filter( function( action ) {
                        return -1 !== availableTransitions.indexOf( action );
                    } );
                    return true;

                } );

                return availableTransitions;
            },

            /**
             * Check whether the state machine for the given activity, in the given state, has the named transition
             *
             * @param activityType  {String}    Member of ActType_E
             * @param currentState  {String}    A state in FSM for this activity type
             * @param transition    {String}    Name of a transition (edge in the FSM graph)
             */

            'hasTransition': function( activityType, currentState, transition ) {
                var
                    transitions = this.getTransitions( activityType, currentState ),
                    i;

                for( i = 0; i < transitions.length; i++ ) {
                    if( transitions[i].transition === transition ) {
                        return true;
                    }
                }

                return false;
            },
            linkAny: function() {
                return this.types.Activity_E.list.map( function( actType ) {
                    return actType.val;
                } );
            },
            /**
             *  Get list of activity types that may be linked by a parent activity type
             *
             *  For example, an INVOICE can link DIAGNOSES and TREATMENTS, but not other INVOICEs
             *
             *  This mapping is kept in the linkingRules private variable
             *
             *  WARNING: this only checks whether the type of activities can be linked, not whether the
             *  relationship is allowed.  There are further conditions to linking two activities than their types,
             *  defined in activity models and post-processes.
             *
             *  @param activityType
             */

            linkAllowedFor: function( activityType ) {
                var
                    self = this,
                    allowedTypes = [];
                if( !activityType ) {
                    return self.linkAny();
                }
                if( !linkingRules.hasOwnProperty( activityType ) ) {
                    return allowedTypes;
                }

                //  return a clone of the array, prevents mutation
                return linkingRules[activityType].slice( 0 );
            },

            getGebueHPrice: function( u_extra ) {
                var
                    self = this,
                    price;

                // MOJ-3396
                // price = u_extra && u_extra[self.gebuehType()];
                price = u_extra && u_extra.pkv1;
                return self.toPrice( price || 0 );
            },
            toPrice: function( price, factor, factor2 ) {

                var
                    factorNumber = Number( factor );
                if( !price ) {
                    return 0;
                }
                price = (0 === factorNumber || factorNumber) ? Number( price ) * factorNumber : Number( price );
                if( 0 === factor2 || factor2 ) {
                    price = price * factor2;
                }
                return !isNaN( price ) ? Number( price.toFixed( 2 ) ) : 0;
            },

            calculateMedicationRange: calculateMedicationRange,
            calculateMedicationRangeWithPrescribedMedications: calculateMedicationRangeWithPrescribedMedications,
            calculateMedicationRangeWithCountAndPrescribedMedications: calculateMedicationRangeWithCountAndPrescribedMedications,

            /**
             * @method getPaymentMethodList
             *
             * @return {Array} returns Array of Payment Methods
             */
            getPaymentMethodList: function() {
                return [
                    {
                        value: 'CASH',
                        text: i18n( 'InCaseMojit.createreceipt_modal_clientJS.options.CASH' )
                    },
                    {
                        value: 'DEBITCARD',
                        text: i18n( 'InCaseMojit.createreceipt_modal_clientJS.options.DEBIT_CARD' )
                    },
                    {
                        value: 'CREDITCARD',
                        text: i18n( 'InCaseMojit.createreceipt_modal_clientJS.options.CREDIT_CARD' )
                    },
                    {
                        value: 'BANKTRANSACTION',
                        text: i18n( 'InCaseMojit.createreceipt_modal_clientJS.options.BANK_TRANSACTION' )
                    }
                ];
            },

            /**
             * @method _setActivityData
             * @param {Object} config
             * @param {Object} config.initData
             * @param {String} config.initData.actType
             * @param {String} config.initData.catalogShort
             * @param {String} [config.initData.billingFactorType]
             * @param {String} [config.initData.billingFactorValue]
             * @param {String} [config.initData.uvGoaeType]
             * @param {Object} config.entry
             * @param {Object} [config.options]
             * @param {Object} [config.user] only for backend
             * @param {function|undefined} config.callback
             * @param {Function} callback is called with 2 args: error, activity
             * @return {undefined}
             * @private
             */
            _setActivityData: function( config, callback ) { //TODO [pi] rename when it is ready. Shift+Control+F
                Y.log( 'Executing Y.doccirrus.schemas.activity._setActivityData', 'debug', NAME );
                var
                    self = this,
                    catalogShort,
                    initData = config.initData,
                    ignoreList = config.ignoreList || [],
                    entry = config.entry || {},
                    user = config.user,
                    options = config.options || {},
                    actType,
                    isClient = Y.doccirrus.commonutils.isClientSide(),
                    countryMode = Y.doccirrus.commonutils.getCountryModeFromConfigs(),
                    activity = {
                        actType: initData.actType,
                        catalogShort: initData.catalogShort,
                        billingFactorType: initData.billingFactorType,
                        billingFactorValue: initData.billingFactorValue,
                        uvGoaeType: initData.uvGoaeType,
                        locationId: initData.locationId
                    },
                    shouldWaitForAsync = false,
                    priceItem;

                // check, if a separate callback is given, if not, we search for an alternative in the config
                if (typeof callback !== "function") {
                    if (typeof config.callback === "function") {
                        callback = config.callback;
                    }
                    else {
                        callback = function() {
                        };
                    }
                }

                function isSet( value ) {
                    return 'undefined' !== typeof value;
                }

                function getBillingFactor( u_extra, type ) {
                    return u_extra && u_extra.rechnungsfaktor && u_extra.rechnungsfaktor[type];
                }

                function catalogCheckCb( err, result ) {
                    if( err ) {
                        return callback( err );
                    }

                    activity.catalog = result.catalogEntry;
                    // calc prices here
                    callback( null, activity );
                }

                actType = activity.actType;
                catalogShort = activity.catalogShort;
                if( isSet( entry.catalog ) && 'boolean' === typeof entry.catalog ) {
                    activity.catalog = entry.catalog;
                }
                if( isSet( entry.catalogRef ) && 'string' === typeof entry.catalogRef ) {
                    activity.catalogRef = entry.catalogRef;
                }
                if( 'boolean' === typeof entry.catalogEntry ) {
                    activity.catalog = entry.catalogEntry;
                }
                if( isSet( entry.catalog ) && entry.catalog === false ) {
                    activity.price = entry.price;
                }

                activity.code = entry.seq;
                activity.comment = Array.isArray( entry.infos ) ? entry.infos.join( ', ' ) : (entry.infos || undefined);
                activity.u_extra = entry.u_extra;
                activity.generalCosts = 0;
                activity.specialCosts = 0;
                activity.explanations = entry.explanations;

                if( !options._doNotSetUserContent ) {
                    activity.userContent = entry.title;
                }

                if( 'ASSISTIVE' === actType ) {
                    activity.assDescription = entry.assDescription;
                    activity.assManufacturer = entry.assManufacturer;
                    activity.assCharacteristics = entry.assCharacteristics;
                    activity.assDateAdded = entry.assDateAdded;
                    activity.assDateChanged = entry.assDateChanged;
                    activity.assDose = entry.assDose;
                    activity.assPrescPeriod = entry.assPrescPeriod;
                    activity.assId = entry.assId;
                }

                if( 'TREATMENT' === activity.actType ) {
                    if( isClient ) {
                        activity._hasSpecialCostsInfo = false;
                    }
                    if( entry.costType ) {
                        activity.costType = entry.costType;
                    }
                    if( 'GebüH' === catalogShort && !entry.u_extra ) {
                        activity.u_extra = entry;
                    }
                    if( entry.u_extra && entry.u_extra.nebenkosten ) {
                        activity.generalCosts = entry.u_extra.nebenkosten.allgemeinkosten;
                        if( Array.isArray( entry.u_extra.nebenkosten.besondere_kosten ) ) {
                            if( isClient ) {
                                activity._hasSpecialCostsInfo = true;
                                activity._specialCostsValues = entry.u_extra.nebenkosten.besondere_kosten;
                            }
                        } else {
                            activity.specialCosts = entry.u_extra.nebenkosten.besondere_kosten;
                        }
                    }
                    if( entry.areTreatmentDiagnosesBillable ) { // can have String values '0' and '1'
                        activity.areTreatmentDiagnosesBillable = entry.areTreatmentDiagnosesBillable;
                    }

                    /**
                     * catalog entry must not be able to set billingFactor for EBM.
                     */
                    if( entry.billingFactorValue && 'EBM' !== catalogShort && !options.skipBillingFactorCalculation ) {
                        activity.billingFactorValue = entry.billingFactorValue;
                    }

                    activity.chapter = entry.chapter || entry && entry.l3 && entry.l3.seq;

                    switch( catalogShort ) {
                        case 'UVGOÄ':
                            if( false === activity.catalog && !isNaN( entry.value ) ) {
                                activity.unit = activity.actualUnit = 'Euro';
                                activity.price = Number( entry.value );
                            } else if( activity.uvGoaeType && catalogShort && activity.u_extra && activity.u_extra.tarifvertrag ) {
                                activity.unit = activity.actualUnit = 'Euro';
                                activity.price = activity.actualPrice = self.toPrice( activity.u_extra.tarifvertrag[activity.uvGoaeType] );
                            }
                            break;
                        case 'GebüH':
                            if( activity.u_extra && activity.u_extra.pkv1 ) {
                                activity.unit = activity.actualUnit = 'Euro';
                                activity.price = activity.actualPrice = self.getGebueHPrice( activity.u_extra );
                            }
                            break;
                        case 'AMTS':
                            activity.unit = activity.actualUnit = entry.unit;
                            activity.price = activity.actualPrice = entry.value;
                            break;
                        case 'GOÄ':
                            if( !activity.billingFactorValue || entry.catalog ) {
                                if( !activity.billingFactorType ) {
                                    activity.billingFactorType = 'privatversicherte';
                                }
                                if( !options.skipBillingFactorCalculation ) {
                                    activity.billingFactorValue = getBillingFactor( activity.u_extra, activity.billingFactorType ) || '2.3';
                                }
                            }
                            if( 'bewertung_liste' === entry.unit && activity.u_extra && activity.u_extra.bewertung_liste && activity.u_extra.bewertung_liste[0] ) {
                                activity.actualUnit = activity.u_extra.bewertung_liste[0].unit;
                            } else {
                                activity.actualUnit = entry.unit;
                            }
                            activity.unit = 'Euro';

                            if( 'bewertung_liste' === entry.value && activity.u_extra && activity.u_extra.bewertung_liste && activity.u_extra.bewertung_liste[0] ) {
                                activity.actualPrice = activity.u_extra.bewertung_liste[0].value || 0;
                                activity.price = self.toPrice( activity.actualPrice, activity.billingFactorValue, ('Punkte' === activity.actualUnit ? Y.doccirrus.schemas.activity.goaeInvoiceFactor : undefined) );
                            } else {
                                activity.actualPrice = entry.value || 0;
                                activity.price = self.toPrice( activity.actualPrice, activity.billingFactorValue, ('Punkte' === activity.actualUnit ? Y.doccirrus.schemas.activity.goaeInvoiceFactor : undefined) );
                            }

                            break;
                        case 'EBM':
                            if( 'bewertung_liste' === entry.unit && activity.u_extra ) {
                                priceItem = Y.doccirrus.schemas.catalog.getPriceItemFromList( activity.u_extra.bewertung_liste );
                                activity.actualUnit = priceItem && priceItem.unit;
                            } else {
                                activity.actualUnit = entry.unit;
                            }
                            activity.unit = 'Euro';

                            if( 'bewertung_liste' === entry.value && activity.u_extra ) {
                                priceItem = Y.doccirrus.schemas.catalog.getPriceItemFromList( activity.u_extra.bewertung_liste );
                                if( 'Euro' === activity.actualUnit ) {
                                    activity.price = activity.actualPrice = self.toPrice( priceItem && priceItem.value );
                                } else {
                                    activity.actualPrice = priceItem && priceItem.value;
                                    activity.price = self.toPrice( activity.actualPrice, activity.billingFactorValue );
                                }
                            } else {
                                if( 'Punkte' === activity.actualUnit ) {
                                    activity.actualPrice = self.toPrice( entry.value );
                                    activity.price = self.toPrice( entry.value, activity.billingFactorValue );
                                } else {
                                    activity.actualPrice = self.toPrice( Y.doccirrus.comctl.dcDiv( entry.value, activity.billingFactorValue ) );
                                    activity.price = self.toPrice( entry.value );
                                }
                            }
                            break;
                        case 'TARMED_UVG_IVG_MVG':
                        case 'TARMED' :
                            activity.treatmentCategory = entry.treatmentCategory;
                            activity.divisionCode = entry.divisionCode;
                            activity.divisionText = entry.divisionText;
                            activity.anaesthesiaCode = entry.anaesthesiaCode;
                            activity.anaesthesiaText = entry.anaesthesiaText;
                            activity.medicalText = entry.medicalText;
                            activity.technicalText = entry.technicalText;
                            activity.medicalTaxPoints = entry.medicalTaxPoints;
                            activity.technicalTaxPoints = entry.technicalTaxPoints;
                            activity.assistanceTaxPoints = entry.assistanceTaxPoints;
                            activity.medicalScalingFactor = entry.medicalScalingFactor;
                            activity.technicalScalingFactor = entry.technicalScalingFactor;
                            activity.treatmentTime = entry.treatmentTime;
                            activity.preparationAndFollowUpTime = entry.preparationAndFollowUpTime;
                            activity.reportTime = entry.reportTime;
                            activity.roomOccupancyTime = entry.roomOccupancyTime;
                            activity.rotationTime = entry.rotationTime;
                            activity.assistanceQuantity = entry.assistanceQuantity;
                            activity.benefitsCode = entry.benefitsCode;
                            activity.benefitsText = entry.benefitsText;
                            activity.sideMandatory = entry.sideMandatory;
                            activity.price = entry.price;
                            break;
                        case 'EAL':
                        case 'MIGEL':
                        case 'ARZT_KVG_VVG':
                        case 'AMV':
                        case 'Pandemieleistungen':
                            activity.medicalText = entry.medicalText;
                            activity.treatmentTime = entry.treatmentTime;
                            activity.taxPoints = entry.taxPoints;
                            if(catalogShort !== 'EAL' && entry.u_extra && entry.u_extra.housecatalogPrice) {
                                activity.price = entry.u_extra.housecatalogPrice;
                            }
                            break;
                        default:
                            activity.actualUnit = entry.unit;
                            activity.actualPrice = ('undefined' === entry.value ) ? undefined : self.toPrice( entry.value );
                    }
                    if( 'undefined' === typeof activity.catalog ) {
                        shouldWaitForAsync = true;
                        if( isClient ) {
                            Y.doccirrus.KoViewModel.getConstructor( 'CatalogBasedActivityModel' ).checkCode( {
                                code: activity.code,
                                locationId: activity.locationId,
                                catalogRef: activity.catalogRef
                            } )
                                .done( function( response ) {
                                    var
                                        data = response.data;
                                    activity.catalog = true === data.catalogEntry;
                                    callback( null, activity );
                                } );

                        } else {
                            Y.doccirrus.api.activity.checkCatalogCode( {
                                user: user,
                                query: {
                                    seq: activity.code,
                                    catalog: activity.catalogRef,
                                    locationId: activity.locationId
                                },
                                callback: catalogCheckCb
                            } );
                        }
                    }

                }

                if( 'TREATMENT' === actType || 'MEDICATION' === actType ) {
                    if( ignoreList.indexOf( 'vat' ) === -1 ) {
                        activity.vat = entry.vat || 0;
                    }

                    if( ignoreList.indexOf( 'hasVat' ) === -1 ) {
                        activity.hasVat = entry.hasVat || false;
                    }

                }

                if( 'MEDICATION' === actType ) {
                    activity.phPriceSale = entry.phPriceSale;

                    if( countryMode.indexOf( 'D' ) > -1 ) {
                        activity.phPriceRecommended = entry.phPriceRecommended;
                        activity.phRefundAmount = entry.phRefundAmount;
                        activity.phPatPay = entry.phPatPay;
                        activity.phPatPayHint = entry.phPatPayHint;
                        activity.phFixedPay = entry.phFixedPay;
                        activity.phSalesStatus = entry.phSalesStatus;
                        activity.phNormSize = entry.phNormSize;
                    }
                    activity.phCheaperPkg = entry.phCheaperPkg;
                    activity.phOnly = entry.phOnly;
                    activity.phTer = entry.phTer;
                    activity.phTrans = entry.phTrans;
                    activity.phImport = entry.phImport;
                    activity.phNegative = entry.phNegative;
                    activity.phLifeStyle = entry.phLifeStyle;
                    activity.phLifeStyleCond = entry.phLifeStyleCond;
                    activity.phAMR = entry.phAMR;
                    activity.phAMRContent = entry.phAMRContent;
                    activity.phGBA = entry.phGBA;
                    activity.phGBATherapyHintName = entry.phGBATherapyHintName;
                    activity.phDisAgr = entry.phDisAgr;
                    activity.phDisAgrAlt = entry.phDisAgrAlt;
                    activity.phMed = entry.phMed;
                    activity.phPrescMed = entry.phPrescMed;
                    activity.phPZN = entry.phPZN || '';
                    activity.phCompany = entry.phCompany;
                    activity.phPackSize = entry.phPackSize;
                    activity.phPackQuantity = entry.phPackQuantity;
                    activity.phAtc = entry.phAtc;
                    activity.phIngr = entry.phIngr;
                    activity.phForm = entry.phForm;
                    activity.phFormCode = entry.phFormCode;
                    activity.phRecipeOnly = entry.phRecipeOnly;
                    activity.phBTM = entry.phBTM;
                    activity.phContraceptive = entry.phContraceptive;
                    activity.phNLabel = entry.phNLabel;
                    activity.phOTC = entry.phOTC;
                    activity.phOTX = entry.phOTX;
                    activity.phARV = entry.phARV;
                    activity.phARVContent = entry.phARVContent;
                    activity.dosis = entry.dosis;
                    activity.phDosisMorning = entry.phDosisMorning;
                    activity.phDosisAfternoon = entry.phDosisAfternoon;
                    activity.phDosisEvening = entry.phDosisEvening;
                    activity.phDosisNight = entry.phDosisNight;
                    activity.phDosisType = entry.phDosisType;
                    activity.phUnit = entry.phUnit;
                    activity.phNote = entry.phNote;
                    activity.phReason = entry.phReason;
                    activity.phSalesStatus = entry.phSalesStatus;
                    activity.phSelfMedication = entry.phSelfMedication;
                    activity.phHeader = entry.phHeader;
                    activity.catalogShort = entry.short || entry.catalogShort;
                    activity.insuranceCode = entry.insuranceCode;
                    activity.insuranceDescription = entry.insuranceDescription;
                    activity.paidByInsurance = entry.paidByInsurance;
                    activity.supplyCategory = entry.supplyCategory;
                    activity.phGTIN = entry.phGTIN;
                    activity.prdNo = entry.prdNo;
                    activity.units = entry.units;
                    activity.phForeignUnit = entry.phForeignUnit || entry.phUnit;
                    activity.phUnitDescription = entry.phUnitDescription;
                    activity.phContinuousMed = entry.phContinuousMed;
                    activity.phContinuousMedDate = entry.phContinuousMedDate;
                    activity.isDivisible = entry.isDivisible;
                    activity.divisibleCount = entry.divisibleCount;
                    activity.s_extra = entry.s_extra;
                    activity.noLongerValid = entry.noLongerValid;
                }

                if( !shouldWaitForAsync ) {
                    return callback( null, activity );
                }
            },

            /** List of Activity Types, array */
            activityTypes: getActivityTypes(),
            nameGroupedActivityTypeConfigs: getNameGroupedActivityTypeConfigs(),

            actTypeDefns: actTypeDefns,

            associateFieldWithActType: associateFieldWithActType,

            actTypeHasBackmapping: actTypeHasBackmapping,
            actTypeHasDocTree: actTypeHasDocTree,
            generateContent: generateContent,
            generateContentAsync: generateContentAsync,

            displayCode: displayCode,

            getFilteredStatuses: getFilteredStatuses,

            utilsOphthalmology: utilsOphthalmology,

            isLegalNewStatus: function( actType, currentStatus, newStatus ) {
                var self = this,
                    transitions = self.getTransitions( actType, currentStatus );
                /**
                 * special case for copying
                 */

                if( !currentStatus && 'CREATED' === newStatus ) {
                    return true;
                }

                //  these follow invoicelog state machines, not activity state machines
                if ( 'INVOICEREF' === actType || 'INVOICEREFGKV' === actType || 'INVOICEREFPVS' === actType ) {
                    return true;
                }

                if( 'PREPARED' === newStatus || 'PREPARED' === currentStatus ) {
                    return true;
                }

                function transitionChecker( transition ) {
                    return newStatus === transition.newStatus;
                }

                return transitions.some( transitionChecker );
            },

            isScheinActType: function( actType ) {
                return -1 !== scheinActTypes.indexOf( actType );
            },

            /**
             * Returns true for activity types for which the lastSchein context is generated in forms and reporting.
             * @param {String} actType
             */
            generatesLastScheinContext: function( actType ) {
                return -1 !== actTypesWithScheinContext.indexOf( actType );
            },
            actTypesWithScheinContext: actTypesWithScheinContext,

            isEdmpActType: function( actType ) {
                return -1 !== Y.doccirrus.schemas.casefolder.eDmpTypes.indexOf( actType );
            },

            /**
             *  Invoice activity types include invoices and references to invoice log types
             *  @param {String} actType
             */

            isInvoiceActType: function( actType ) {
                switch( actType ) {
                    case 'INVOICE':         return true;
                }
                return false;
            },

            /**
             *  Documents created in response to change if invoice state after approval - receipts, warnings, etc
             */

            isInvoiceCommunicationActType: function( actType ) {
                return ( -1 !== invoiceCommunicationActTypes.indexOf( actType ) );
            },

            isPrescriptionType: function( actType ) {
                switch( actType ) {
                    case 'PUBPRESCR':
                    case 'PRIVPRESCR':
                    case 'PRESCRBTM':
                    case 'PRESCRG':
                    case 'PRESCRT':
                    case 'LONGPRESCR':
                        return true;
                    default:
                        return false;
                }
            },

            /**
             * Returns a map of definitions on how to treat an "actType"
             *
             * @method getActTypeClientConfig
             * @param   {Object}    countryMode
             * @returns {Object}
             */
            getActTypeClientConfig: function( countryMode ) {
                var
                    config = {},

                    textform = 'textform',
                    tableform = 'tableform',
                    formform = 'formform',
                    formtreeform = 'formtreeform',
                    pdfform = 'pdfform',
                    documentform = 'documentform',
                    mediabuch = 'mediabuch',
                    specialModKinds = Y.doccirrus.schemas.settings.specialModuleKinds,
                    hasInGynLicence = Y.doccirrus.auth.hasSpecialModule( specialModKinds.GYN ),
                    hasInPediaLicence = Y.doccirrus.auth.hasSpecialModule( specialModKinds.PEDIA ),
                    // eslint-disable-next-line no-unused-vars
                    hasQDocuLicense = Y.doccirrus.auth.hasSpecialModule( specialModKinds.QDOCU ),
                    haInStockLicence = Y.doccirrus.auth.hasAdditionalService('inStock');

                countryMode = countryMode || ['D']; // Country defaults to 'D' to preserve functionality while we develop 'CH' features

                config.HISTORY = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'HistoryEditorModel',
                    activityModel: 'HistoryModel',
                    availableIn: [mediabuch]
                };
                config.EXTERNAL = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    availableIn: [mediabuch]
                };
                config.FROMPATIENT = {
                    activeTab: formform,
                    disabledTabs: [formtreeform],
                    activityEditor: 'FromPatientEditorModel',
                    activityModel: 'FromPatientModel',
                    tableEditor: 'CatalogTableEditorModel',
                    blockCreation: true //  can only be created by patient portal
                };
                config.FROMPATIENTMEDIA = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    blockCreation: true //  can only be created by patient portal
                };
                config.FINDING = {
                    activeTab: textform,
                    disabledTabs: [tableform],
                    activityEditor: 'FindingEditorModel',
                    activityModel: 'FindingModel',
                    availableIn: [mediabuch]
                };
                config.OBSERVATION = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'ObservationEditorModel',
                    activityModel: 'ObservationModel',
                    availableIn: [mediabuch]
                };
                config.PREVENTION = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    availableIn: [mediabuch]
                };
                config.UTILITY = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'UtilityEditorModel',
                    activityModel: 'UtilityModel',
                    blockCreation: true
                };
                config.KBVUTILITY = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'KBVUtilityEditorModel',
                    activityModel: 'KBVUtilityModel'
                };
                config.KBVUTILITY2 = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'KBVUtility2EditorModel',
                    activityModel: 'KBVUtility2Model'
                };
                config.KBVUTILITY2APPROVAL = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'KBVUtility2ApprovalEditorModel',
                    activityModel: 'KBVUtility2ApprovalModel'
                };
                config.PROCEDERE = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    availableIn: [mediabuch]
                };
                config.THERAPY = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'FormBasedActivityModel',
                    availableIn: [mediabuch]
                };
                config.SCHEIN = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'GKVScheinEditorModel',
                    activityModel: 'GKVScheinModel'
                };
                config.PKVSCHEIN = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'PKVScheinEditorModel',
                    activityModel: 'PKVScheinModel',
                    blockCreation: true //  cannot be manually created in inCase
                };
                config.AMTSSCHEIN = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'AMTSScheinEditorModel',
                    activityModel: 'AMTSScheinModel',
                    blockCreation: true //  cannot be manually created in inCase
                };
                config.BGSCHEIN = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'BGScheinEditorModel',
                    activityModel: 'BGScheinModel',
                    blockCreation: true //  cannot be manually created in inCase
                };
                config.PRIVPRESCR = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PrescriptionModel'
                };
                config.PUBPRESCR = {
                    activeTab: formform,
                    disabledTabs: [tableform, formtreeform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PrescriptionModel'
                };
                config.PRESASSISTIVE = {
                    activeTab: formform,
                    disabledTabs: [tableform, formtreeform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PresassistiveModel'
                };
                config.PRESCRBTM = {
                    activeTab: formform,
                    disabledTabs: [tableform, formtreeform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PrescriptionModel'
                };
                config.PRESCRG = {
                    activeTab: formform,
                    disabledTabs: [tableform, formtreeform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PrescriptionModel'
                };
                config.PRESCRT = {
                    activeTab: formform,
                    disabledTabs: [tableform, formtreeform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PrescriptionModel'
                };
                config.LONGPRESCR = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PrescriptionModel'
                };
                config.REMINDER = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'ReceiptEditorModel',
                    activityModel: 'ReceiptModel'
                };
                config.WARNING1 = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'ReceiptEditorModel',
                    activityModel: 'ReceiptModel'
                };
                config.WARNING2 = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'ReceiptEditorModel',
                    activityModel: 'ReceiptModel'
                };
                config.CREDITNOTE = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'ReceiptEditorModel',
                    activityModel: 'ReceiptModel'
                };
                config.BADDEBT = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'ReceiptEditorModel',
                    activityModel: 'ReceiptModel'
                };
                config.DOCLETTER = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'DocLetterModel',
                    availableIn: [mediabuch]
                };
                config.QUOTATION = {
                    activeTab: formform,
                    disabledTabs: [],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'QuotationModel',
                    tableEditor: 'QuotationTreatmentsTableEditorModel'
                };
                config.COMMUNICATION = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'FormBasedActivityModel',
                    availableIn: [mediabuch]
                };
                config.PROCESS = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'ProcessEditorModel',
                    activityModel: 'ProcessModel',
                    availableIn: [mediabuch]
                };
                config.FORM = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'FormModel',
                    availableIn: [mediabuch]
                };
                config.RECEIPT = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'ReceiptEditorModel',
                    activityModel: 'ReceiptModel',
                    availableIn: [mediabuch]
                };
                config.PUBRECEIPT = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'PubReceiptModel',
                    availableIn: [mediabuch]
                };
                config.OPHTHALMOLOGY_TONOMETRY = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'TonometryEditorModel',
                    activityModel: 'TonometryModel'
                };
                config.OPHTHALMOLOGY_REFRACTION = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'RefractionEditorModel',
                    activityModel: 'RefractionModel'
                };
                config.TELECONSULT = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform, documentform],
                    activityEditor: 'TeleconsultEditorModel',
                    activityModel: 'TeleconsultModel'
                };
                config.CONTACT = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
					availableIn: [mediabuch]
                };
                config.LABREQUEST = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'LabRequestEditorModel',
                    activityModel: 'LabRequestModel'
                };
                config.LABDATA = {
                    activeTab: tableform,
                    disabledTabs: [formform, formtreeform, pdfform],
                    activityEditor: 'LabDataEditorModel',
                    activityModel: 'LabDataModel',
                    tableEditor: 'LabdataTableEditorModel',
                    blockForCaseFolderTypes: [ 'PREPARED' ] // do not allowed creation in PREPARED casefolder
                };
                config.ASSISTIVE = {
                    activeTab: '',
                    disabledTabs: [formform, formtreeform, pdfform],
                    activityEditor: 'AssistiveEditorModel',
                    activityModel: 'AssistiveModel',
                    tableEditor: 'CatalogTableEditorModel'
                };
                config.EHKSD = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'EhksDEditorModel',
                    activityModel: 'EhksDModel',
                    blockCreation: true
                };
                config.EHKSND = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'EhksNDEditorModel',
                    activityModel: 'EhksNDModel',
                    blockCreation: true
                };
                config.DM1 = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpDm1EditorModel',
                    activityModel: 'DmpDm1Model',
                    blockCreation: true
                };
                config.DM2 = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpDm2EditorModel',
                    activityModel: 'DmpDm2Model',
                    blockCreation: true
                };
                config.BK = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpBkEditorModel',
                    activityModel: 'DmpBkModel',
                    blockCreation: true
                };
                config.HGV = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpHgvEditorModel',
                    activityModel: 'DmpHgvModel',
                    blockCreation: true
                };
                config.HGVK = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpHgvEditorModel',
                    activityModel: 'DmpHgvModel',
                    blockCreation: true
                };
                config.ZERVIX_ZYTOLOGIE = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpZervixZytologieEditorModel',
                    activityModel: 'DmpZervixZytologieModel',
                    blockCreation: true
                };
                config.KHK = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpKhkEditorModel',
                    activityModel: 'DmpKhkModel',
                    blockCreation: true
                };
                config.ASTHMA = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpAsthmaEditorModel',
                    activityModel: 'DmpAsthmaModel',
                    blockCreation: true
                };
                config.COPD = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'DmpCopdEditorModel',
                    activityModel: 'DmpCopdModel',
                    blockCreation: true
                };
                config.CAVE = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'CaveEditorModel',
                    activityModel: 'CaveModel',
                    availableIn: [mediabuch]
                };
                //if( Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland() ) {
                    config.MEDICATIONPLAN = {
                        activeTab: '',
                        disabledTabs: [tableform, formform, formtreeform, pdfform],
                        activityEditor: 'MedicationPlanEditorModel',
                        activityModel: 'MedicationPlanModel',
                        blockCreation: Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland()
                    };
                //}

                //if( Y.doccirrus.commonutils.doesCountryModeIncludeGermany() ) {
                    config.KBVMEDICATIONPLAN = {
                        activeTab: '',
                        disabledTabs: [tableform, formform, formtreeform, pdfform],
                        activityEditor: 'KBVMedicationPlanEditorModel',
                        activityModel: 'KBVMedicationPlanModel',
                        blockCreation: Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland() && !Y.doccirrus.commonutils.doesCountryModeIncludeGermany
                    };
                // }
                config.QDOCU = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'QDocuEditorModel',
                    activityModel: 'QDocuModel',
                    blockForCaseFolderTypes: ["PRIVATE", "BG", "SELFPAYER"]
                };
                config.MEASUREMENT = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'MeasurementEditorModel',
                    activityModel: 'MeasurementModel',
                    blockCreation: true
                };
                config.HEALTHSURVEY = {
                    activeTab: formform,
                    disabledTabs: [tableform],
                    activityEditor: 'HealthSurveyEditorModel',
                    activityModel: 'HealthSurveyModel'
                };
                config.SURGERY = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'SurgeryEditorModel',
                    activityModel: 'SurgeryModel',
                    availableIn: [mediabuch]
                };
                config.MEDDATA = {
                    activeTab: '',
                    disabledTabs: [pdfform],
                    activityEditor: 'MedDataEditorModel',
                    activityModel: 'MedDataModel',
                    tableEditor: 'MedDataTableEditorModel'
                };
                config.INGREDIENTPLAN = {
                    activeTab: '',
                    disabledTabs: [],
                    activityEditor: 'MedDataEditorModel',
                    activityModel: 'MedDataModel',
                    tableEditor: 'MedDataTableEditorModel'
                };
                config.GRAVIDOGRAMM = {
                    activeTab: tableform,
                    disabledTabs: [],
                    activityEditor: 'GravidogrammEditorModel',
                    activityModel: 'GravidogrammModel',
                    blockCreation: !hasInGynLicence,
                    tableEditor: 'MedDataTableEditorModel'
                };
                config.GRAVIDOGRAMMPROCESS = {
                    activeTab: '',
                    disabledTabs: [formform, formtreeform, pdfform],
                    activityEditor: 'GravidogrammProcessEditorModel',
                    activityModel: 'GravidogrammProcessModel',
                    tableEditor: 'MedDataTableEditorModel',
                    blockCreation: true // now created from button on Gravidogramm UI
                };
                config.CHECKUPPLAN = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'CheckupPlanEditorModel',
                    activityModel: 'CheckupPlanModel',
                    blockCreation: !hasInPediaLicence
                };
                config.PERCENTILECURVE = {
                    activeTab: '',
                    disabledTabs: [ formform, formtreeform, pdfform ],
                    activityEditor: 'PercentileCurveEditorModel',
                    activityModel: 'PercentileCurveModel',
                    tableEditor: 'MedDataTableEditorModel',
                    blockCreation: !hasInPediaLicence
                };
                config.DOCLETTERDIAGNOSIS = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'FormBasedActivityModel',
                    availableIn: [mediabuch]
                };
                config.INVOICEREFPVS = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    blockCreation: true                         //   EXTMOJ-1347, created by process
                };
                config.INVOICEREFGKV = {
                    activeTab: '',
                    disabledTabs: [tableform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    blockCreation: true                         //   EXTMOJ-1347, created by process
                };
                config.THERAPYSTEP = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    availableIn: [mediabuch]
                };

                config.STOCKDISPENSE = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    availableIn: [mediabuch],
                    blockCreation: true,
                    isBlockedForSequence: true
                };
                config.VACCINATION = {
                    activeTab: '',
                    disabledTabs: [tableform, formform, formtreeform, pdfform],
                    activityEditor: 'SimpleActivityEditorModel',
                    activityModel: 'SimpleActivityModel',
                    availableIn: [mediabuch]
                };


            // COUNTRY-SPECIFIC CONFIGS ================================================================================
                if( countryMode.indexOf( 'D' ) > -1 ) {
                    config.TREATMENT = {
                        activeTab: '',
                        disabledTabs: [formform, formtreeform, pdfform],
                        activityEditor: 'TreatmentEditorModel',
                        activityModel: 'TreatmentModel',
                        tableEditor: 'CatalogTableEditorModel'
                    };
                    config.INVOICE = {
                        activeTab: formform,
                        disabledTabs: [tableform],
                        activityEditor: 'SimpleActivityEditorModel',
                        activityModel: 'InvoiceModel',
                        availableIn: [mediabuch]
                    };
                    config.INVOICEREF = {
                        activeTab: '',
                        disabledTabs: [tableform],
                        activityEditor: 'SimpleActivityEditorModel',
                        activityModel: 'InvoiceModel',
                        blockCreation: true
                    };
                    config.AU = {
                        activeTab: '',
                        disabledTabs: [tableform],
                        activityEditor: 'AuEditorModel',
                        activityModel: 'AuModel'
                    };
                    config.REFERRAL = {
                        activeTab: '',
                        disabledTabs: [tableform],
                        activityEditor: 'ReferralEditorModel',
                        activityModel: 'ReferralModel'
                    };
                    config.MEDICATION = {
                        activeTab: '',
                        disabledTabs: haInStockLicence ? [] : [formform, formtreeform, pdfform],
                        activityEditor: 'MedicationEditorModel',
                        activityModel: 'MedicationModel',
                        tableEditor: 'CatalogTableEditorModel'
                    };
                    config.DIAGNOSIS = {
                        activeTab: '',
                        disabledTabs: [formform, formtreeform, pdfform],
                        activityEditor: 'DiagnosisEditorModel',
                        activityModel: 'DiagnosisModel',
                        tableEditor: 'CatalogTableEditorModel'
                    };

                } else if ( countryMode.indexOf( 'CH' ) > -1 ) {
                    config.TREATMENT = {
                        activeTab: '',
                        disabledTabs: [formform, formtreeform, pdfform],
                        activityEditor: 'TreatmentChEditorModel',
                        activityModel: 'TreatmentChModel',
                        tableEditor: 'CatalogTableEditorModel'
                    };
                    config.INVOICEREF = {
                        activeTab: '',
                        disabledTabs: [tableform],
                        activityEditor: 'InvoiceChEditorModel',
                        activityModel: 'InvoiceModel',
                        blockCreation: true                         //   EXTMOJ-1347, created by process
                    };
                    config.INVOICE = {
                        activeTab: formform,
                        disabledTabs: [tableform],
                        activityEditor: 'InvoiceChEditorModel',
                        activityModel: 'InvoiceModel',
                        availableIn: [mediabuch]
                    };
                    config.AU = {
                        activeTab: formform,
                        disabledTabs: [tableform],
                        activityEditor: 'AuChEditorModel',
                        activityModel: 'AuModel'
                    };
                    config.REFERRAL = {
                        activeTab: formform,
                        disabledTabs: [tableform],
                        activityEditor: 'ReferralChEditorModel',
                        activityModel: 'ReferralModel'
                    };
                    config.MEDICATION = {
                        activeTab: '',
                        disabledTabs: haInStockLicence ? [formtreeform] : [formform, formtreeform, pdfform],
                        activityEditor: 'MedicationChEditorModel',
                        activityModel: 'MedicationChModel',
                        tableEditor: 'CatalogTableEditorModel'
                    };
                    config.DIAGNOSIS = {
                        activeTab: '',
                        disabledTabs: [formform, formtreeform, pdfform],
                        activityEditor: 'DiagnosisChEditorModel',
                        activityModel: 'DiagnosisChModel',
                        tableEditor: 'CatalogTableEditorModel'
                    };
                }

            // COUNTRY-SPECIFIC CONFIGS - END ==========================================================================


                return config;
            },

            /**
             * constants for "activity._attributes" which are used to flag an activity of some kind
             */
            ATTRIBUTES: {
                DAY_SEPARATION_FLAG: 1,
                NEW_DAY_FLAG: 2,
                QUARTER_CHANGE_FLAG: 3
            },
            /**
             * Returns map insurance - 'Schein' actType
             * @returns {Object}
             */
            getInsuranceScheinMap: function() {
                return {
                    'PUBLIC': 'SCHEIN',
                    'PUBLIC_A':'SCHEIN',
                    'PRIVATE': 'PKVSCHEIN',
                    'PRIVATE_A': 'PKVSCHEIN',
                    'PRIVATE_CH': 'PKVSCHEIN',
                    'SELFPAYER': 'PKVSCHEIN',
                    'PRIVATE_CH_IVG': 'PKVSCHEIN',
                    'PRIVATE_CH_UVG': 'PKVSCHEIN',
                    'PRIVATE_CH_MVG': 'PKVSCHEIN',
                    'PRIVATE_CH_VVG': 'PKVSCHEIN',
                    'BG': 'BGSCHEIN',
                    'PREGNANCY': 'GRAVIDOGRAMM'
                };
            },
            /**
             * Returns map 'Schein' actType - insurance
             * @returns {Object}
             */
            getScheinInsuranceMap: function() {
                return {
                    'SCHEIN': ['PUBLIC', 'PUBLIC_A'],
                    'PKVSCHEIN': ['PRIVATE', 'PRIVATE_A', 'PRIVATE_CH', 'PRIVATE_CH_IVG', 'PRIVATE_CH_UVG', 'PRIVATE_CH_MVG', 'PRIVATE_CH_VVG'],
                    'BGSCHEIN': ['BG'],
                    'AMTSSCHEIN': ['SELFPAYER']
                };
            },
            scheinActTypes: scheinActTypes,
            medDataActType: medDataActType,
            swissInsuranceDescription: swissInsuranceDescription,
            medDataActTypes: medDataActTypes,
            getAllFieldsFromSchemaPath: getAllFieldsFromSchemaPath,
            /**
             * @method isCatalogType
             * @param {String} actType
             * @returns {boolean}
             */
            isCatalogType: function( actType ) {
                var
                    catalogActTypes = Y.doccirrus.schemas.catalog.getDisplayCatalogActTypes();
                return -1 !== catalogActTypes.indexOf( actType );
            },

            getRuleEngineSchema: getRuleEngineSchema,
            /**
             * @method hasForm
             * @param {String} actType
             * @returns {boolean}
             */
            hasForm: function( actType ) {
                var
                    actTypeClientConfig = this.getActTypeClientConfig();
                if( actType ) {
                    return -1 === actTypeClientConfig[actType].disabledTabs.indexOf( 'formform' );
                }
            },
            //  return true if this activity type has a mask in inCase (controls when forms are remapped)
            isMaskType: function( actType, caseFolderType ) {
                var maskTypes = [
                    'UTILITY',
                    'KBVUTILITY',
                    'KBVUTILITY2',
                    'LABREQUEST',
                    'REFERRAL',
                    'AU',
                    'RECEIPT',
                    'GRAVIDOGRAMM',
                    'MEDICATION'
                ];

                if( Y.doccirrus.schemas.activity.CASE_FOLDER_TYPE_TO_COUNTRY_MAP[caseFolderType] === 'CH' && (actType === 'AU' || actType === 'REFERRAL') ) {
                    return false;
                }

                return -1 < maskTypes.indexOf( actType );
            },
            /**
             * MOJ-11762: if a diagnosis has an invalidation date or is set to INVALIDATING, return true
             * @param activity
             * @returns {boolean}
             */
            isInvalidatedOrInvalidatingDiagnosis: function( activity ) {
                var diagnosisInvalidationDate = activity.diagnosisInvalidationDate && unwrap( activity.diagnosisInvalidationDate ),
                    diagnosisTreatmentRelevance = activity.diagnosisTreatmentRelevance && unwrap( activity.diagnosisTreatmentRelevance );
                return (diagnosisInvalidationDate || diagnosisTreatmentRelevance === "INVALIDATING");
            },
            phDosisTypes: phDosisTypes,
            getMedicationDosis: getMedicationDosis,
            goaeInvoiceFactor: 0.0582873,
            getDiscriminatorKeyName: function() {
                return 'actType';
            },
            getDiscriminator: function( key ) {
                var
                    keyLC;

                if( !key ) {
                    return 'v_simple_activity';
                }
                keyLC = key.toLowerCase();

                switch( key ) {
                    case 'DM1':
                        return 'v_dmpdm1';
                    case 'DM2':
                        return 'v_dmpdm2';
                    case 'BK':
                        return 'v_dmpbk';
                    case 'HGV':
                    case 'HGVK':
                        return 'v_dmphgv';
                    case 'ZERVIX_ZYTOLOGIE':
                        return 'v_dmpzervixzytologie';
                    case 'KHK':
                        return 'v_dmpkhk';
                    case 'ASTHMA':
                        return 'v_dmpasthma';
                    case 'COPD':
                        return 'v_dmpcopd';
                    case 'SCHEIN':
                        return 'v_gkv_schein';
                    case 'PKVSCHEIN':
                        return 'v_pkv_schein';
                    case 'AMTSSCHEIN':
                        return 'v_amts_schein';
                    case 'BGSCHEIN':
                        return 'v_bg_schein';
                    case 'PRESCRBTM':
                    case 'PRESCRG':
                    case 'PRESCRT':
                    case 'PUBPRESCR':
                    case 'PRIVPRESCR':
                    case 'LONGPRESCR':
                        return 'v_prescription';
                    case 'WARNING1':
                    case 'WARNING2':
                    case 'CREDITNOTE':
                    case 'COMMUNICATION':
                    case 'BADDEBT':
                    case 'RECEIPT':
                    case "REMINDER":
                        return 'v_receipt';
                    default:
                        if( Y.doccirrus.schemas['v_' + keyLC] ) {
                            return 'v_' + keyLC;
                        } else {
                            return 'v_simple_activity';
                        }
                }
            },
            getForbiddenActTypeForGroup: function( group ) {
                var
                    actTypeList;
                switch( group ) {
                    case Y.doccirrus.schemas.employee.userGroups.REDUCED_USER:
                        actTypeList = [
                            'TREATMENT', 'CREDITNOTE', 'WARNING1', 'WARNING2',
                            'INVOICE', 'QUOTATION', 'PUBRECEIPT', 'RECEIPT', 'BADDEBT'
                        ];
                        break;
                    default:
                        actTypeList = [];
                }
                return actTypeList;
            },
            isEdmp: function ( actType ) {
                return -1 !== eDmpActTypes.indexOf( actType );
            },
            isHgv: function ( actType ) {
                return -1 !== eHgvActTypes.indexOf( actType );
            },
            isEdoc: function ( actType ) {
                return -1 !== eDocActTypes.indexOf( actType );
            },
            isZervixZytologie: function ( actType ) {
                return -1 !== eZervixZytologieActTypes.indexOf( actType );
            },
            isQDocu: function ( actType ) {
                return -1 !== eQDocuActTypes.indexOf( actType );
            },
            eDocActTypes: eDocActTypes,
            eDmpActTypes: eDmpActTypes,
            eHksActTypes: eHksActTypes,
            eHgvActTypes: eHgvActTypes,
            eZervixZytologieActTypes: eZervixZytologieActTypes,
            QDocuFieldsRelated: QDocuFieldsRelated,
            eQDocuActTypes: eQDocuActTypes,
            isEhks: function ( actType ) {
                return -1 !== eHksActTypes.indexOf( actType );
            },
            CASE_FOLDER_TYPE_TO_COUNTRY_MAP: CASE_FOLDER_TYPE_TO_COUNTRY_MAP,
            TARMED_CATALOGS_MAP: TARMED_CATALOGS_MAP,
            PRESCRIPTION_ACT_TYPES: PRESCRIPTION_ACT_TYPES,
            ignoreAPK: ignoreAPK,
            //  flatten an array of active ingredients from a medication
            serializePhIngr: function( phIngr ) {
                var txt = '', i;
                for( i = 0; i < phIngr.length; i++ ) {
                    if( i !== 0 ) {
                        txt = txt + ', ';
                    }
                    txt = txt + phIngr[i].name + ' (' + phIngr[i].strength + ')';
                }
                return txt;
            },

            // expose the classes
            ActivitySchema: ActivitySchema,
            generateSchein: generateSchein,
            runOnStart: runOnStart
        };

        Y.doccirrus.schemaloader.mixSchema( Y.doccirrus.schemas[NAME], true );
    },
    '0.0.1',
    {
        requires: [
            'oop',
            'dcschemaloader',
            'doccirrus',
            'dckbvutils',
            'dccommonutils',
            'kbv-validations',
            'employee-schema',
            'catalog-schema',
            'identity-schema',
            'severity-schema',
            //'labdata-finding-utils',
            'dc-comctl',
            'kbvutilitycatalogcommonutils'
        ]
    }
);
