/**
 * User: pi
 * Date: 27/01/15  12:015
 * (c) 2015, Doc Cirrus GmbH, Berlin
 */

/*exported _fn */
/*global ko, moment, $, Promise, async, _ */
/*eslint prefer-template:0, strict:0 */

'use strict';

function _fn( Y, NAME ) {

    var
        KoUI = Y.doccirrus.KoUI,
        KoComponentManager = KoUI.KoComponentManager,
        i18n = Y.doccirrus.i18n,
        transitionList = Y.doccirrus.schemas.activity.getTransitionList(),
        unwrap = ko.unwrap,

        //  send in websocket event to note end of potentially long-running processes
        START_PROCESS_MARKER = '<!- start ->',
        END_PROCESS_MARKER = '<!- complete ->',
        RELOAD_TABLE_MARKER = '<!- reload ->',

        KoViewModel = Y.doccirrus.KoViewModel,
        ActivityModel = KoViewModel.getConstructor( 'ActivityModel' ),
        ActivityActionButtonsViewModel = KoViewModel.getConstructor( 'ActivityActionButtonsViewModel' ),
        allLocations,
        currentUser,
        waitDays,
        activitySettings,

        DATE = i18n( 'InvoiceMojit.cashbookJS.title.DATE' ),
        PAYMENT_DATE = i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_DATE' ),
        INVOICE_DATE = i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_DATE' ),
        PAYMENT_CONTENT = i18n( 'InvoiceMojit.cashbookJS.title.PAYMENT_CONTENT' ),
        INVOICENO = i18n( 'InvoiceMojit.cashbookJS.title.INVOICENO' ),
        SUM = i18n( 'InvoiceMojit.cashbookJS.title.SUM' ),
        INVOICETYPE = i18n( 'InvoiceMojit.cashbookJS.title.INVOICETYPE' ),
        FIRSTNAME = i18n( 'InvoiceMojit.cashbookJS.title.FIRSTNAME' ),
        LASTNAME = i18n( 'InvoiceMojit.cashbookJS.title.LASTNAME' ),
        STATUS = i18n( 'InvoiceMojit.cashbookJS.title.STATUS' ),
        PATIENTNO = i18n( 'InvoiceMojit.cashbookJS.title.PATIENTNO' ),
        COST_UNIT = i18n( 'InvoiceMojit.cashbookJS.title.COST_UNIT' ),
        COST_UNIT_IKNR = i18n( 'InvoiceMojit.cashbookJS.title.COST_UNIT_IKNR' ),
        RULE_STATUS = i18n( 'activity-schema.Invoice_T.ruleStatus.i18n' ),
        DEBTCOLLECTION = i18n( 'activity-schema.Schein_T.debtCollection.i18n' ),
        ERROR_WHILE_SAVING = i18n( 'general.message.ERROR_WHILE_SAVING' ),
        MERGE_PDFS = i18n( 'InvoiceMojit.cashbookJS.messages.MERGE_PDFS' ),
        RESTBETRAG = i18n( 'activity-schema.Invoice_T.totalReceiptsOutstanding.i18n' ),
        QUITTUNGEN = i18n( 'activity-schema.Invoice_T.totalReceipts.i18n' ),
        GENERATE_INVOICES = i18n( 'InvoiceMojit.cashbookJS.title.GENERATE_INVOICES' ),
        SOME_INVOICES_NOT_VALID_WARNING = i18n( 'InvoiceMojit.cashbookJS.messages.SOME_INVOICES_NOT_VALID_WARNING' );

    function CashBookViewModel( config ) {
        var
            self = this,
            locations = config.locations || [],
            enableTransitions = {},
            allowedLocationIds = [],
            forbiddenTransitions = {
                'validate': true,
                'archive': true
            };

        /**
         *  Instantiate components and subscribe to events
         */

        function init() {

            /*
             *  Check user profile for the set of locations their account has access to
             */

            var i;
            if( config.user && config.user.locations ) {
                allowedLocationIds = [];
                for( i = 0; i < config.user.locations.length; i++ ) {
                    allowedLocationIds.push( config.user.locations[i]._id );
                }
            }

            /*
             *  KO components and observables
             */

            //  False if no process is ongoing, start at true until status checked on server
            self.isVisible = true;
            self.inProcess = ko.observable( false );
            self.showPdfBar = ko.observable( false );
            self.listenForConcat = ko.observable( false );
            self.setData = {};
            self.doAfterPrint = ko.observable( null );

            //  Progress bar for overall process
            self.progressBarProcess = new ProgressBarModel();

            //  Progress bar for current document / task
            self.progressBarDocument = new ProgressBarModel();

            //  Checkbox "nur automatisch erzeugte Rechnungen anzeigen"
            self.showAutoGeneratedOnly = ko.observable( Y.doccirrus.utils.localValueGet( 'showAutoGeneratedOnly' ) === 'true' || false );
            self.notShowCanceled = ko.observable( Y.doccirrus.utils.localValueGet( 'notShowCanceled' ) === 'true' || false );
            self.dateSelectorSwitchMode = Y.doccirrus.utils.localValueGet( 'dateSelectorSwitchMode' );

            // init date range selector and set table params
            self.dateSelector = KoComponentManager.createComponent( {
                componentType: 'KoDateRangeSelector',
                componentConfig: {
                    switchMode: self.dateSelectorSwitchMode || 'quarter'
                }
            } );

            self.tableBaseParams = ko.computed( function() {
                var
                    baseParams = {
                        'query': {
                            //  User can only view invoices at locations they are authorized for, EXTMOJ-773
                            locationId: { $in: allowedLocationIds },
                            '$and': [{timestamp: {
                                '$lte': self.dateSelector.endDate(),
                                '$gte': self.dateSelector.startDate()
                            }}]
                        }
                    };

                if( self.showAutoGeneratedOnly() ) {
                    baseParams.query.autoGenerated = { $exists: true } ;
                }

                if( self.notShowCanceled() ) {
                    baseParams.query.$and.push({status: {$ne: 'CANCELLED' }});
                }


                // save dateSelector mode in localStorage
                Y.doccirrus.utils.localValueSet( 'dateSelectorSwitchMode', unwrap( self.dateSelector.switchMode ));
                // save checkboxes data in localStorage
                Y.doccirrus.utils.localValueSet( 'showAutoGeneratedOnly', unwrap( self.showAutoGeneratedOnly ));
                Y.doccirrus.utils.localValueSet( 'notShowCanceled', unwrap( self.notShowCanceled ));

                return baseParams;
            } );

            //  Invoice table
            self.initInvoiceTable();

            //  Computeds for UI visibility, etc
            self.initComputeds();

            //  Transition and print buttons at bottom of table
            self.transitionButtons = ko.observableArray();
            self.initTransitionButtons();

            //translates
            self.showAutoGenInvoicesI18n = i18n( 'InvoiceMojit.cashbook.label.SHOW_AUTO_GEN_INVOICES_ONLY' );
            self.notShowCanceledI18n = i18n( 'InvoiceMojit.cashbook.label.NOT_SHOW_CANCELLED' );

            /*
             *  Websocket events
             */

            self.socket = Y.doccirrus.communication.getSocket( '/' );

            //  Server-side process notes updated status
            Y.doccirrus.communication.on( {
                event: 'cashbookProgress',
                socket: self.socket,
                done: onCashbookProgress,
                handlerId: 'invoiceCashbookProgressnHandler'
            } );

            self.lastProgress = 0;

            //  When a PDF has been generated on the server (from an invoice form)
            Y.doccirrus.communication.on( {
                event: 'onPDFCreated',
                socket: self.socket,
                done: onMsgPDFQueued,
                handlerId: 'invoiceBatchCreationActionHandler'
            } );

            //  When a PDF has been compiled on the server (from a set of invoice PDFs)
            Y.doccirrus.communication.on( {
                event: 'mediaConcatenatePDFs',
                socket: Y.doccirrus.communication.getSocket( '/' ),
                done: onMediaConcatenatePDFs,
                handlerId: 'mediaConcatenatePDFsActionHandler'
            } );

            //  Updates on progress during batch invoice creation
            Y.doccirrus.communication.on( {
                event: 'invoiceBatchCreationAction',
                socket: self.socket,
                done: onInvoiceBatchCreationAction,
                handlerId: 'invoiceBatchCreationActionHandler'
            } );

            //  Updates on progress during cashbook transition
            Y.doccirrus.communication.on( {
                event: 'cashbookTransition',
                socket: self.socket,
                done: onCashbookTransition,
                handlerId: 'cashbookTransitionHandler'
            } );

            //  Updates on progress during cashbook transition
            Y.doccirrus.communication.on( {
                event: 'linkedActivityUpdate',
                socket: self.socket,
                done: onLinkedActivityUpdate,
                handlerId: 'cashbookLinkedActivityUpdateHandler'
            } );

            Y.doccirrus.communication.on( {
                event: 'invoiceTransitionDone',
                handlerId: 'cashbookTransitionHandler',
                done: function success() {
                    self.invoiceKoTable.reload();
                }
            } );

            Y.doccirrus.communication.on( {
                event: 'activityPrinted',
                handlerId: 'activityPrintedHandler',
                done: function success() {
                    self.invoiceKoTable.reload();
                }
            } );

            Y.doccirrus.communication.on( {
                event: 'asyncPDFPrinted',
                // note: specifying a socket here will cause this to fail after navigation,
                //socket: Y.doccirrus.communication.getSocket( '/' ),
                done: function onFormExportMessage( message ) {
                    var evt = message.data && message.data[0];
                    Y.log( 'PDF render progress: ' + JSON.stringify( evt ), 'debug', NAME );

                    var
                        printMessageId = unwrap( evt.mediaId ) + '-' + Y.doccirrus.comctl.getRandId(),
                        printMessage = '' +
                                       i18n( 'InCaseMojit.casefile_exports.print_modal.printed' ) + evt.msg + '<br/>' +
                                       i18n( 'InCaseMojit.casefile_exports.print_modal.printer' ) + evt.printerName;

                    //  Display system message to the user
                    Y.doccirrus.DCSystemMessages.addMessage( {
                        messageId: printMessageId,
                        content: printMessage,
                        level: 'SUCCESS'
                    } );

                    //  hide the message after a few seconds
                    window.setTimeout( function() { Y.doccirrus.DCSystemMessages.removeMessage( printMessageId ); }, Y.dcforms.PRINT_MSG_TIMEOUT );

                },
                handlerId: 'cashbookPDFPrintHandler'
            } );

            /*
             *  Server state
             */

            self.checkProcessStatus();
        }

        /**
         *  Create invoice table and subscribe to selections
         */

        self.initInvoiceTable = function __initInvoiceTable() {

            var
                locations = config.user && config.user.locations ? config.user.locations : [],
                locationFilter = locations.map( function( location ) {
                    return { val: location._id, i18n: location.locname };
                } ),
                days = config && config.days;

            self.selectedTableRows = ko.observableArray( [] );

            self.invoiceKoTable = KoComponentManager.createComponent( {
                componentType: 'KoTable',
                componentConfig: {
                    ignoreCountLimit: true,
                    formRole: 'casefile-ko-invoice-table',
                    pdfTitle: i18n( 'InvoiceMojit.cashbookJS.pdfTitle' ),
                    stateId: 'InvoiceMojit-InvoiceNavigationBinderIndex-invoiceKoTable',
                    states: ['limit'],
                    fillRowsToLimit: false,
                    baseParams: self.tableBaseParams,
                    remote: true,
                    rowPopover: false,
                    selectMode: 'multi',
                    proxy: Y.doccirrus.jsonrpc.api.activity.getCashBook,
                    columns: [
                        {
                            componentType: 'KoTableColumnCheckbox',
                            forPropertyName: 'select',
                            notVisibleAtSummaryRow: true,
                            label: ''
                        },
                        {
                            forPropertyName: 'timestamp',
                            label: DATE,
                            title: DATE,
                            renderer: function( meta ) {
                                var data = meta.row;
                                if( !data.timestamp ) {
                                    return '';
                                }
                                return moment( data.timestamp ).format( 'DD.MM.YYYY' );
                            },
                            isSortable: true,
                            direction: 'DESC',
                            isFilterable: true,
                            queryFilterType: Y.doccirrus.DCQuery.DATE_RANGE_OPERATOR,
                            filterField: {
                                componentType: 'KoSchemaValue',
                                componentConfig: {
                                    fieldType: 'DateRange',
                                    showLabel: false,
                                    isOnForm: false,
                                    required: false,
                                    placeholder: DATE,
                                    autoCompleteDateRange: true
                                }
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'invoiceNo',
                            label: INVOICENO,
                            title: INVOICENO,
                            pdfTitle: 'Rech.Nr.',
                            renderer: function( meta ) {
                                //  TODO: add align property to KoTable columns
                                return '<span style="float: right;">' + ( meta.row.invoiceNo || '') + '</span>';
                            },
                            isSortable: true,
                            direction: 'DESC',
                            isFilterable: true,
                            width: '5%'
                        },
                        {
                            forPropertyName: 'price',
                            label: SUM,
                            title: SUM,
                            renderer: function( meta ) {
                                //  TODO: add align property to KoTable columns
                                if( meta.row && meta.row[0] ) {
                                    return '<span style="float: right;">' + Y.doccirrus.comctl.numberToLocalString( meta.row[0].price ) + '</span>';
                                }
                                var formatPrice = Y.doccirrus.comctl.numberToLocalString( meta.row.price );
                                return '<span style="float: right;">' + formatPrice + '</span>';
                            },
                            isSortable: true,
                            direction: 'DESC',
                            isFilterable: true,
                            queryFilterType: Y.doccirrus.DCQuery.GT_OPERATOR,
                            filterField: {
                                componentType: 'KoSchemaValue',
                                componentConfig: {
                                    fieldType: 'Number',
                                    showLabel: false,
                                    isOnForm: false,
                                    required: false,
                                    isSelectMultiple: false,
                                    placeholder: SUM
                                }
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'totalReceipts',
                            label: QUITTUNGEN,
                            title: QUITTUNGEN,
                            renderer: function( meta ) {
                                //  TODO: add align property to KoTable columns
                                var
                                    rowPrice = meta.row.price || 0,
                                    totalReceipts = meta.row.totalReceipts || 0,
                                    textColor = ( rowPrice > totalReceipts ? 'row' : 'green' ),

                                    formatTotalReceipts = Y.doccirrus.comctl.numberToLocalString( totalReceipts );

                                // value for total row
                                if( meta.row && meta.row[0] ) {
                                    return '<span style="float: right;">' + Y.doccirrus.comctl.numberToLocalString( meta.row[0].totalReceipts ) + '</span>';
                                }

                                //  MOJ-6627 remaining balance considered to be zero once paid
                                if( 'CREDITED' === meta.row.status || 'ARCHIVED' === meta.row.status ) {
                                    formatTotalReceipts = Y.doccirrus.comctl.numberToLocalString( meta.row.total );
                                }

                                if( rowPrice === totalReceipts ) {
                                    textColor = 'black';
                                }
                                return '<span style="float: right; color: ' + textColor + '"><a href="#">' + formatTotalReceipts + '</a></span>';
                            },
                            isSortable: true,
                            direction: 'DESC',
                            isFilterable: true,
                            queryFilterType: Y.doccirrus.DCQuery.GT_OPERATOR,
                            width: '5%',
                            visible: false
                        },
                        {
                            forPropertyName: 'totalReceiptsOutstanding',
                            label: RESTBETRAG,
                            title: RESTBETRAG,
                            renderer: function( meta ) {
                                var
                                    //rowPrice = meta.row.price || 0,
                                    rowTotal = meta.row.price || 0,
                                    totalReceiptsOutstanding = meta.row.totalReceiptsOutstanding || 0,
                                    textColor = ( totalReceiptsOutstanding > 0 ? 'row' : 'green' ),

                                    formatRemainingBalance = Y.doccirrus.comctl.numberToLocalString( totalReceiptsOutstanding );
                                // value for total row
                                if( meta.row && meta.row[0] ) {
                                    return '<span style="float: right;">' + Y.doccirrus.comctl.numberToLocalString( meta.row[0].totalReceiptsOutstanding ) + '</span>';
                                }

                                //  MOJ-6627 remaining balance considered to be zero once paid
                                if( 'CREDITED' === meta.row.status || 'ARCHIVED' === meta.row.status ) {
                                    formatRemainingBalance = Y.doccirrus.comctl.numberToLocalString( 0 );
                                }

                                if( rowTotal === totalReceiptsOutstanding ) {
                                    textColor = 'black';
                                }
                                return '<span style="float: right; color: ' + textColor + '"><a href="#">' + formatRemainingBalance + '</a></span>';
                            },
                            isSortable: true,
                            direction: 'DESC',
                            isFilterable: true,
                            queryFilterType: Y.doccirrus.DCQuery.GT_OPERATOR,
                            filterField: {
                                componentType: 'KoSchemaValue',
                                componentConfig: {
                                    fieldType: 'Number',
                                    showLabel: false,
                                    isOnForm: false,
                                    required: false,
                                    isSelectMultiple: false,
                                    placeholder: RESTBETRAG
                                }
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'content',
                            label: INVOICETYPE, // i18n( 'InCaseMojit.casefile_browserJS.placeholder.DESCRIPTION' ),
                            title: INVOICETYPE, //i18n( 'InCaseMojit.casefile_browserJS.placeholder.DESCRIPTION' ),
                            width: '5%',
                            isSortable: true,
                            isFilterable: true,
                            renderer: function( meta ) {
                                var
                                    data = meta.row,
                                    renderContentAsHTML = ActivityModel.renderContentAsHTML( data ),
                                    activitySetting = _.find(config.activitySettings, function (setting) {
                                        return setting.actType === data.actType;
                                    });

                                if( data.careComment ) {
                                    renderContentAsHTML += ' <a class="onActivitiesTableShowMoreContent-more" href="javascript:void(0);"> ... </a><div class="onActivitiesTableShowMoreContent-detail onActivitiesTableShowMoreContent-detail-hidden">' + data.careComment + '</div>';
                                }

                                if (activitySetting && activitySetting.showPrintCount) {
                                    renderContentAsHTML += ' <i class="fa fa-print" aria-hidden="true"></i> (' + (data.printCount || 0) + ')';
                                }

                                return renderContentAsHTML;
                            }
                        },
                        {
                            forPropertyName: 'formPdf',
                            label: 'PDF',
                            title: 'PDF',
                            renderer: function( meta ) {
                                //  link to be updated by PDF generation event without reloading whole table

                                var
                                    pdfUrl = '#',
                                    linkId = 'aLinkPdf' + meta.row._id,
                                    pdfLink = '';

                                //  opened in a new tab by click handler, SUP-1865
                                if( meta.row.formPdf && '' !== meta.row.formPdf ) {
                                    pdfUrl = '#/cashbook';
                                    pdfLink = ' <a id="' + linkId + '" href="' + pdfUrl + '">PDF</a>';
                                }

                                return pdfLink;
                            },
                            width: '5%',
                            isSortable: true,
                            isFilterable: true
                        },
                        {
                            forPropertyName: 'patientFirstName',
                            label: FIRSTNAME,
                            title: FIRSTNAME,
                            isSortable: true,
                            isFilterable: true,
                            width: '5%'
                        },
                        {
                            forPropertyName: 'patientLastName',
                            label: LASTNAME,
                            title: LASTNAME,
                            isSortable: true,
                            isFilterable: true,
                            width: '5%'
                        },
                        {
                            forPropertyName: 'patientId.patientNo',
                            label: PATIENTNO,
                            title: PATIENTNO,
                            isSortable: false,
                            isFilterable: true,
                            visible: false,
                            width: '5%'
                        },
                        {
                            forPropertyName: 'status',
                            label: STATUS,
                            title: STATUS,
                            renderer: function( meta ) {
                                var data = meta.row,
                                    result = '',
                                    invoiceBilledDate = data.invoiceBilledDate || '',
                                    totalReceiptsOutstanding = ( 0 === Number( parseFloat( data.totalReceiptsOutstanding ).toFixed(2) ) ),
                                    reminderDays,
                                    warning1Days,
                                    warning2Days,
                                    status = ['CREDITED', 'PARTIALPAYMENT', 'DERECOGNIZED'];

                                if( invoiceBilledDate && days && days.length && -1 === status.indexOf( data.status ) ) {

                                    days.forEach(function( day ) {
                                        if( day.locationId === data.locationId ) {
                                            reminderDays = day.reminderDays;
                                            warning1Days = day.warning1Days;
                                            warning2Days = day.warning2Days;
                                        }
                                    });

                                    if( !reminderDays && !warning1Days && !warning2Days ) {
                                        // set default if not found
                                        reminderDays = days[0].reminderDays;
                                        warning1Days = days[0].warning1Days;
                                        warning2Days = days[0].warning2Days;
                                    }

                                    if( ( moment(new Date()).startOf('day').diff( moment(invoiceBilledDate).startOf('day'), 'days') >= reminderDays ) && !totalReceiptsOutstanding && 'WARN1' !== data.status ) {
                                        result = 'color:' + "red";
                                    }
                                    if( ( moment(new Date()).startOf('day').diff( moment(invoiceBilledDate).startOf('day'), 'days') >= warning1Days ) && !totalReceiptsOutstanding ) {
                                        result = 'color:' + "red";
                                    }
                                    if( ( moment(new Date()).startOf('day').diff( moment(invoiceBilledDate).startOf('day'), 'days') >= warning2Days ) && !totalReceiptsOutstanding ) {
                                        result = 'color:' + "red";
                                    }
                                }
                                return '<span style="' + result + '">' + Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'ActStatus_E', data.status, 'i18n' ) + '</span>';
                            },
                            isFilterable: true,
                            isSortable: true,
                            queryFilterType: Y.doccirrus.DCQuery.ENUM_OPERATOR,
                            filterField: {
                                componentType: 'KoFieldSelect2',
                                options: Y.doccirrus.schemas.activity.getFilteredStatuses(),
                                optionsCaption: '',
                                optionsText: 'i18n',
                                optionsValue: 'val'
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'ruleStatus',
                            label: RULE_STATUS,
                            title: RULE_STATUS,
                            renderer: function( meta ) {
                                var data = meta.row;
                                if( !data.ruleStatus ) {
                                    return '';
                                }
                                return '<a href="#" class="kbvlogmodel-status kbvlogmodel-status-' + (data.ruleStatus || '').toLowerCase() + '">' + Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'RuleStatus_E', data.ruleStatus || 'NOT_VALIDATED', 'i18n' ) + '</a>';
                            },
                            isFilterable: true,
                            isSortable: true,
                            queryFilterType: Y.doccirrus.DCQuery.ENUM_OPERATOR,
                            filterField: {
                                componentType: 'KoFieldSelect2',
                                options: Y.doccirrus.schemas.activity.types.RuleStatus_E.list,
                                optionsCaption: '',
                                optionsText: 'i18n',
                                optionsValue: 'val'
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'debtCollection',
                            label: DEBTCOLLECTION,
                            title: DEBTCOLLECTION,
                            visible: false,
                            renderer: function( meta ) {
                                var data = meta.row;
                                return Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'DebtCollection_E', data.debtCollection, '-de' );

                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'caseFolderId.type',
                            label: COST_UNIT,
                            title: COST_UNIT,
                            visible: false,
                            isSortable: false,
                            isFilterable: true,
                            width: '5%',
                            renderer: function( meta ) {
                                var
                                    data = meta.row,
                                    caseFolder = data.caseFolderId,
                                    caseFolderType = caseFolder && caseFolder.type;

                                return Y.doccirrus.schemaloader.getEnumListTranslation( 'person', 'Insurance_E', caseFolderType, 'i18n', '' );
                            },
                            queryFilterType: Y.doccirrus.DCQuery.ENUM_OPERATOR,
                            filterField: {
                                componentType: 'KoFieldSelect2',
                                options: Y.doccirrus.schemaloader.filterEnumByCountryMode( Y.doccirrus.schemas.person.types.Insurance_E.list ),
                                optionsText: 'i18n',
                                optionsValue: 'val'
                            }
                        },
                        {
                            forPropertyName: 'patientId.insuranceStatus.insuranceId',
                            label: COST_UNIT_IKNR,
                            title: COST_UNIT_IKNR,
                            visible: false,
                            isSortable: false,
                            isFilterable: false,
                            width: '5%',
                            renderer: function( meta ) {
                                var
                                    data = meta.row,
                                    patient = data.patientId ? data.patientId : null,
                                    caseFolder = data.caseFolderId,
                                    caseFolderType = caseFolder && caseFolder.type,
                                    insuranceStatus = (patient && patient.insuranceStatus) ? patient.insuranceStatus : [],
                                    insuranceStatusByCaseFolderType = insuranceStatus.find( function( item ) {
                                        return caseFolderType === item.type;
                                    } );

                                return insuranceStatusByCaseFolderType && insuranceStatusByCaseFolderType.insuranceId || '';
                            }
                        },
                        {
                            forPropertyName: 'locationName',
                            label: i18n( 'InCaseMojit.casefile_browserJS.placeholder.locationName' ),
                            title: i18n( 'InCaseMojit.casefile_browserJS.placeholder.locationName' ),
                            width: '5%',
                            visible: false,
                            isFilterable: true,
                            isSortable: false,
                            filterPropertyName: 'locationId',
                            queryFilterType: Y.doccirrus.DCQuery.ENUM_OPERATOR,
                            filterField: {
                                componentType: 'KoFieldSelect2',
                                options: locationFilter,
                                optionsText: 'i18n',
                                optionsValue: 'val'
                            },
                            renderer: function( meta ) {
                                var
                                    locationId = meta.row.locationId,
                                    i;

                                // location names are only a placeholder in data from getCaseFileLight, fill
                                // from location set loaded on binder

                                for( i = 0; i < locations.length; i++ ) {
                                    if( locations[i]._id === locationId ) {
                                        meta.row.locationName = locations[i].locname;
                                    }
                                }

                                return meta.row.locationName;
                            }
                        },
                        {
                            forPropertyName: 'insuranceName',
                            label: i18n( 'person-schema.InsuranceStatus_T.insuranceName' ),
                            title: i18n( 'person-schema.InsuranceStatus_T.insuranceName' ),
                            visible: false,
                            isSortable: true,
                            isFilterable: true,
                            width: '5%'
                        },
                        {
                            forPropertyName: 'linkedTimestamps.timestamp',
                            label: PAYMENT_DATE,
                            title: PAYMENT_DATE,
                            renderer: function( meta ) {
                                var data = meta.row,
                                    linkedTimestamps = data.linkedTimestamps || [];

                                if( 0 === linkedTimestamps.length ) {
                                    return '';
                                }

                                if( Array.isArray( linkedTimestamps ) && linkedTimestamps.length ) {
                                    return linkedTimestamps.reverse().map( function( receipt ) {
                                        return moment( receipt.timestamp ).format( 'DD.MM.YYYY' );
                                    } ).join( ',<br/> ' );
                                }
                                return '';
                            },
                            isSortable: true,
                            visible: false,
                            direction: 'DESC',
                            isFilterable: true,
                            queryFilterType: Y.doccirrus.DCQuery.DATE_RANGE_OPERATOR,
                            filterField: {
                                componentType: 'KoSchemaValue',
                                componentConfig: {
                                    fieldType: 'DateRange',
                                    showLabel: false,
                                    isOnForm: false,
                                    required: false,
                                    placeholder: PAYMENT_DATE
                                }
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'invoiceDate',
                            label: INVOICE_DATE,
                            title: INVOICE_DATE,
                            renderer: function( meta ) {
                                var
                                    result = '',
                                    data = meta.row,
                                    invoiceBilledDate = data.invoiceBilledDate || '',
                                    invoiceDate = data.invoiceDate,
                                    totalReceiptsOutstanding = ( 0 === Number( parseFloat( data.totalReceiptsOutstanding ).toFixed(2) ) ),
                                    reminderDays,
                                    warning1Days,
                                    warning2Days,
                                    status = ['CREDITED', 'PARTIALPAYMENT', 'DERECOGNIZED'];

                                // not need calculations
                                if( !invoiceDate ) {
                                    return '';
                                }

                                if( invoiceBilledDate && days && days.length && -1 === status.indexOf( data.status ) ) {

                                    days.forEach(function( day ) {
                                        if( day.locationId === data.locationId ) {
                                            reminderDays = day.reminderDays;
                                            warning1Days = day.warning1Days;
                                            warning2Days = day.warning2Days;
                                        }
                                    });

                                    if( !reminderDays && !warning1Days && !warning2Days ) {
                                        // set default if not found
                                        reminderDays = days[0].reminderDays;
                                        warning1Days = days[0].warning1Days;
                                        warning2Days = days[0].warning2Days;
                                    }

                                    if( ( moment(new Date()).startOf('day').diff( moment(invoiceBilledDate).startOf('day'), 'days') >= reminderDays ) && !totalReceiptsOutstanding && 'WARN1' !== data.status ) {
                                        result = 'color:' + "red";
                                    }
                                    if( ( moment(new Date()).startOf('day').diff( moment(invoiceBilledDate).startOf('day'), 'days') >= warning1Days ) && !totalReceiptsOutstanding ) {
                                        result = 'color:' + "red";
                                    }
                                    if( ( moment(new Date()).startOf('day').diff( moment(invoiceBilledDate).startOf('day'), 'days') >= warning2Days ) && !totalReceiptsOutstanding ) {
                                        result = 'color:' + "red";
                                    }
                                }

                                return '<span style="' + result + '">' + moment( invoiceDate ).format( 'DD.MM.YYYY' ) + '</span>';
                            },
                            isSortable: true,
                            visible: false,
                            direction: 'DESC',
                            isFilterable: true,
                            queryFilterType: Y.doccirrus.DCQuery.DATE_RANGE_OPERATOR,
                            filterField: {
                                componentType: 'KoSchemaValue',
                                componentConfig: {
                                    fieldType: 'DateRange',
                                    showLabel: false,
                                    isOnForm: false,
                                    required: false,
                                    placeholder: INVOICE_DATE
                                }
                            },
                            width: '5%'
                        },
                        {
                            forPropertyName: 'employeeName',
                            label: i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_EMPLOYEE' ),
                            title: i18n( 'InvoiceMojit.cashbookJS.title.INVOICE_EMPLOYEE' ),
                            width: '5%',
                            visible: false,
                            isSortable: false,
                            isFilterable: true
                        },
                        {
                            forPropertyName: 'linkedEmployees.name',
                            label: i18n( 'InvoiceMojit.cashbookJS.title.RECEIPT_EMPLOYEE' ),
                            title: i18n( 'InvoiceMojit.cashbookJS.title.RECEIPT_EMPLOYEE' ),
                            width: '5%',
                            visible: false,
                            isSortable: true,
                            isFilterable: true,
                            renderer: function( meta ) {
                                var data = meta.row,
                                    linkedEmployees = data.linkedEmployees || [];

                                if( 0 === linkedEmployees.length ) {
                                    return '';
                                }

                                if( Array.isArray( linkedEmployees ) && linkedEmployees.length ) {
                                    return linkedEmployees.reverse().map( function( employee ) {
                                        return  employee.name;
                                    } ).join( ',<br/> ' );
                                }
                                return '';
                            }
                        },
                        {
                            forPropertyName: 'linkedContents.content',
                            label: PAYMENT_CONTENT,
                            title: PAYMENT_CONTENT,
                            width: '15%',
                            visible: false,
                            isSortable: true,
                            isFilterable: true,
                            renderer: function( meta ) {
                                var data = meta.row,
                                    linkedContents = data.linkedContents || [];

                                if( 0 === linkedContents.length ) {
                                    return '';
                                }

                                if( Array.isArray( linkedContents ) && linkedContents.length ) {
                                    return linkedContents.reverse().map( function( item, idx ) {
                                        return '<a href=/incase#/activity/' + item.receiptId + '/patient/' + item.patientId + '/casefolder/' + item.caseFolderId + ' target="_blank">' + item.content + '</a> <button id="number-' + idx + '" class="btn btn-xs btn-default print-related fa fa-print"></button>';
                                    } ).join( ',<br/> ' );
                                }
                                return '';
                            }
                        }
                    ],
                    summaryRow: true,
                    hideSummaryRow: false,
                    onRowClick: function( meta, event ) {
                        var
                            colName = meta.col.forPropertyName,
                            pdfUrl,
                            numberOfItem,
                            receipts = null,
                            receiptsOrdered = [];

                        if( 'ruleStatus' === colName && 'INVALID' === meta.value ) {
                            Y.doccirrus.modals.ruleLogModal.show( {
                                data: meta.row.ruleErrors || [],
                                callback: function() {

                                }
                            } );
                            return;
                        }

                        if( meta && meta.row && meta.row._id ) {
                            if( 'formPdf' === colName && meta.row.formPdf && '' !== meta.row.formPdf ) {
                                pdfUrl = '/media/' + meta.row.formPdf + '_original.APPLICATION_PDF.pdf';
                                window.open( Y.doccirrus.infras.getPrivateURL( pdfUrl ) );
                                return;
                            }
                            if( 'totalReceipts' === colName || 'totalReceiptsOutstanding' === colName ) {
                                ActivityActionButtonsViewModel.createReceipt( {
                                    id: meta.row._id,
                                    total: meta.row.total,
                                    totalReceiptsOutstanding: meta.row.totalReceiptsOutstanding,
                                    locationId: meta.row.locationId,
                                    onReceiptCreate: function() {
                                        self.invoiceKoTable.reload();
                                    }
                                } );
                                return;
                            }
                            if( 'linkedContents.content' === colName ) {
                                if( event.target.classList.contains('print-related') ) {
                                    event.preventDefault();
                                    event.stopPropagation();
                                    numberOfItem = parseInt( event.target.id.replace( /^\D+/g, ''), 10 );
                                    receipts = ( meta && meta.row && meta.row.receipts ) || [];
                                    receipts.forEach( function( item ) {
                                        receiptsOrdered.push( item );
                                    });
                                    receiptsOrdered.reverse();
                                    self.getActivityAndPrint( receiptsOrdered[numberOfItem] );
                                }
                                return;
                            }
                            window.open( Y.doccirrus.utils.getUrl( 'inCaseMojit' ) + '#/activity/' + meta.row._id, '_blank' );
                        }
                    }
                }
            } );

            //  Update the set of selected activities when rows are checked in the table
            self.invoiceKoTable.getComponentColumnCheckbox().checked.subscribe( function( newArray ) {
                self.selectedTableRows( newArray );
                self.refreshTransition( newArray );
            } );

            //  Mask the table while processes are ongoing
            self.invoiceTableMaskSub = ko.computed( function() {
                self.invoiceKoTable.masked( self.inProcess() );
            } );

        };

        self.getActivityAndPrint = function( activityId ) {
            Y.doccirrus.jsonrpc.api.activity.read( { 'query': { '_id': activityId } } )
                .done( function( response ) {
                    var data = response && response.data,
                        options = {
                            mapCollection: 'activity',
                            mapObject: ko.unwrap( data[0]._id ),
                            formId: ko.unwrap( data[0].formId ),
                            formVersionId: ko.unwrap( data[0].formVersion ),
                            saveTo: 'temp',
                            generatePDFandPrint: true
                        };
                    Y.doccirrus.modals.printPdfModal.show( options );
                })
                .fail( function( error ) {
                    var message =  error && error.message;
                    Y.doccirrus.DCWindow.notice( {
                        type: 'error',
                        message: message,
                        window: {
                            width: 'medium'
                        }
                    } );
                });
        };

        /**
         *  Add print and transition buttons
         */

        self.initTransitionButtons = function __initTransitionButtons() {
            var
                userLang = Y.doccirrus.comctl.getUserLang(),
                fsmName = Y.doccirrus.schemas.activity.getFSMName( 'INVOICE' ),
                clickHandler,
                fsm = Y.doccirrus.schemas.activity.getFSM( fsmName ),
                isSwiss = Y.doccirrus.commonutils.doesCountryModeIncludeSwitzerland();

            function makeBatchTransitionHandler( data, activity ) {
                return function __batchTransitionHandler() {
                    var
                        checkboxCol = self.invoiceKoTable.getComponentColumnCheckbox(),
                        checkedRows = checkboxCol.checked ? checkboxCol.checked() : null,
                        invoiceIds = checkedRows ? checkedRows.map( getInvoiceId ) : [],
                        blockApprove = checkedRows ? checkedRows.filter( function( row ) {
                            return row.blockApprove;
                        }) : [],
                        query = {
                            'transition': data.transition,
                            'ids': invoiceIds
                        };

                    // after recipe created checkbox is lost
                    if( !invoiceIds.length && activity ) {
                        invoiceIds.push( getInvoiceId( activity ) );
                    }

                    if( data.transition === "approve" && blockApprove.length ) {
                        Y.doccirrus.DCWindow.notice( {
                            type: 'warn',
                            message: Y.Lang.sub( i18n( 'activityModel_clientJS.message.NO_CASE_NUMBER' ), { link: '<a target="_blank" href="/incase#/activity/' + blockApprove[0].scheinId +'">Link</a><br/>' } ),
                            window: {
                                width: 'medium'
                            }
                        } );
                        return;
                    }

                    function getInvoiceId( invoice ) {
                        return invoice._id;
                    }

                    self.inProcess( true );

                    Y.doccirrus.jsonrpc.api.invoiceprocess.doInvoiceTransitionBatch( {
                        query: query,
                        event: 'cashbookTransition'
                    } ).done( function() {
                        self.invoiceKoTable.getComponentColumnCheckbox().uncheckAll();
                        self.invoiceKoTable.reload();
                    } ).fail( function( response ) {
                        var message = ( response && response.data ) || ( response && response.message );
                        Y.log( 'Error while doTransitionBatch: ' + response.data, 'debug', NAME );
                        Y.doccirrus.DCWindow.notice( {
                            type: 'error',
                            message: message,
                            window: {
                                width: 'medium'
                            }
                        } );
                    } ).always( function() {
                        self.checkProcessStatus();
                    } );
                };
            }

            Y.Object.each( fsm, function( state ) {
                state.forEach( function( data ) {
                    var disabled,
                        notEnableButtons = ['credit', 'remind', 'warn1', 'warn2', 'partialpay'],
                        swissOnlyButtons = ["decline", "revokeWarn", "medidataFix"],
                        selectedActivities,
                        isDisabled;
                    if( !enableTransitions[data.transition] && !forbiddenTransitions[data.transition] ) {
                        enableTransitions[data.transition] = ko.observable( false );
                        disabled = ko.computed( function() {
                            selectedActivities = self.invoiceKoTable.getComponentColumnCheckbox().checked();
                            isDisabled = selectedActivities.every(function( activity ) {
                                return 0 !== Number( parseFloat( unwrap( activity.totalReceiptsOutstanding ) ).toFixed(2) );
                            });
                            if( 'pay' === data.transition || 'derecognize' === data.transition ) {
                                return !enableTransitions[data.transition]() || self.isDisabledReceipts()  || !isDisabled;
                            }
                            if( -1 !== notEnableButtons.indexOf( data.transition ) ) {
                                return !enableTransitions[data.transition]() || !isDisabled;
                            }
                            return !enableTransitions[data.transition]();
                        } );
                        if( 'pay' === data.transition || 'derecognize' === data.transition ) {
                            clickHandler = function() {
                                var currentActivity = self.invoiceKoTable.getComponentColumnCheckbox().checked()[0];
                                if( currentActivity ) {
                                    ActivityActionButtonsViewModel.createReceipt( {
                                        id: currentActivity._id,
                                        total: currentActivity.total,
                                        totalReceiptsOutstanding: currentActivity.totalReceiptsOutstanding,
                                        createBadDebt: 'derecognize' === data.transition ? true : false,
                                        locationId: currentActivity.locationId,
                                        onReceiptCreate: function onCreaiptCreated( newReceipt ) {
                                            var
                                                runPayTransition,
                                                //  floating point issues can create tiny increments leading to intermittent error
                                                //  comparing values, round to two decimal places before comparison
                                                receiptAmount = parseFloat( newReceipt.amount ).toFixed( 2 ),
                                                invoiceBalance = parseFloat( currentActivity.totalReceiptsOutstanding ).toFixed( 2 );

                                            if ( receiptAmount === invoiceBalance ) {
                                                //  run the pay transition
                                                runPayTransition = makeBatchTransitionHandler( data, currentActivity );
                                                runPayTransition();
                                            }

                                            //  if not balanced, not paid yet, do nothing, event will reload table
                                        }
                                    } );
                                }
                            };
                        } else {
                            clickHandler = makeBatchTransitionHandler( data );
                        }

                        if( 0 <= swissOnlyButtons.indexOf( data.transition ) && !isSwiss ) {
                            // Swiss only should not be visible for non Swiss country mode
                            return;
                        }

                        self.transitionButtons.push(
                            KoComponentManager.createComponent( {
                                componentType: 'KoButton',
                                componentConfig: {
                                    name: data.transition,
                                    text: data['-' + userLang],
                                    disabled: disabled,
                                    option: ko.computed( function() {
                                        return disabled() ? 'DEFAULT' : 'PRIMARY';
                                    } ),
                                    click: clickHandler
                                }
                            } )
                        );
                    }
                    if( "bill" === data.transition || "approve" === data.transition ) {
                        self.setData[data.transition] = data;
                        self.setData[data.transition + "clickHandler"] = makeBatchTransitionHandler( data );
                    }
                } );
            } );

            //  Add print button (not a transition)
            self.transitionButtons.unshift(
                KoComponentManager.createComponent( {
                    componentType: 'KoButton',
                    componentConfig: {
                        name: 'cashbookZipBtn',
                        text: i18n( 'InvoiceMojit.general.ZIP_CREATE' ),
                        disabled: self.isDisabledZip,
                        option: ko.computed( function() {
                            return self.canZipSelection() ? 'PRIMARY' : 'DEFAULT';
                        } ),
                        click: self.batchZip
                    }
                } )
            );

            //  Add manageReceipts button (not a transition)
            self.transitionButtons.unshift(
                KoComponentManager.createComponent( {
                    componentType: 'KoButton',
                    componentConfig: {
                        name: 'cashbookMngReceiptsBtn',
                        text: i18n( 'InvoiceMojit.general.MANAGE_RECEIPTS' ),
                        disabled: self.isDisabledReceipts,
                        option: ko.computed( function() {
                            return self.isDisabledReceipts() ? 'DEFAULT' : 'PRIMARY';
                        } ),
                        click: self.showInvoiceReceiptModal
                    }
                } )
            );

            //  Add print button (not a transition)
            self.transitionButtons.unshift(
                KoComponentManager.createComponent({
                    componentType: 'KoButtonDropDown',
                    name: 'cashbookPrintBtn',
                    title: i18n( 'FormEditorMojit.pdf_properties.labels.PRINT' ),
                    text: i18n( 'FormEditorMojit.pdf_properties.labels.PRINT' ),
                    disabled: ko.computed(function() {
                        return self.isDisabledPrint() && !enableTransitions.approve();
                    }),
                    visible: true,
                    option: ko.computed( function() {
                        return ( self.isDisabledPrint() && !enableTransitions.approve() ) ? 'DEFAULT' : 'PRIMARY';
                    } ),
                    menu: {
                        items: [{
                                name: 'cashbookSimplePrintBtn',
                                text: i18n( 'FormEditorMojit.pdf_properties.labels.PRINT' ),
                                disabled: self.isDisabledPrint,
                                click: self.batchPrint
                            },
                            {
                                name: 'cashbookApproveAndPrintBtn',
                                text: i18n( 'activity-schema.transitionList.approveAndPrint.i18n' ),
                                disabled: ko.computed(function() {
                                    return !enableTransitions.approve();
                                }),
                                click: function() { self.batchPrint( "approve" ); }
                            },
                            {
                                name: 'cashbookBillAndPrintBtn',
                                text: i18n( 'activity-schema.transitionList.billAndPrint.i18n' ),
                                disabled: ko.computed(function() {
                                    return !enableTransitions.bill();
                                }),
                                click: function() { self.batchPrint( "bill" ); }
                            }]
                    }
                })
            );

            self.transitionButtons.unshift(
                KoComponentManager.createComponent( {
                    componentType: 'KoButton',
                    componentConfig: {
                        name: 'validateInvoiceBtn',
                        text: i18n( 'InvoiceMojit.cashbookJS.title.VALIDATE_INVOICES' ),
                        disabled: self.isDisabledValidate,
                        option: ko.computed( function() {
                            return self.isDisabledValidate() ? 'DEFAULT' : 'PRIMARY';
                        } ),
                        click: self.validateSelectedInvoices
                    }
                } )
            );
        };

        self.initComputeds = function __initComputeds() {

            /**
             *  Computed to control print button
             *  We must have at least one selected invoice, and all selected invoices must have PDFs
             */

            self.canPrintSelection = ko.computed( function() {
                var
                    checked = self.selectedTableRows(),
                    hasPdfCount = 0;

                //  nothing to print
                if( 0 === checked.length ) {
                    return false;
                }

                checked.forEach( forEachCheckedInvoice );

                function forEachCheckedInvoice( invoice ) {
                    if( invoice.formPdf && '' !== invoice.formPdf ) {
                        hasPdfCount = hasPdfCount + 1;
                    }
                }

                return hasPdfCount === checked.length;
            } );

            self.isDisabledValidate = ko.computed( function(  ) {
                var checked = self.selectedTableRows();
                return ( checked.length <= 0 || self.inProcess());
            });

            self.isDisabledPrint = ko.computed( function() {
                return !self.canPrintSelection() || self.inProcess();
            } );

            self.canZipSelection = ko.computed( function() {
                var checked = self.selectedTableRows();
                return ( checked.length > 0 );
            } );

            self.isDisabledZip = ko.computed( function() {
                return !self.canZipSelection();
            } );

            self.canManageReceipts = ko.computed( function() {
                var checked = self.selectedTableRows();
                return ( checked.length === 1 );
            } );

            self.isDisabledReceipts = ko.computed( function() {
                return !self.canManageReceipts();
            } );

        };

        //  GENERAL UI

        self.disableTransitionButtons = function _disableTransitionButtons() {
            Y.Object.each( enableTransitions, function( value, key ) {
                enableTransitions[key]( false );
            } );
        };

        self.refreshTransition = function __refreshTransition( checked ) {
            var available;
            self.disableTransitionButtons();
            available = Y.doccirrus.schemas.activity.getAvailableTransition( checked, forbiddenTransitions );
            available.forEach( function( transition ) {
                if( !forbiddenTransitions[transition] ) {
                    enableTransitions[transition]( true );
                }
            } );
        };

        /**
         *  Check with the server whether there are any ongoing invoice processes
         *  Used to disable buttons to prevent concurrent processes from interfering
         */

        self.checkProcessStatus = function __checkProcessStatus() {

            Y.doccirrus.jsonrpc.api.invoiceprocess.getProcessInfo( {
                query: {},
                event: 'getProcessInfo'
            } ).done( function( processInfo ) {
                processInfo = processInfo.data ? processInfo.data : processInfo;
                Y.log( 'Loaded server-side process state: ' + JSON.stringify( processInfo ), 'debug', NAME );

                if( !processInfo.percent || processInfo.percent === -1 ) {
                    processInfo.percent = 0;
                }

                self.inProcess( 'PROCESS_NONE' !== processInfo.name );
                self.progressBarProcess.progress( processInfo.percent );
                self.progressBarProcess.updateText( i18n( 'InvoiceMojit.cashbook.label.STATUS_CHANGE' ) + ' ' + processInfo.percent + '% ...' );
                return Promise.resolve( true );
            } ).fail( function( response ) {
                Y.log( 'Error while looking up process state: ' + response.data, 'debug', NAME );
                // fail safe
                self.inProcess( true );
            } );

        };

        //  PROCESSES

        /**
         *  Validate all checked/selected invoices
         *  Handler for "Prufen" button in dialog
          */

        self.validateSelectedInvoices = function __validateSelectedInvoices() {
            /*jshint validthis:true */
            var
                hasNoneValidInvoice = false,
                invoiceIds = [],
                checked = self.selectedTableRows();

            function startValidation() {
                self.inProcess( true );

                Y.doccirrus.jsonrpc.api.invoiceprocess.validateInvoices( {
                    invoiceIds: invoiceIds
                } )
                    .done( function() {
                          self.invoiceKoTable.getComponentColumnCheckbox().uncheckAll();
                    } )
                    .fail( fail )
                    .always( function() {
                        self.checkProcessStatus();
                    } );
            }

            function showConfirmDialog() {
                Y.doccirrus.DCWindow.notice( {
                    title: GENERATE_INVOICES,
                    type: 'info',
                    window: {
                        width: Y.doccirrus.DCWindow.SIZE_MEDIUM,
                        buttons: {
                            header: ['close'],
                            footer: [
                                Y.doccirrus.DCWindow.getButton( 'CANCEL' ),
                                Y.doccirrus.DCWindow.getButton( 'OK', {
                                    isDefault: true,
                                    action: function() {
                                        this.close();
                                        startValidation();
                                    }
                                } )
                            ]
                        }
                    },
                    message: SOME_INVOICES_NOT_VALID_WARNING
                } );
            }

            checked.forEach( function( invoice ) {
                if( isValidInvoice( invoice ) ) {
                    invoiceIds.push( invoice._id );
                } else {
                    hasNoneValidInvoice = true;
                }
            } );

            if( hasNoneValidInvoice || 0 === invoiceIds.length ) {
                showConfirmDialog();
            } else {
                startValidation();
            }
        };

        self.showInvoiceReceiptModal = function __showInvoiceReceiptModal() {
            /*
            var
                self = this,
                locationQuery = {
                    options: {
                        fields: { '_id': 1, 'locname': 1 },
                        objPopulate: false
                    },
                    objPopulate: false
                };

            Y.doccirrus.jsonrpc.api.location.read( locationQuery ).then( onLocationsRead );

            function onLocationsRead( allLocations ) {
                allLocations = allLocations.data ? allLocations.data : allLocations;

            }
            */
            var
                currentActivity = self.selectedTableRows()[0];

            Y.doccirrus.modals.invoiceReceiptSelector.show( {
                currentActivity: currentActivity,
                currentPatient: currentActivity.patientId,         //  is expanded object, not _id
                locations: locations,
                'onReceiptsChanged': onReceiptsChanged
            } );

            //  When the set of selected receipts has been updated we need to reload the invoice table
            function onReceiptsChanged() {
                Y.log( 'Receipts have changed, reloading invoices for new totals.', 'debug', NAME );
                self.invoiceKoTable.reload();
            }
        };

        /**
         *  Batch printing process
         */

        self.batchPrint = function __batchPrint( type ) {
            var
                checked = self.selectedTableRows(),
                mediaIds = [],
                forApprove;
            if( "bill" === type || "approve" === type ) {
                self.doAfterPrint( type );
            }

            //  nothing to print
            if( 0 === checked.length ) {
                return false;
            }

            checked.forEach( forEachCheckedInvoice );

            function forEachCheckedInvoice( invoice ) {
                if( invoice.formPdf && '' !== invoice.formPdf ) {
                    mediaIds.push( invoice.formPdf );
                }
            }

            forApprove = checked.every( forEachCheckedInvoiceApprove );

            function forEachCheckedInvoiceApprove( invoice ) {
                return 'VALID' === invoice.status && !invoice.formPdf;
            }

            if( "approve" === type && forApprove ) {
                self.showDownloadPDFs( '' );
            } else {
                // concatenate pdf only if exists
                //  let compilepdf events control progress bar
                self.listenForConcat( true );
                self.inProcess( true );

                Y.doccirrus.jsonrpc.api.media
                    .concatenatepdfs( { mediaIds: mediaIds } )
                    .fail( fail );
            }
        };

        /**
         *  Batch zip process ((re)generate PDFs, save to disk and zip)
         */

        self.batchZip = function __batchZip() {
            var
                checked = self.selectedTableRows(),
                params = { invoiceIds: [] },
                i;

            for( i = 0; i < checked.length; i++ ) {
                params.invoiceIds.push( checked[i]._id );
            }

            Y.doccirrus.comctl.privatePost( '/1/invoiceprocess/:invoiceBatchZip', params, onZipRequested );

            function onZipRequested( err ) {
                if( err ) {
                    Y.log( 'Could not request ZIP file: ' + JSON.stringify( err ), 'warn', NAME );
                    return;
                }
                Y.log( 'Starting batch zip process...', 'debug', NAME );
                self.inProcess( true );
            }
        };

        //  MODALS

        /**
         *  Pop a modal to offer a PDF for download
         *
         *  TODO: add print options to this modal
         *
         *  @param  url {String}
         */

        self.showDownloadPDFs = function __showDownloadPDFs( url ) {
            var activityIds;
            if( self.selectedTableRows() ) {
                activityIds = self.selectedTableRows().map( function( activity ) {
                    return activity._id;
                } );
            }
            var options = {
                'canonicalId': '',
                'formRole': 'casefile-invoice',
                'documentUrl': url,
                'forceShowPrintModal': !url && 'approve' === unwrap( self.doAfterPrint ),
                //  sloppy, TODO, improve
                //  from: http://befused.com/javascript/get-filename-url
                'documentFileName': url.substring( url.lastIndexOf( '/' ) + 1 ).split( '?' )[0],
                'waitForTransition': self.doAfterPrint() ? true : false,
                'activityIds': activityIds,
                'beforeDone': function() {
                    var
                        doAfterPrint = unwrap( self.doAfterPrint );
                    // change status after print
                    if( doAfterPrint && self.setData[doAfterPrint] && self.setData[doAfterPrint + "clickHandler"] ) {
                        self.setData[doAfterPrint + "clickHandler"]( self.setData[doAfterPrint] );
                        self.doAfterPrint( null );
                    }
                }
            };

            Y.doccirrus.modals.reportPdfModal.show( options );
        };

        //  Websocket event handlers

        /**
         *  Raised repeatedly by server as invoices processes complete
         *
         *  @param  message                 {Object}    Websocket event
         *  @param  message.data            {Object}    Payload
         *  @param  message.data.percent    {Number}    Percentage of overall progress
         *  @param  message.data.mapId      {String}    Database _id of invoice currently being worked on
         *  @param  message.data.label      {String}    Description of current step / status string
         */

        function onCashbookProgress( message ) {
            var
                evt = message.data[0];

            self.inProcess( true );
            //  event orderng can be a little unpredictable, do not run the progress bar backwards if events complete
            //  in unexpected order

            if( self.lastProgress > evt.percent ) {
                evt.percent = self.lastProgress;
            }

            self.progressBarProcess.progress( evt.percent );
            self.progressBarProcess.updateText( evt.label );

            self.lastProgress = evt.percent;

            if( -1 !== evt.label.indexOf( START_PROCESS_MARKER ) ) {
                Y.log( 'Server reports invoice process is starting.', 'debug', NAME );
                self.inProcess( true );
                self.showPdfBar( false );
                self.progressBarProcess.updateText( '' );
            }

            if( -1 !== evt.label.indexOf( RELOAD_TABLE_MARKER ) ) {
                Y.log( 'Server reports that tables should reload.', 'debug', NAME );
                self.invoiceKoTable.reload();
                self.progressBarProcess.updateText( '' );
            }

            if( -1 !== evt.label.indexOf( END_PROCESS_MARKER ) ) {
                Y.log( 'Server reports that process is complete.', 'debug', NAME );
                self.inProcess( false );
                self.showPdfBar( false );
                self.progressBarProcess.updateText( '' );
                self.lastProgress = 0;
                self.checkProcessStatus();
            }

            if( 'zipId' === evt.mapId ) {
                onZipFileCreated( evt.label );
            }

            //  insert PDF rows

            var parts;

            if( '<!- add pdf ->' === evt.label ) {
                self.progressBarDocument.progress( 0 );
                parts = evt.mapId.split( '|' );
                $( '#aLinkPdf' + parts[0] )
                    .text( 'PDF' )
                    .attr( 'href', Y.doccirrus.infras.getPrivateURL( '/media/' + parts[1] + '_original' ) );
            }
        }

        function onZipFileCreated( zipId ) {
            var
                url = Y.doccirrus.infras.getPrivateURL( '/zip/' + zipId ),
                btnDownload = {
                    name: 'DOWNLOAD',
                    label: i18n( 'InvoiceMojit.general.ZIP_DOWNLOAD' ),
                    isDefault: true,
                    action: onDownloadZipClick
                },
                modal;

            modal = Y.doccirrus.DCWindow.notice( {
                type: 'notice',
                title: 'Hinweis',
                message: i18n( 'InvoiceMojit.general.ZIP_CREATED' ) + zipId,
                window: {
                    id: 'list_attachments_upload_fail',
                    width: 'medium',
                    buttons: {
                        footer: [
                            btnDownload
                        ]
                    }
                }
            } );

            function onDownloadZipClick() {
                modal.close( true );
                window.open( url );
            }
        }

        /**
         *  TODO: DOCUMENTME
         *  DEPRECATED
         *
         *  @param  message                         {Object}    Websocket event
         *  @param  message.data                    {Object[]}
         *  @param  message.data.state              {String}    May be ('start'|'progress'|'invoiceCreated'|'finished')
         *  @param  message.data.createdInvoiceSum  {Number}    If state is 'progress'
         */

        function onInvoiceBatchCreationAction( message ) {
            Y.log( 'Not passing onInvoiceBatchCreationAction (DEPRECATED): ' + JSON.stringify( message ), 'debug', NAME );
        }

        /**
         *  Raised by linked activity post processes, matters here for updating invoice outstandign balances
         *  after receipts are linked to invoices.
         *
         *  --param  {Object} message
         */

        function onLinkedActivityUpdate( /*message*/ ) {
            self.invoiceKoTable.reload();
        }

        /**
         *  Raised by server during batch transitions
         *  see: Y.doccirrus.jsonrpc.api.activity.doTransitionBatch
         *  DEPRECATED
         *
         *  @param  message                 {Object}    Websocket event
         *  @param  message.data            {Object[]}
         *  @param  message.data.state      {String}    May be ('start'|'progress'|'finished')
         *  @param  message.data.current    {Number}    If state is 'progress'
         *  @param  message.data.total      {Number}    If state is 'progress'
         */

        function onCashbookTransition( message ) {
            var data = message.data && message.data[0];

            if( 'start' === data.state ) {
                self.progressBarProcess.reset();
                self.progressBarProcess.updateText( transitionList[data.action] && transitionList[data.action]['-de'] || '' );
            } else if( 'progress' === data.state ) {
                self.progressBarProcess.progress( Math.round( data.current / data.total * 100 ) );
            } else if( 'finished' === data.state ) {
                if( data.error ) {
                    Y.doccirrus.DCWindow.notice( {
                        type: 'error',
                        message: ERROR_WHILE_SAVING,
                        window: { width: 'medium' }
                    } );
                }

                self.progressBarProcess.progress( 100 );
                self.invoiceKoTable.getComponentColumnCheckbox().uncheckAll();
                self.invoiceKoTable.reload();
                self.checkProcessStatus();
            }
        }

        /**
         *  Raised by server when a digest PDF has been created by concatenating invoice PDFs together
         *
         *  @param  msg             {Object}    Websocket event
         *  @param  msg.data        {Object[]}
         *  @param  msg.data.status {String}    May be ('startBatch'|'savedFile'|'mergingFiles'|'endBatch')
         */

        function onMediaConcatenatePDFs( msg ) {
            var
                data = msg.data && msg.data[0];

            //  ignore media concatenation when part of other processes besides 'Print', they will do their own
            //  status updates

            if( !self.listenForConcat ) {
                return;
            }

            switch( data.status ) {
                case 'startBatch':
                    self.progressBarProcess.reset();
                    self.progressBarProcess.enabled( true );

                    self.invoiceKoTable.masked( true );

                    self.progressBarProcess.cache.batchTotal = data.num || 0;
                    self.progressBarProcess.cache.batchProgress = 0;
                    self.progressBarProcess.updateText( i18n( 'InvoiceMojit.cashbookJS.messages.PREPARING_PDFS_TO_PRINT', {data: {num: data.num}} ) );
                    self.progressBarProcess.progress( 0 );
                    break;

                case 'savedFile':
                    self.progressBarProcess.cache.batchProgress = self.progressBarProcess.cache.batchProgress + 1;
                    self.progressBarProcess.updateText( i18n( 'InvoiceMojit.cashbookJS.messages.SAVED_PDF_DOCUMENT', {data: {num: self.progressBarProcess.cache.batchProgress}} ) );
                    self.progressBarProcess.progress( 100 * (self.progressBarProcess.cache.batchProgress / self.progressBarProcess.cache.batchTotal) );
                    break;

                case 'mergingFiles':
                    self.progressBarProcess.updateText( MERGE_PDFS );
                    break;

                case 'endBatch':
                    self.progressBarProcess.updateText( i18n( 'InvoiceMojit.cashbookJS.messages.BATCH_PRINT_END', {data: {num: self.progressBarProcess.cache.batchTotal}} ) );

                    self.invoiceKoTable.masked( false );
                    if( !data.notUpdate ) {
                        self.showDownloadPDFs( data.cacheUrl );
                    }

                    //  stop listening for concat events, we're done
                    self.inProcess( false );
                    self.listenForConcat( false );
                    break;

            }

        }

        /**
         *  Raised by server when a PDF has been generated
         *
         *  @param  message                         {Object}
         *  @param  message.data                    {Object[]}
         *  @param  message.data.activity           {Object}
         *  @param  message.data.activity._id       {String}    _id of invoice whose PDF was regeneraited
         *  @param  message.data.activity.formPdf   {String}    _id of media item linking new PDF
         */

        function onMsgPDFQueued( message ) {
            Y.log( 'Cashbook received PDF generation event, updating table...', 'debug', NAME );

            var
                activity = message.data[0].activity,
                pdfCellAnchor = activity && $( '#aLinkPdf' + activity._id ),
                newLink = activity && '/media/' + activity.formPdf + '_original.APPLICATION_PDF.pdf';

            //  user may have navigated to another page by the time this completes
            if( pdfCellAnchor && pdfCellAnchor[0] ) {
                pdfCellAnchor.attr( 'href', Y.doccirrus.infras.getPrivateURL( newLink ) );
                pdfCellAnchor.html( 'PDF' );
                pdfCellAnchor.show();
            }
        }

        init();

    } // end cashBookViewModel

    /**
     *  Progress bar ViewModel
     *  TODO: move to own component file with jade template
     */

    function ProgressBarModel() {
        this.enabled = ko.observable( false );
        this.progress = ko.observable( 0 );
        this.text = ko.observable( '' );
        // only used for batch printing because this service does not send it's current progress
        this.cache = {};
    }

    ProgressBarModel.prototype.reset = function() {
        this.enabled( false );
        this.progress( 0 );
        this.text( '' );
    };

    ProgressBarModel.prototype.updateText = function( text ) {
        this.text( text );
    };

    function isValidInvoice( invoice ) {
        return 'VALID' === invoice.status;
    }

    function fail( response ) {
        var
            errors = Y.doccirrus.errorTable.getErrorsFromResponse( response );

        if( errors.length ) {
            Y.Array.invoke( errors, 'display' );
        }
    }

    /**
     *  Preload list of locations for BS column of cashbook table
     *
     *  @param  {Function}  callback    Of the form fn( err )
     */
    function loadLocations( callback ) {

        var
            locationQuery = {
                options: {
                    fields: { '_id': 1, 'locname': 1 },
                    objPopulate: false
                },
                objPopulate: false
            };

        Y.doccirrus.jsonrpc.api.location
            .read( locationQuery )
            .then( onLocationsRead )
            .fail( onFail );

        function onLocationsRead( foundLocations ) {
            allLocations = foundLocations.data ? foundLocations.data : foundLocations;
            callback( null );
        }

        function onFail( err ) {
            Y.log( 'Could not load current set of locations: ' + JSON.stringify( err ), 'warn', NAME );
            callback( err );
        }
    }

    function loadCurrentUser( callback ) {
        Y.doccirrus.jsonrpc.api.employee
            .getIdentityForUsername( { username: Y.doccirrus.auth.getUserId() } )
            .then( onIdentityLoaded )
            .fail( onFail );

        function onIdentityLoaded( response ) {
            var data = response && response.data ? response.data : {};
            currentUser = data;
            callback( null );
        }

        function onFail( err ) {
            Y.log( 'Could not load current user object: ' + JSON.stringify( err ), 'warn', NAME );
            return callback( err );
        }
    }

    function loadInvoiceConfiguration( callback ) {
        Y.doccirrus.jsonrpc.api.invoiceconfiguration.read()
            .then( onConfigLoaded )
            .fail( onFail );

        function onConfigLoaded( config ) {
            waitDays = config.data[0] && config.data[0] && config.data[0].dunningSchemes;
            callback( null );
        }

        function onFail( err ) {
            Y.log( 'Could not load current set of locations: ' + JSON.stringify( err ), 'warn', NAME );
            callback( err );
        }
    }

    function initActivitySettings( callback ) {
        Y.doccirrus.jsonrpc.api.activitysettings
            .read( { query: { _id: Y.doccirrus.schemas.activitysettings.getId() } } )
            .then( onSettingsLoaded )
            .fail( onFail );

        function onSettingsLoaded( response ) {
            activitySettings = Y.Lang.isArray( response.data ) && response.data[0] && Y.Lang.isArray( response.data[0].settings ) && response.data[0].settings || [];
            callback( null );
        }

        function onFail( err ) {
            Y.log( 'Could not load activity settings: ' + JSON.stringify( err ), 'warn', NAME );
            callback( err );
        }
    }

    return {
        registerNode: function() {

            async.series( [ loadLocations, loadCurrentUser, loadInvoiceConfiguration, initActivitySettings ], onDataReady );

            function onDataReady( err ) {
                if( err ) {
                    Y.log( 'Could not initialize cashbook: ' + JSON.stringify( err ), 'warn', NAME );
                    return;
                }

                var cashBookVM = new CashBookViewModel( { 'locations': allLocations, 'user': currentUser, 'days': waitDays, 'activitySettings': activitySettings } );
                ko.applyBindings( cashBookVM, document.querySelector( '#cashBook' ) );
            }

        },

        deregisterNode: function() {
            Y.doccirrus.communication.off( 'linkedActivityUpdate', 'cashbookLinkedActivityUpdateHandler' );
            Y.doccirrus.communication.off( 'cashbookTransition', 'cashbookTransitionHandler' );
            Y.doccirrus.communication.off( 'invoiceBatchCreationAction', 'invoiceBatchCreationActionHandler' );
            Y.doccirrus.communication.off( 'mediaConcatenatePDFs', 'mediaConcatenatePDFsActionHandler' );
            Y.doccirrus.communication.off( 'onPDFCreated', 'invoiceBatchCreationActionHandler' );
            Y.doccirrus.communication.off( 'cashbookProgress', 'invoiceCashbookProgressnHandler' );
            Y.doccirrus.communication.off( 'activityPrinted', 'activityPrintedHandler' );
            Y.doccirrus.communication.off( 'asyncPDFPrinted', 'cashbookPDFPrintHandler' );
        }
    };
}
