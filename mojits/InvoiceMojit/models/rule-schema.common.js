/**
 * User: do
 * Date: 04/12/15  18:09
 * (c) 2012, Doc Cirrus GmbH, Berlin
 */

/*global YUI */
'use strict';

YUI.add( 'rule-schema', function( Y, NAME ) {
        /**
         * The RuleLog_T entry schema,
         *
         * @module rule-schema, log schema to keep track of errors and warnings generated by the rule engine
         */

        var
            i18n = Y.doccirrus.i18n,
            types = {},
            DC_DIRECTORY_ID = '000000000000000000000001', // add more default directories like GOAE EBM etc.
            DC_GOAE_PKV_DIRECTORY_ID = '000000000000000000000011',
            DC_GOAE_SZ_DIRECTORY_ID = '000000000000000000000015',
            DC_EBM_DIRECTORY_ID = '000000000000000000000021',
            DC_TARMED_DIRECTORY_ID = '000000000000000000000031',
            DC_TARMED_DIRECTORY_UVG_ID = '000000000000000000000032',
            DC_TARMED_DIRECTORY_OTHERS_ID = '000000000000000000000033',
            DC_PANDEMIELEISTUNGEN_DIRECTORY_ID = '000000000000000000000036',
            DC_TARMED_UVG_RULE_ID = '000000000000000000000034',
            DC_TARMED_UVG_FALL_RULE_ID = '000000000000000000000035',
            PRACTICE_DIRECTORY_ID = '000000000000000000000002',
            DOQUVIDE_DIRECTORY_ID = '000000000000000000000003',
            CARDIO_DIRECTORY_ID = '000000000000000000000004',
            DQS_DIRECTORY_ID = '000000000000000000000005',
            PEDIA_DIRECTORY_ID = '000000000000000000000006',
            rootDirectoryTemplate = [
                {
                    _id: DC_DIRECTORY_ID,
                    name: 'DocCirrus Regeln',
                    isDirectory: true,
                    isLocked: true,
                    parent: null
                },
                {
                    _id: DC_EBM_DIRECTORY_ID,
                    name: 'EBM',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: DC_TARMED_DIRECTORY_ID,
                    name: 'TARMED',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: DC_TARMED_DIRECTORY_UVG_ID,
                    name: 'TARMED 1.08',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: DC_TARMED_DIRECTORY_OTHERS_ID,
                    name: 'TARMED Sonstige',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: DC_PANDEMIELEISTUNGEN_DIRECTORY_ID,
                    name: 'Pandemieleistungen',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: DC_GOAE_PKV_DIRECTORY_ID,
                    name: 'GOÄ PKV',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: DC_GOAE_SZ_DIRECTORY_ID,
                    name: 'GOÄ SZ',
                    isDirectory: true,
                    isLocked: true,
                    parent: DC_DIRECTORY_ID
                },
                {
                    _id: PRACTICE_DIRECTORY_ID,
                    name: 'Praxis Regeln',
                    isDirectory: true,
                    isLocked: false,
                    parent: null
                },
                {
                    _id: DOQUVIDE_DIRECTORY_ID,
                    name: 'Doquvide',
                    isDirectory: true,
                    isLocked: true,
                    parent: null
                },
                {
                    _id: DQS_DIRECTORY_ID,
                    name: 'DQS / DQS RS',
                    isDirectory: true,
                    isLocked: true,
                    parent: null
                },
                {
                    _id: CARDIO_DIRECTORY_ID,
                    name: 'Cardio',
                    isDirectory: true,
                    isLocked: true,
                    parent: null
                },
                {
                    _id: PEDIA_DIRECTORY_ID,
                    name: 'inPedia',
                    isDirectory: true,
                    isLocked: true,
                    parent: null
                },
                {
                    "_id" : DC_TARMED_UVG_RULE_ID,
                    "parent" : DC_TARMED_DIRECTORY_OTHERS_ID,
                    "isDirectory" : false,
                    "isLocked" : false,
                    "isActive" : true,
                    "caseFolderType" : [
                        "PRIVATE_CH_UVG"
                    ],
                    "metaActTypes" : [
                        "PKVSCHEIN"
                    ],
                    "metaActCodes" : [],
                    "metaCriterias" : [
                        "actType",
                        "caseNumber"
                    ],
                    "description" : "TARMED UVG FALL",
                    "referenceArea" : "ENTRY",
                    "periodType" : "MONTH",
                    "periodCount" : 1,
                    "periodReference" : "raum",
                    "rules" : [
                        {
                            "ruleId" : DC_TARMED_UVG_FALL_RULE_ID,
                            "description" : "Unfall Nummer",
                            "isActive" : true,
                            "validations" : {
                                "\\\\$or" : [
                                    {
                                        "context" : "ACTIVITY",
                                        "criteria" : {
                                            "actType" : {
                                                "\\\\$eq" : "PKVSCHEIN"
                                            },
                                            "caseNumber" : {
                                                "\\\\$regex" : "^\\s*$",
                                                "\\\\$options" : ""
                                            }
                                        }
                                    },
                                    {
                                        "context" : "ACTIVITY",
                                        "criteria" : {
                                            "actType" : {
                                                "\\\\$eq" : "PKVSCHEIN"
                                            },
                                            "caseNumber" : {
                                                "\\\\$exists" : false
                                            }
                                        }
                                    }
                                ]
                            },
                            "actions" : [
                                {
                                    "type" : "ERROR"
                                }
                            ],
                            "metaActTypes" : [
                                "PKVSCHEIN"
                            ]
                        }
                    ],
                    "metaFuzzy" : true,
                    "metaCaseOpen" : false,
                    "idStr" : DC_TARMED_UVG_RULE_ID
                }
            ],
            defaultRule = {
                description: i18n('IncaseAdminMojit.rules.default.defaultRule'),
                validations: {
                    $and: []
                }
            },
            defaultRuleSet = {
                description: i18n('IncaseAdminMojit.rules.default.defaultRuleSet'),
                referenceArea: 'ENTRY',
                caseFolderType: [ 'PUBLIC' ],
                actType: null,
                catalogShort: null,
                code: null,
                parent: null,
                periodType: "MONTH",
                periodCount: 1,
                periodReference: 'raum',
                rules: [defaultRule]
            };

        // ------- Schema definitions  -------

        types = Y.mix( types, {
                "root": {
                    "base": {
                        "complex": "ext",
                        "type": "RuleSet_T",
                        "lib": types
                    }
                },
                "RuleSet_T": {
                    "parent": {
                        "type": "String",
                        "default": PRACTICE_DIRECTORY_ID,
                        i18n: i18n( 'rule-schema.RuleSet_T.parent.i18n' ),
                        "-en": "parent",
                        "-de": "parent"
                    },
                    "isDirectory": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'rule-schema.RuleSet_T.isDirectory.i18n' ),
                        "-en": "isDirectory",
                        "-de": "isDirectory"
                    },
                    "isLocked": {
                        "type": "Boolean",
                        "default": false,
                        i18n: i18n( 'rule-schema.RuleSet_T.isLocked.i18n' ),
                        "-en": "isLocked",
                        "-de": "isLocked"
                    },
                    "isActive": {
                        "type": "Boolean",
                        "default": true,
                        i18n: i18n( 'rule-schema.RuleSet_T.isActive.i18n' ),
                        "-en": "isActive",
                        "-de": "isActive"
                    },
                    "name": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.name.i18n' ),
                        "-en": "name",
                        "-de": "Name"
                    },
                    "description": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.description.i18n' ),
                        "-en": "Description",
                        "-de": "Beschreibung"
                    },
                    "referenceArea": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.referenceArea.i18n' ),
                        "-en": "Reference Area",
                        "-de": "Fall-Typ"
                    },
                    "caseFolderType": {
                        "type": [ "String" ],
                        i18n: i18n( 'rule-schema.RuleSet_T.caseFolderType.i18n' ),
                        "-en": "Case Type",
                        "-de": "Fall-Typ"
                    },
                    "catalogShort": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.catalogShort.i18n' ),
                        "-en": "Catalog",
                        "-de": "Katalog"
                    },
                    "kv": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.kv.i18n' ),
                        "-en": "kv",
                        "-de": "kv"
                    },
                    "actType": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.actType.i18n' ),
                        "-en": "actType",
                        "-de": "actType"
                    },
                    "code": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.code.i18n' ),
                        "-en": "code",
                        "-de": "code"
                    },
                    "rules": {
                        "type": "Object",
                        i18n: i18n( 'rule-schema.RuleSet_T.rules.i18n' ),
                        "-en": "Rules",
                        "-de": "Regeln"
                    },
                    // original catalog name eg. DC-EBM-D-1450280193358.json set when imported from a catalog
                    "fromCatalog": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.fromCatalog.i18n' ),
                        "-en": "fromCatalog",
                        "-de": "fromCatalog"
                    },
                    // catalog short name eg EBM set when imported from a catalog
                    "fromCatalogShort": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.fromCatalogShort.i18n' ),
                        "-en": "fromCatalogShort",
                        "-de": "fromCatalogShort"
                    },
                    "periodType": {
                        complex: 'eq',
                        type: 'Period_E',
                        lib: types
                    },
                    "periodCount": {
                        "type": "Number",
                        i18n: i18n( 'rule-schema.RuleSet_T.periodCount.i18n' ),
                        "-en": "Period Count",
                        "-de": "Anzahl"
                    },
                    "periodReference": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.periodReference.i18n' ),
                        "-en": "Period Reference",
                        "-de": "Zeitbezug"
                    },
                    "meta": {
                        "complex": "ext",
                        "type": "RuleSetMetadata_T",
                        "lib": types
                    },
                    "idStr": {
                        "type": "String",
                        i18n: i18n( 'rule-schema.RuleSet_T.idStr.i18n' ),
                        "-en": "idStr",
                        "-de": "idStr"
                    }
                },
                Period_E: {
                    type: 'String',
                    i18n: i18n( 'rule-schema.Period_E.Period.i18n' ),
                    '-en': 'Period',
                    '-de': 'Zeitraum',
                    'list': [
                        {
                            'val': 'DAY',
                            i18n: i18n( 'rule-schema.Period_E.DAY.i18n' ),
                            '-de': 'Tag',
                            '-en': 'Day'
                        },
                        {
                            'val': 'WEEK',
                            i18n: i18n( 'rule-schema.Period_E.WEEK.i18n' ),
                            '-de': 'Woche',
                            '-en': 'Week'
                        },
                        {
                            'val': 'MONTH',
                            i18n: i18n( 'rule-schema.Period_E.MONTH.i18n' ),
                            '-de': 'Monat',
                            '-en': 'Month'
                        },
                        {
                            'val': 'QUARTER',
                            i18n: i18n( 'rule-schema.Period_E.QUARTER.i18n' ),
                            '-de': 'Quartal',
                            '-en': 'quarter'
                        },
                        {
                            'val': 'YEAR',
                            i18n: i18n( 'rule-schema.Period_E.YEAR.i18n' ),
                            '-de': 'Jahr',
                            '-en': 'Year'
                        }
                    ]
                },
                RuleSetMetadata_T: {
                    "metaActTypes": {
                        "type": ["String"],
                        i18n: i18n( 'rule-schema.RuleSetMetadata_T.actTypes.i18n' ),
                        "-en": "actTypes",
                        "-de": "actTypes"
                    },
                    "metaActCodes": {
                        "type": ["String"],
                        i18n: i18n( 'rule-schema.RuleSetMetadata_T.actCodes.i18n' ),
                        "-en": "actCodes",
                        "-de": "actCodes"
                    },
                    "metaCriterias": {
                        "type": ["String"],
                        i18n: i18n( 'rule-schema.RuleSetMetadata_T.criterias.i18n' ),
                        "-en": "criterias",
                        "-de": "criterias"
                    },
                    "metaFuzzy": {
                        "type": "Bool",
                        i18n: i18n( 'rule-schema.RuleSetMetadata_T.fuzzy.i18n' ),
                        "-en": "fuzzy",
                        "-de": "fuzzy"
                    },
                    "metaCaseOpen": {
                        "type": "Bool",
                        i18n: i18n( 'rule-schema.RuleSetMetadata_T.metaCaseOpen.i18n' ),
                        "-en": "case open",
                        "-de": "Fall öffnen"
                    }
                }
            }
        );

        function getDirectoryIdByCatalogShort( catalogShort ) {
            var id;
            switch( catalogShort ) {
                case 'GOÄ':
                    id = DC_GOAE_PKV_DIRECTORY_ID;
                    break;
                case 'EBM':
                    id = DC_EBM_DIRECTORY_ID;
                    break;
                case 'TARMED':
                    id = DC_TARMED_DIRECTORY_ID;
                    break;
                case 'TARMED_UVG_IVG_MVG':
                    id = DC_TARMED_DIRECTORY_UVG_ID;
                    break;
                case 'Pandemieleistungen':
                    id = DC_PANDEMIELEISTUNGEN_DIRECTORY_ID;
                    break;
                default:
                    id = DC_DIRECTORY_ID;
            }
            return id;
        }

        function getDefaultRule() {
            return JSON.parse( JSON.stringify( defaultRule ) );
        }

        function getDefaultRuleSet( options ) {
            var data = JSON.parse( JSON.stringify( defaultRuleSet ) );
            if( options.directoryId ) {
                data.parent = options.directoryId;
            }
            data.parent = options.directoryId || null;
            return data;
        }

        function getPracticeDirId() {
            return PRACTICE_DIRECTORY_ID;
        }

        function getDOQUVIDEDirId() {
            return DOQUVIDE_DIRECTORY_ID;
        }

        function getDQSDirId() {
            return DQS_DIRECTORY_ID;
        }

        function getCARDIODirId() {
            return CARDIO_DIRECTORY_ID;
        }

        function getPEDIADirId() {
            return PEDIA_DIRECTORY_ID;
        }

        function getDcDirId() {
            return DC_DIRECTORY_ID;
        }

        function getDcPKVId() {
            return DC_GOAE_PKV_DIRECTORY_ID;
        }

        function getDcSZId() {
            return DC_GOAE_SZ_DIRECTORY_ID;
        }

        function getEBMDirId() {
            return DC_EBM_DIRECTORY_ID;
        }

        function getTarmedId() {
            return DC_TARMED_DIRECTORY_ID;
        }

        function getTarmedUVGId() {
            return DC_TARMED_DIRECTORY_UVG_ID;
        }

        function getTarmedOthersId() {
            return DC_TARMED_DIRECTORY_OTHERS_ID;
        }

        NAME = Y.doccirrus.schemaloader.deriveSchemaName( NAME );

        /**
         * Class case Schemas -- gathers all the schemas that the case Schema works with.
         */
        Y.namespace( 'doccirrus.schemas' )[NAME] = {

            types: types,
            /* OPTIONAL default items to be written to the DB on startup */
            defaultItems: rootDirectoryTemplate,
            name: NAME,
            indexes: [
                { key: {
                    referenceArea: 1,
                    isActive: 1
                } },
                { key: {
                    caseFolderType: 1,
                    referenceArea: 1,
                    isActive: 1
                } },
                { key: {
                    referenceArea: 1,
                    isActive: 1,
                    caseFolderType: 1,
                    periodType: 1,
                    periodCount: 1,
                    periodReference: 1
                } }
            ],
            getDirectoryIdByCatalogShort: getDirectoryIdByCatalogShort,
            getDefaultRule: getDefaultRule,
            getDefaultRuleSet: getDefaultRuleSet,
            getPracticeDirId: getPracticeDirId,
            getDOQUVIDEDirId: getDOQUVIDEDirId,
            getDQSDirId: getDQSDirId,
            getCARDIODirId: getCARDIODirId,
            getPEDIADirId: getPEDIADirId,
            getDcDirId: getDcDirId,
            getDcPKVId: getDcPKVId,
            getDcSZId: getDcSZId,
            getEBMDirId: getEBMDirId,
            getTarmedId: getTarmedId,
            getTarmedUVGId: getTarmedUVGId,
            getTarmedOthersId: getTarmedOthersId
        };

        Y.doccirrus.schemaloader.mixSchema( Y.doccirrus.schemas[NAME], true );
    },
    '0.0.1', {
        requires: [
            'dcschemaloader',
            'doccirrus',
            'schemautils'
        ]
    }
);
