/**
 * User: do
 * Date: 20/11/15  14:48
 * (c) 2012, Doc Cirrus GmbH, Berlin
 */

/**
 * (c) 2014, Doc Cirrus GmbH, Berlin
 */
/*global YUI */
'use strict';

YUI.add( 'rulelog-schema', function( Y, NAME ) {
        /**
         * The RuleLog_T entry schema,
         *
         * @module rulelog-schema, log schema to keep track of errors and warnings generated by the rule engine
         */

        var
            i18n = Y.doccirrus.i18n,
            types = {};

        // ------- Schema definitions  -------

        types = Y.mix( types, {
                "root": {
                    "base": {
                        "complex": "ext",
                        "type": "RuleLog_T",
                        "lib": types
                    }
                },
                "RuleLog_T": {
                    "ruleSetId": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.ruleSetId.i18n' ),
                        "-en": "ruleSetId",
                        "-de": "ruleSetId"
                    },
                    "ruleId": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.ruleId.i18n' ),
                        "-en": "ruleId",
                        "-de": "ruleId"
                    },
                    "caseFolderId": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.caseFolderId.i18n' ),
                        "-en": "caseFolderId",
                        "-de": "caseFolderId"
                    },
                    "locationId": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.locationId.i18n' ),
                        "-en": "locationId",
                        "-de": "locationId"
                    },
                    "patientId": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.patientId.i18n' ),
                        "-en": "patientId",
                        "-de": "patientId"
                    },
                    "referenceArea": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.referenceArea.i18n' ),
                        "-en": "referenceArea",
                        "-de": "referenceArea"
                    },
                    "referenceAreaFrom": {
                        "type": "Date",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.referenceAreaFrom.i18n' ),
                        "-en": "referenceAreaFrom",
                        "-de": "referenceAreaFrom"
                    },
                    "referenceAreaTo": {
                        "type": "Date",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.referenceAreaTo.i18n' ),
                        "-en": "referenceAreaTo",
                        "-de": "referenceAreaTo"
                    },
                    "referenceAreaCatalogShort": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.referenceAreaCatalogShort.i18n' ),
                        "-en": "referenceAreaCatalogShort",
                        "-de": "referenceAreaCatalogShort"
                    },
                    "ruleLogType": {
                        "complex": "eq",
                        "type": "RuleLogType_E",
                        "lib": types,
                        "required": true,
                        i18n: i18n( 'rulelog-schema.RuleLog_T.ruleLogType.i18n' ),
                        "-en": "ruleLogType",
                        "-de": "ruleLogType"
                    },
                    // future fields:
                    // - ruleSetId
                    // - corrections
                    // - factId / factIds ?
                    // - timestamp
                    "factId": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.factId.i18n' ),
                        "-en": "factId",
                        "-de": "factId"
                    },
                    "message": {
                        "type": "String",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.patientId.i18n' ),
                        "-en": "patientId",
                        "-de": "patientId"
                    },
                    "timestamp": {
                        "type": "Date",
                        i18n: i18n( 'rulelog-schema.RuleLog_T.timestamp.i18n' ),
                        "-en": "timestamp",
                        "-de": "timestamp"
                    },
                    "activitiesToCreate": {
                        "type": ["object"],
                        i18n: i18n( 'rulelog-schema.RuleLog_T.activitiesToCreate.i18n' ),
                        "-en": "activitiesToCreate",
                        "-de": "activitiesToCreate"
                    },
                    "caseFolderType": {
                        "type": [ "String" ],
                        i18n: i18n( 'rule-schema.RuleLog_T.caseFolderType.i18n' ),
                        "-en": "Case Type",
                        "-de": "Fall-Typ"
                    },
                    "affectedActivities": {
                        "type": ["object"],
                        i18n: i18n( 'rulelog-schema.RuleLog_T.affectedActivities.i18n' ),
                        "-en": "affectedActivities",
                        "-de": "affectedActivities"
                    },
                    "actTypes": {
                        "type": ["String"],
                        i18n: i18n( 'rulelog-schema.RuleLog_T.actTypes.i18n' ),
                        "-en": "actTypes",
                        "-de": "actTypes"
                    },
                    "actCodes": {
                        "type": ["String"],
                        i18n: i18n( 'rulelog-schema.RuleLog_T.actCodes.i18n' ),
                        "-en": "actCodes",
                        "-de": "actCodes"
                    },
                    "requiredCodes": {
                        "type": ["String"],
                        i18n: i18n( 'rulelog-schema.RuleLog_T.requiredCodes.i18n' ),
                        "-en": "requiredCodes",
                        "-de": "requiredCodes"
                    },
                    "allCodes": {
                        "type": ["String"],
                        i18n: i18n( 'rulelog-schema.RuleLog_T.allCodes.i18n' ),
                        "-en": "allCodes",
                        "-de": "allCodes"
                    },
                    "onCaseOpen": {
                        "type": "Bool",
                        i18n: i18n( 'rule-schema.RuleSetMetadata_T.fuzzy.i18n' ),
                        "-en": "on case open",
                        "-de": "bei Fall öffnen"
                    }
                },
                "RuleLogType_E": {
                    "type": "String",
                    "required": true,
                    "list": [
                        {
                            "val": "ERROR",
                            "-de": "Fehler",
                            i18n: i18n( 'rulelog-schema.RuleLogType_E.ERROR.i18n' ),
                            "-en": "Errror"
                        },
                        {
                            "val": "WARNING",
                            "-de": "Warnung",
                            i18n: i18n( 'rulelog-schema.RuleLogType_E.WARNING.i18n' ),
                            "-en": "Warning"
                        },
                        {
                            "val": "ACTIVITY",
                            "-de": "Akte",
                            i18n: i18n( 'rulelog-schema.RuleLogType_E.ACTIVITY.i18n' ),
                            "-en": "Activity"
                        }
                    ]
                }
            }
        );

        NAME = Y.doccirrus.schemaloader.deriveSchemaName( NAME );

        /**
         * Class case Schemas -- gathers all the schemas that the case Schema works with.
         */
        Y.namespace( 'doccirrus.schemas' )[NAME] = {

            types: types,
            /* OPTIONAL default items to be written to the DB on startup */
            defaultItems: [],
            name: NAME,

            indexes: [
                {
                    "key": {
                        "referenceArea": 1,
                        "patientId": 1,
                        "referenceAreaFrom": 1,
                        "referenceAreaTo": 1
                    },
                    indexType: { sparse: true }
                }
            ],

            getActivityToCreateDescription: function(template){
                var actDescription,
                    actTypeTranslated = (template.actType) ? Y.doccirrus.schemaloader.getEnumListTranslation( 'activity', 'Activity_E', template.actType, '-de', 'k.A.' ) : '' ;
                switch( template.actType ){
                    case 'TREATMENT':
                        actDescription = ( (template.toCreate > 1) ? template.toCreate + ' x ' : '' ) +
                                         actTypeTranslated + ': ' +
                                         ( ( template.code ) ? '(' + template.catalogShort+') ' + template.code + ' ': '' ) +
                                         ( ( template.explanations ) ? 'Erläuterungen: ' + template.explanations + ' ' : '' ) +
                                         'Beschreibung: ' + template.comment || '';
                        break;
                    case 'DIAGNOSIS':
                        actDescription = actTypeTranslated + ': ' +
                                         ( ( template.code ) ? '(' + template.catalogShort+') ' + template.code + ' ' : '' ) +
                                         ( ( template.diagnosisCert ) ? 'Sicherheit: ' + Y.doccirrus.kbvcommonutils.mapDiagnosisCert( template.diagnosisCert ) + ' ' : '' ) +
                                         ( ( template.explanations ) ? 'Begründung: ' + template.explanations + ' ' : '' ) +
                                         'Beschreibung: ' + template.comment || '';
                        break;
                    default:
                        actDescription = actTypeTranslated + ': ' +
                                         'Beschreibung: ' + template.comment;
                }
                return actDescription;
            }
        };

        Y.doccirrus.schemaloader.mixSchema( Y.doccirrus.schemas[NAME], true );
    },
    '0.0.1', {
        requires: [
            'doccirrus',
            'dcschemaloader'
        ]
    }
);
