/*jslint anon:true, sloppy:true, moment:true*/
/*global fun:true,ko, moment */
/*exported fun */

fun = function _fn( Y, NAME ) {
    'use strict';

    return {

        registerNode: function() {
            var
                mediaMalwareTable,
                i18n = Y.doccirrus.i18n,
                KoComponentManager = Y.doccirrus.KoUI.KoComponentManager,
                inButtonClick = ko.observable( false );

            function mediaProxy( params ) {
                //  KOTable is stripping this from baseParams for some reason
                params.query.malwareWarning = { $exists: true, $ne: '' };
                return Y.doccirrus.jsonrpc.api.media.read( params );
            }

            mediaMalwareTable = KoComponentManager.createComponent( {
                componentType: 'KoTable',
                componentConfig: {
                    formRole: 'casefile-ko-insuite-table',
                    pdfTitle: i18n( 'InSuiteAdminMojit.tab_malware.pdfTitle' ),
                    stateId: 'dc-malware-table',
                    striped: false,
                    remote: true,
                    proxy: mediaProxy,
                    columns: [
                        {
                            forPropertyName: '_id',
                            label: 'Datei',             //  TRANSLATEME
                            width: '20%',
                            isFilterable: false,
                            isSortable: false,
                            visible: false,
                            renderer: function( item ) {
                                var
                                    data = item.row,
                                    url = Y.doccirrus.media.getMediaUrl( data, 'original' ),
                                    link = '<a href="' + url + '">' + item.value + '</a>';

                                return link;
                            }
                        },
                        {
                            forPropertyName: 'name',
                            label: i18n( 'media-schema.Media_T.name' ),
                            width: '20%',
                            isFilterable: true,
                            isSortable: true
                        },
                        {
                            forPropertyName: 'ownerCollection',
                            label: i18n( 'media-schema.Media_T.ownerCollection' ),
                            width: '10%',
                            isFilterable: false,
                            isSortable: false,
                            renderer: function( item ) {
                                var
                                    data = item.row,
                                    translation = Y.doccirrus.schemaloader.translateEnumValue( 'i18n', data.ownerCollection, Y.doccirrus.schemas.media.types.OwnerCollection_E.list, '' ),
                                    url,
                                    link;

                                switch ( data.ownerCollection ) {
                                    case 'patient':
                                        //  patient profile picture
                                        url = '/incase#/patient/' + data.ownerId + '/tab/patient_detail';
                                        break;
                                    case 'activity':
                                        //  attachment to an activity
                                        url = '/incase#/activity/' + data.ownerId + '/section/documentform';
                                        break;
                                    case 'forms':
                                        //  form image
                                        url = '/forms#form=' + data.ownerId;
                                        break;
                                    default:
                                        return data.ownerCollection;
                                }

                                link = Y.doccirrus.infras.getPrivateURL( url );
                                link = '<a href="' + link + '">' + translation + '</a>';
                                return link;
                            }
                        },
                        {
                            forPropertyName: 'ownerId',
                            label: i18n( 'media-schema.Media_T.ownerId' ),
                            width: '20%',
                            isFilterable: true,
                            isSortable: true,
                            visible: false
                        },
                        {
                            forPropertyName: 'mime',
                            label: i18n( 'media-schema.Media_T.mime' ),
                            width: '7%',
                            isFilterable: true,
                            isSortable: true,
                            renderer: function( item ) {
                                return Y.doccirrus.media.getExt( item.value );
                            }
                        },
                        {
                            forPropertyName: 'malwareWarning',
                            label: i18n( 'media-schema.Media_T.malwareWarning' ),
                            width: '160px',
                            isFilterable: true,
                            isSortable: true,
                            renderer: function( item ) {
                                //  Just show the name
                                if ( !item.value ) { return ''; }
                                var malwareName = item.value.split( '\n' )[0];
                                return malwareName.replace( ':', '').replace( 'FOUND', '' ).trim();
                            }
                        },
                        {
                            forPropertyName: 'malwareFalsePositive',
                            label: i18n( 'media-schema.Media_T.malwareFalsePositive' ),
                            width: '5%',
                            isFilterable: true,
                            isSortable: true,
                            renderer: function( item ) {
                                var isBad = item.row.malwareFalsePositive ? 'btn-success' : 'btn-danger';
                                return '<button class="btn btn-small ' + isBad + '"><i class="glyphicon glyphicon-eye-open"></i></button>';
                            },
                            onCellClick: function( item ) {
                                //  TODO: show full details of object, and audit log entries in dedicated modal
                                var
                                    data = item.row,
                                    msg = '<pre>' + data.malwareWarning + '</pre>';

                                Y.doccirrus.DCWindow.notice({
                                    message: msg
                                } );
                            }
                        },
                        {
                            forPropertyName: 'lastChanged',
                            label: i18n( 'patient-schema.Devices_T.timestamp.i18n' ),
                            width: '18%',
                            isFilterable: true,
                            isSortable: true,
                            direction: 'DESC',
                            sortInitialIndex: 0,
                            queryFilterType: Y.doccirrus.DCQuery.KBVDOB_OPERATOR,
                            renderer: function( item ) {
                                return moment( item.value ).format( 'DD.MM.YY HH:mm:ss' );
                            }
                        },
                        {
                            forPropertyName: 'okButton',
                            label: '',
                            width: '6%',
                            isFilterable: false,
                            isSortable: false,
                            renderer: function( item ) {
                                var icon = item.row.malwareFalsePositive ? 'glyphicon-remove' : 'glyphicon-ok';
                                return '<button class="btn btn-small"><i class="glyphicon ' + icon + '"></i></button>';
                            },
                            onCellClick: function( item ) {
                                var
                                    row = item.row,
                                    markdownFalsePositive = row.malwareFalsePositive || false;

                                //  prevent double click
                                if ( inButtonClick() ) { return; }

                                Y.doccirrus.DCWindow.confirm( {
                                    title: i18n( 'InCaseMojit.casefile_attachments.text.MARK_FALSE_POSITIVE' ),
                                    message: i18n( 'InCaseMojit.casefile_attachments.text.FALSE_POSITIVE_MSG' ),
                                    callback: onConfirmed
                                } );

                                function onConfirmed( result ) {
                                    if( !result.success ) { return; }
                                    var args = { mediaId: row._id, isFalsePositive: !markdownFalsePositive };
                                    inButtonClick( true );

                                    Y.doccirrus.jsonrpc.api.media.markFalsePositive( args ).then( onMarked ).fail( onMarkFailed );
                                }

                                function onMarked() {
                                    inButtonClick( false );
                                    Y.log( 'Marked file false positive: ' + self.mediaId, 'warn', NAME );
                                    mediaMalwareTable.reload();
                                }

                                function onMarkFailed( err ) {
                                    inButtonClick( false );
                                    Y.log( 'Could not mark media false positive: ' + JSON.stringify( err ), 'error', NAME );
                                }
                            }
                        },
                        {
                            forPropertyName: 'deleteButton',
                            label: '',
                            width: '6%',
                            isFilterable: false,
                            isSortable: false,
                            renderer: function( /* item */ ) {
                                return '<button class="btn btn-small"><i class="glyphicon glyphicon-trash"></i></button>';
                            },
                            onCellClick: function( item ) {
                                var
                                    row = item.row,
                                    args = { mediaId: row._id };

                                if ( inButtonClick() ) { return; }
                                inButtonClick( true );

                                Y.doccirrus.jsonrpc.api.media.deleteMalware( args ).then( onDeleted ).fail( onDeleteFailed );

                                function onDeleted() {
                                    Y.log( 'Deleted file due to suspicion of malware: ' + self.mediaId, 'warn', NAME );
                                    inButtonClick( false );
                                    mediaMalwareTable.reload();
                                }

                                function onDeleteFailed( err ) {
                                    inButtonClick( false );
                                    Y.log( 'Could not delete malware: ' + JSON.stringify( err ), 'error', NAME );
                                }
                            }
                        }
                    ],
                    selectMode: 'none'
                }
            } );

            ko.applyBindings( {
                pageTitle: i18n( 'InSuiteAdminMojit.tab_malware.pageTitle' ),
                mediaMalwareTable: mediaMalwareTable
            }, document.querySelector( '#malwareBrowser' ) );
        },

        deregisterNode: function() {

        }
    };
};
